{"version":3,"file":"bundle.js","sources":["../../../node_modules/util-deprecate/node.js","../../../node_modules/highland/lib/index.js","../../../node_modules/@mfl/logger/source/logger.js","../source/logger.js","../source/reverse-in-parallel.js","../source/index.js"],"sourcesContent":["\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","/**\n * Highland: the high-level streams library\n *\n * Highland may be freely distributed under the Apache 2.0 license.\n * http://github.com/caolan/highland\n * Copyright (c) Caolan McMahon\n *\n */\n\n\nvar inherits = require('util').inherits;\nvar deprecate = require('util-deprecate');\nvar EventEmitter = require('events').EventEmitter;\nvar Decoder = require('string_decoder').StringDecoder;\n\n/**\n * The Stream constructor, accepts an array of values or a generator function\n * as an optional argument. This is typically the entry point to the Highland\n * APIs, providing a convenient way of chaining calls together.\n *\n * **Arrays -** Streams created from Arrays will emit each value of the Array\n * and then emit a [nil](#nil) value to signal the end of the Stream.\n *\n * **Generators -** These are functions which provide values for the Stream.\n * They are lazy and can be infinite, they can also be asynchronous (for\n * example, making a HTTP request). You emit values on the Stream by calling\n * `push(err, val)`, much like a standard Node.js callback. Once it has been\n * called, the generator function will not be called again unless you call\n * `next()`. This call to `next()` will signal you've finished processing the\n * current data and allow for the generator function to be called again. If the\n * Stream is still being consumed the generator function will then be called\n * again.\n *\n * You can also redirect a generator Stream by passing a new source Stream\n * to read from to next. For example: `next(other_stream)` - then any subsequent\n * calls will be made to the new source.\n *\n * **Node Readable Stream -** Pass in a Node Readable Stream object to wrap\n * it with the Highland API. Reading from the resulting Highland Stream will\n * begin piping the data from the Node Stream to the Highland Stream.\n *\n * A stream constructed in this way relies on `Readable#pipe` to end the\n * Highland Stream once there is no more data. Not all Readable Streams do\n * this. For example, `IncomingMessage` will only emit `close` when the client\n * aborts communications and will *not* properly call `end`. In this case, you\n * can provide an optional `onFinished` function with the signature\n * `onFinished(readable, callback)` as the second argument.\n *\n * This function will be passed the Readable and a callback that should called\n * when the Readable ends. If the Readable ended from an error, the error\n * should be passed as the first argument to the callback. `onFinished` should\n * bind to whatever listener is necessary to detect the Readable's completion.\n * If the callback is called multiple times, only the first invocation counts.\n * If the callback is called *after* the Readable has already ended (e.g., the\n * `pipe` method already called `end`), it will be ignored.\n *\n * The `onFinished` function may optionally return one of the following:\n *\n * - A cleanup function that will be called when the stream ends. It should\n * unbind any listeners that were added.\n * - An object with the following optional properties:\n *    - `onDestroy` - the cleanup function.\n *    - `continueOnError` - Whether or not to continue the stream when an\n *      error is passed to the callback. Set this to `true` if the Readable\n *      may continue to emit values after errors. Default: `false`.\n *\n * See [this issue](https://github.com/caolan/highland/issues/490) for a\n * discussion on why Highland cannot reliably detect stream completion for\n * all implementations and why the `onFinished` function is required.\n *\n * **EventEmitter / jQuery Elements -** Pass in both an event name and an\n * event emitter as the two arguments to the constructor and the first\n * argument emitted to the event handler will be written to the new Stream.\n *\n * You can pass a mapping hint as the third argument, which specifies how\n * event arguments are pushed into the stream. If no mapping hint is provided,\n * only the first value emitted with the event to the will be pushed onto the\n * Stream.\n *\n * If `mappingHint` is a number, an array of that length will be pushed onto\n * the stream, containing exactly that many parameters from the event. If it's\n * an array, it's used as keys to map the arguments into an object which is\n * pushed to the tream. If it is a function, it's called with the event\n * arguments, and the returned value is pushed.\n *\n * **Promise -** Accepts an ES6 / jQuery style promise and returns a\n * Highland Stream which will emit a single value (or an error). In case you use\n * [bluebird cancellation](http://bluebirdjs.com/docs/api/cancellation.html) Highland Stream will be empty for a cancelled promise.\n *\n * **Iterator -** Accepts an ES6 style iterator that implements the [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_.22iterator.22_protocol):\n * yields all the values from the iterator using its `next()` method and terminates when the\n * iterator's done value returns true. If the iterator's `next()` method throws, the exception will be emitted as an error,\n * and the stream will be ended with no further calls to `next()`.\n *\n * **Iterable -** Accepts an object that implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_.22iterable.22_protocol),\n * i.e., contains a method that returns an object that conforms to the iterator protocol. The stream will use the\n * iterator defined in the `Symbol.iterator` property of the iterable object to generate emitted values.\n *\n * @id _(source)\n * @section Stream Objects\n * @name _(source)\n * @param {Array | Function | Iterator | Iterable | Promise | Readable Stream | String} source - (optional) source to take values from from\n * @param {Function} onFinished - (optional) a function that detects when the readable completes. Second argument. Only valid if `source` is a Readable.\n * @param {EventEmitter | jQuery Element} eventEmitter - (optional) An event emitter. Second argument. Only valid if `source` is a String.\n * @param {Array | Function | Number} mappingHint - (optional) how to pass the\n * arguments to the callback. Only valid if `source` is a String.\n * @api public\n *\n * // from an Array\n * _([1, 2, 3, 4]);\n *\n * // using a generator function\n * _(function (push, next) {\n *     push(null, 1);\n *     push(err);\n *     next();\n * });\n *\n * // a stream with no source, can pipe node streams through it etc.\n * var through = _();\n *\n * // wrapping a Node Readable Stream so you can easily manipulate it\n * _(readable).filter(hasSomething).pipe(writeable);\n *\n * // wrapping a Readable that may signify completion by emitting `close`\n * // (e.g., IncomingMessage).\n * _(req, function (req, callback) {\n *     req.on('end', callback)\n *         .on('close', callback)\n *         .on('error', callback);\n *\n *     return function () {\n *         req.removeListener('end', callback);\n *         req.removeListener('close', callback);\n *         req.removeListener('error', callback);\n *     };\n * }).pipe(writable);\n *\n * // wrapping a Readable that may emit values after errors.\n * _(req, function (req, callback) {\n *     req.on('error', callback);\n *\n *     return {\n *         onDestroy: function () {\n *             req.removeListener('error', callback);\n *         },\n *         continueOnError: true\n *     };\n * }).pipe(writable);\n *\n * // creating a stream from events\n * _('click', btn).each(handleEvent);\n *\n * // creating a stream from events with a mapping array\n * _('request', httpServer, ['req', 'res']).each(handleEvent);\n * //=> { req: IncomingMessage, res: ServerResponse }\n *\n * // creating a stream from events with a mapping function\n * _('request', httpServer, function(req, res) {\n *     return res;\n * }).each(handleEvent);\n * //=> IncomingMessage\n *\n * // from a Promise object\n * var foo = _($.getJSON('/api/foo'));\n *\n * //from an iterator\n * var map = new Map([['a', 1], ['b', 2]]);\n * var bar = _(map.values()).toArray(_.log);\n * //=> [1, 2]\n *\n * //from an iterable\n * var set = new Set([1, 2, 2, 3, 4]);\n * var bar = _(set).toArray(_.log);\n * //=> [ 1, 2, 3, 4]\n */\n\n/*eslint-disable no-multi-spaces */\nexports = module.exports = function (/*optional*/xs, /*optional*/secondArg, /*optional*/ mappingHint) {\n    /*eslint-enable no-multi-spaces */\n    return new Stream(xs, secondArg, mappingHint);\n};\n\nvar _ = exports;\n\n// Create quick slice reference variable for speed\nvar slice = Array.prototype.slice;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n// ES5 detected value, used for switch between ES5 and ES3 code\nvar isES5 = (function () {\n    'use strict';\n    return Function.prototype.bind && !this;\n}());\n\n\n_.isUndefined = function (x) {\n    return typeof x === 'undefined';\n};\n\n_.isFunction = function (x) {\n    return typeof x === 'function';\n};\n\n_.isObject = function (x) {\n    return typeof x === 'object' && x !== null;\n};\n\n_.isString = function (x) {\n    return typeof x === 'string';\n};\n\n_.isArray = Array.isArray || function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n};\n\n// setImmediate browser fallback\nif (typeof setImmediate === 'undefined') {\n    _.setImmediate = function (fn) {\n        setTimeout(fn, 0);\n    };\n}\n// check no process.stdout to detect browserify\nelse if (typeof process === 'undefined' || !(process.stdout)) {\n    // modern browser - but not a direct alias for IE10 compatibility\n    _.setImmediate = function (fn) {\n        setImmediate(fn);\n    };\n}\nelse {\n    _.setImmediate = setImmediate;\n}\n\n/**\n * The end of stream marker. This is sent along the data channel of a Stream\n * to tell consumers that the Stream has ended. See the example map code for\n * an example of detecting the end of a Stream.\n *\n * Note: `nil` is setup as a global where possible. This makes it convenient\n * to access, but more importantly lets Streams from different Highland\n * instances work together and detect end-of-stream properly. This is mostly\n * useful for NPM where you may have many different Highland versions installed.\n *\n * @id nil\n * @section Utils\n * @name _.nil\n * @api public\n *\n * var map = function (iter, source) {\n *     return source.consume(function (err, val, push, next) {\n *         if (err) {\n *             push(err);\n *             next();\n *         }\n *         else if (val === _.nil) {\n *             push(null, val);\n *         }\n *         else {\n *             push(null, iter(val));\n *             next();\n *         }\n *     });\n * };\n */\n\n// set up a global nil object in cases where you have multiple Highland\n// instances installed (often via npm)\nvar _global = this;\nif (typeof global !== 'undefined') {\n    _global = global;\n}\nelse if (typeof window !== 'undefined') {\n    _global = window;\n}\nif (!_global.nil) {\n    _global.nil = {};\n}\nvar nil = _.nil = _global.nil;\n\n/**\n * Transforms a function with specific arity (all arguments must be\n * defined) in a way that it can be called as a chain of functions until\n * the arguments list is saturated.\n *\n * This function is not itself curryable.\n *\n * @id curry\n * @name _.curry(fn, [*arguments])\n * @section Functions\n * @param {Function} fn - the function to curry\n * @param args.. - any number of arguments to pre-apply to the function\n * @returns Function\n * @api public\n *\n * fn = curry(function (a, b, c) {\n *     return a + b + c;\n * });\n *\n * fn(1)(2)(3) == fn(1, 2, 3)\n * fn(1, 2)(3) == fn(1, 2, 3)\n * fn(1)(2, 3) == fn(1, 2, 3)\n */\n\n_.curry = function (fn /* args... */) {\n    var args = slice.call(arguments);\n    return _.ncurry.apply(this, [fn.length].concat(args));\n};\n\n/**\n * Same as `curry` but with a specific number of arguments. This can be\n * useful when functions do not explicitly define all its parameters.\n *\n * This function is not itself curryable.\n *\n * @id ncurry\n * @name _.ncurry(n, fn, [args...])\n * @section Functions\n * @param {Number} n - the number of arguments to wait for before apply fn\n * @param {Function} fn - the function to curry\n * @param args... - any number of arguments to pre-apply to the function\n * @returns Function\n * @api public\n *\n * fn = ncurry(3, function () {\n *     return Array.prototype.join.call(arguments, '.');\n * });\n *\n * fn(1, 2, 3) == '1.2.3';\n * fn(1, 2)(3) == '1.2.3';\n * fn(1)(2)(3) == '1.2.3';\n */\n\n_.ncurry = function (n, fn /* args... */) {\n    var largs = slice.call(arguments, 2);\n    if (largs.length >= n) {\n        return fn.apply(this, largs.slice(0, n));\n    }\n\n    return _.partial.apply(this, [_.ncurry, n, fn].concat(largs));\n};\n\n/**\n * Partially applies the function (regardless of whether it has had curry\n * called on it). This will always postpone execution until at least the next\n * call of the partially applied function.\n *\n * @id partial\n * @name _.partial(fn, args...)\n * @section Functions\n * @param {Function} fn - function to partial apply\n * @param args... - the arguments to apply to the function\n * @api public\n *\n * var addAll = function () {\n *     var args = Array.prototype.slice.call(arguments);\n *     return foldl1(add, args);\n * };\n * var f = partial(addAll, 1, 2);\n * f(3, 4) == 10\n */\n\n_.partial = function (f /* args... */) {\n    var args = slice.call(arguments, 1);\n    return function () {\n        return f.apply(this, args.concat(slice.call(arguments)));\n    };\n};\n\n/**\n * Evaluates the function `fn` with the argument positions swapped. Only\n * works with functions that accept two arguments.\n *\n * @id flip\n * @name _.flip(fn, [x, y])\n * @section Functions\n * @param {Function} fn - function to flip argument application for\n * @param x - parameter to apply to the right hand side of f\n * @param y - parameter to apply to the left hand side of f\n * @api public\n *\n * div(2, 4) == 0.5\n * flip(div, 2, 4) == 2\n * flip(div)(2, 4) == 2\n */\n\n_.flip = _.curry(function (fn, x, y) { return fn(y, x); });\n\n/**\n * Creates a composite function, which is the application of function1 to\n * the results of function2. You can pass an arbitrary number of arguments\n * and have them composed. This means you can't partially apply the compose\n * function itself.\n *\n * @id compose\n * @name _.compose(fn1, fn2, ...)\n * @section Functions\n * @api public\n *\n * var add1 = add(1);\n * var mul3 = mul(3);\n *\n * var add1mul3 = compose(mul3, add1);\n * add1mul3(2) == 9\n */\n\n_.compose = function (/*functions...*/) {\n    var fns = slice.call(arguments).reverse();\n    return _.seq.apply(null, fns);\n};\n\n/**\n * The reversed version of [compose](#compose). Where arguments are in the\n * order of application.\n *\n * @id seq\n * @name _.seq(fn1, fn2, ...)\n * @section Functions\n * @api public\n *\n * var add1 = add(1);\n * var mul3 = mul(3);\n *\n * var add1mul3 = seq(add1, mul3);\n * add1mul3(2) == 9\n */\n\n_.seq = function () {\n    var fns = slice.call(arguments);\n    return function () {\n        if (!fns.length) {\n            return null;\n        }\n        var r = fns[0].apply(this, arguments);\n        for (var i = 1; i < fns.length; i++) {\n            r = fns[i].call(this, r);\n        }\n        return r;\n    };\n};\n\nfunction nop() {\n    // Do nothing.\n}\n\nfunction defaultReadableOnFinish(readable, callback) {\n    // It's possible that `close` is emitted *before* `end`, so we simply\n    // cannot handle that case. See\n    // https://github.com/caolan/highland/issues/490 for details.\n\n    // pipe already pushes on end, so no need to bind to `end`.\n\n    // write any errors into the stream\n    readable.once('error', callback);\n\n    return function () {\n        readable.removeListener('error', callback);\n    };\n}\n\nfunction pipeReadable(xs, onFinish, stream) {\n    var response = onFinish(xs, streamEndCb);\n    var unbound = false;\n\n    var cleanup = null;\n    var endOnError = true;\n\n    if (_.isFunction(response)) {\n        cleanup = response;\n    }\n    else if (response != null) {\n        cleanup = response.onDestroy;\n        endOnError = !response.continueOnError;\n    }\n\n    xs.pipe(stream);\n\n    // TODO: Replace with onDestroy in v3.\n    stream._destructors.push(unbind);\n\n    function streamEndCb(error) {\n        if (stream._nil_pushed) {\n            return;\n        }\n\n        if (error) {\n            stream.write(new StreamError(error));\n        }\n\n        if (error == null || endOnError) {\n            unbind();\n            stream.end();\n        }\n    }\n\n    function unbind() {\n        if (unbound) {\n            return;\n        }\n\n        unbound = true;\n\n        if (cleanup) {\n            cleanup();\n        }\n\n        if (xs.unpipe) {\n            xs.unpipe(stream);\n        }\n    }\n}\n\nfunction promiseStream(promise) {\n    var nilScheduled = false;\n    return _(function (push) {\n        // We need to push asynchronously so that errors thrown from handling\n        // these values are not caught by the promise. Also, return null so\n        // that bluebird-based promises don't complain about handlers being\n        // created but not returned. See\n        // https://github.com/caolan/highland/issues/588.\n        promise = promise.then(function (value) {\n            nilScheduled = true;\n            _.setImmediate(function () {\n                push(null, value);\n                push(null, nil);\n            });\n            return null;\n        }, function (err) {\n            nilScheduled = true;\n            _.setImmediate(function () {\n                push(err);\n                push(null, nil);\n            });\n            return null;\n        });\n\n        // Using finally also handles bluebird promise cancellation, so we do\n        // it if we can.\n        if (_.isFunction(promise['finally'])) { // eslint-disable-line dot-notation\n            promise['finally'](function () { // eslint-disable-line dot-notation\n                if (!nilScheduled) {\n                    _.setImmediate(function () {\n                        push(null, nil);\n                    });\n                }\n                return null;\n            });\n        }\n    });\n}\n\nfunction iteratorStream(it) {\n    return _(function (push, next) {\n        var iterElem, iterErr;\n        try {\n            iterElem = it.next();\n        }\n        catch (err) {\n            iterErr = err;\n        }\n\n        if (iterErr) {\n            push(iterErr);\n            push(null, _.nil);\n        }\n        else if (iterElem.done) {\n            if (!_.isUndefined(iterElem.value)) {\n                // generators can return a final\n                // value on completion using return\n                // keyword otherwise value will be\n                // undefined\n                push(null, iterElem.value);\n            }\n            push(null, _.nil);\n        }\n        else {\n            push(null, iterElem.value);\n            next();\n        }\n\n    });\n}\n\nfunction hintMapper(mappingHint) {\n    var mappingHintType = (typeof mappingHint);\n    var mapper;\n\n    if (mappingHintType === 'function') {\n        mapper = mappingHint;\n    }\n    else if (mappingHintType === 'number') {\n        mapper = function () {\n            return slice.call(arguments, 0, mappingHint);\n        };\n    }\n    else if (_.isArray(mappingHint)) {\n        mapper = function () {\n            var args = arguments;\n            return mappingHint.reduce(function (ctx, hint, idx) {\n                ctx[hint] = args[idx];\n                return ctx;\n            }, {});\n        };\n    }\n    else {\n        mapper = function (x) { return x; };\n    }\n\n    return mapper;\n}\n\nfunction pipeStream(src, dest, write, end, passAlongErrors) {\n    var resume = null;\n    var s = src.consume(function (err, x, push, next) {\n        var canContinue;\n        if (err) {\n            if (passAlongErrors) {\n                canContinue = write.call(dest, new StreamError(err));\n            }\n            else {\n                src.emit('error', err);\n                canContinue = true;\n            }\n        }\n        else if (x === nil) {\n            end.call(dest);\n            return;\n        }\n        else {\n            canContinue = write.call(dest, x);\n        }\n\n        if (canContinue !== false) {\n            next();\n        }\n        else {\n            resume = next;\n        }\n    });\n\n    dest.on('drain', onConsumerDrain);\n\n    // Since we don't keep a reference to piped-to streams,\n    // save a callback that will unbind the event handler.\n    src._destructors.push(function () {\n        dest.removeListener('drain', onConsumerDrain);\n    });\n\n    dest.emit('pipe', src);\n\n    s.resume();\n    return dest;\n\n    function onConsumerDrain() {\n        if (resume) {\n            var oldResume = resume;\n            resume = null;\n            oldResume();\n        }\n    }\n}\n\nfunction generatorPush(stream, write) {\n    if (!write) {\n        write = stream.write;\n    }\n\n    return function (err, x) {\n        // This will set _nil_pushed if necessary.\n        write.call(stream, err ? new StreamError(err) : x);\n    };\n}\n\n\n/**\n * Actual Stream constructor wrapped the the main exported function\n */\n\n/*eslint-disable no-multi-spaces */\nfunction Stream(/*optional*/xs, /*optional*/secondArg, /*optional*/mappingHint) {\n    /*eslint-enable no-multi-spaces */\n    if (xs && _.isStream(xs)) {\n        // already a Stream\n        return xs;\n    }\n\n    EventEmitter.call(this);\n    var self = this;\n\n    // used to detect Highland Streams using isStream(x), this\n    // will work even in cases where npm has installed multiple\n    // versions, unlike an instanceof check\n    self.__HighlandStream__ = true;\n\n    self.id = ('' + Math.random()).substr(2, 6);\n    this.paused = true;\n    this._incoming = [];\n    this._outgoing = [];\n    this._consumers = [];\n    this._observers = [];\n    this._destructors = [];\n    this._send_events = false;\n    this._nil_pushed = false;\n    this._delegate = null;\n    this._is_observer = false;\n    this._in_consume_cb = false;\n    this._repeat_resume = false;\n\n    // Used by consume() to signal that next() hasn't been called, so resume()\n    // shouldn't ask for more data. Backpressure handling is getting fairly\n    // complicated, and this is very much a hack to get consume() backpressure\n    // to work correctly.\n    this._consume_waiting_for_next = false;\n    this.source = null;\n\n    // Old-style node Stream.pipe() checks for this\n    this.writable = true;\n\n    self.on('newListener', function (ev) {\n        if (ev === 'data') {\n            self._send_events = true;\n            _.setImmediate(self.resume.bind(self));\n        }\n        else if (ev === 'end') {\n            // this property avoids us checking the length of the\n            // listners subscribed to each event on each _send() call\n            self._send_events = true;\n        }\n    });\n\n    // TODO: write test to cover this removeListener code\n    self.on('removeListener', function (ev) {\n        if (ev === 'end' || ev === 'data') {\n            var end_listeners = self.listeners('end').length;\n            var data_listeners = self.listeners('data').length;\n            if (end_listeners + data_listeners === 0) {\n                // stop emitting events\n                self._send_events = false;\n            }\n        }\n    });\n\n    if (_.isUndefined(xs)) {\n        // nothing else to do\n        return this;\n    }\n    else if (_.isArray(xs)) {\n        self._incoming = xs.concat([nil]);\n        return this;\n    }\n    else if (_.isFunction(xs)) {\n        this._generator = xs;\n        this._generator_push = generatorPush(this);\n        this._generator_next = function (s) {\n            if (self._nil_pushed) {\n                throw new Error('Cannot call next after nil');\n            }\n\n            if (s) {\n                // we MUST pause to get the redirect object into the _incoming\n                // buffer otherwise it would be passed directly to _send(),\n                // which does not handle StreamRedirect objects!\n                var _paused = self.paused;\n                if (!_paused) {\n                    self.pause();\n                }\n                self.write(new StreamRedirect(s));\n                if (!_paused) {\n                    self._resume(false);\n                }\n            }\n            else {\n                self._generator_running = false;\n            }\n            if (!self.paused) {\n                self._resume(false);\n            }\n        };\n\n        return this;\n    }\n    else if (_.isObject(xs)) {\n        // check to see if we have a readable stream\n        if (_.isFunction(xs.on) && _.isFunction(xs.pipe)) {\n            var onFinish = _.isFunction(secondArg) ? secondArg : defaultReadableOnFinish;\n            pipeReadable(xs, onFinish, self);\n            return this;\n        }\n        else if (_.isFunction(xs.then)) {\n            //probably a promise\n            return promiseStream(xs);\n        }\n        // must check iterators and iterables in this order\n        // because generators are both iterators and iterables:\n        // their Symbol.iterator method returns the `this` object\n        // and an infinite loop would result otherwise\n        else if (_.isFunction(xs.next)) {\n            //probably an iterator\n            return iteratorStream(xs);\n        }\n        else if (!_.isUndefined(_global.Symbol) && xs[_global.Symbol.iterator]) {\n            //probably an iterable\n            return iteratorStream(xs[_global.Symbol.iterator]());\n        }\n        else {\n            throw new Error(\n                'Object was not a stream, promise, iterator or iterable: ' + (typeof xs)\n            );\n        }\n    }\n    else if (_.isString(xs)) {\n        var mapper = hintMapper(mappingHint);\n\n        var callback_func = function () {\n            var ctx = mapper.apply(this, arguments);\n            self.write(ctx);\n        };\n\n        secondArg.on(xs, callback_func);\n        var removeMethod = secondArg.removeListener // EventEmitter\n                           || secondArg.unbind;     // jQuery\n\n        if (removeMethod) {\n            this._destructors.push(function() {\n                removeMethod.call(secondArg, xs, callback_func);\n            });\n        }\n\n        return this;\n    }\n    else {\n        throw new Error(\n            'Unexpected argument type to Stream(): ' + (typeof xs)\n        );\n    }\n}\ninherits(Stream, EventEmitter);\n\n/**\n * Creates a stream that sends a single value then ends.\n *\n * @id of\n * @section Utils\n * @name _.of(x)\n * @param x - the value to send\n * @returns Stream\n * @api public\n *\n * _.of(1).toArray(_.log); // => [1]\n */\n\n_.of = function (x) {\n    return _([x]);\n};\n\n/**\n * Creates a stream that sends a single error then ends.\n *\n * @id fromError\n * @section Utils\n * @name _.fromError(err)\n * @param error - the error to send\n * @returns Stream\n * @api public\n *\n * _.fromError(new Error('Single Error')).toCallback(function (err, result) {\n *     // err contains Error('Single Error') object\n * }\n */\n\n_.fromError = function (error) {\n    return _(function (push) {\n        push(error);\n        push(null, _.nil);\n    });\n};\n\n/**\n * adds a top-level _.foo(mystream) style export for Stream methods\n */\n\nfunction exposeMethod(name) {\n    var f = Stream.prototype[name];\n    var n = f.length;\n    _[name] = _.ncurry(n + 1, function () {\n        var args = slice.call(arguments);\n        var s = _(args.pop());\n        return f.apply(s, args);\n    });\n}\n\n/**\n * Used as an Error marker when writing to a Stream's incoming buffer\n */\n\nfunction StreamError(err) {\n    this.__HighlandStreamError__ = true;\n    this.error = err;\n}\n\n/**\n * Used as a Redirect marker when writing to a Stream's incoming buffer\n */\n\nfunction StreamRedirect(to) {\n    this.__HighlandStreamRedirect__ = true;\n    this.to = to;\n}\n\n/**\n * Returns true if `x` is a Highland Stream.\n *\n * @id isStream\n * @section Utils\n * @name _.isStream(x)\n * @param x - the object to test\n * @returns {Boolean}\n * @api public\n *\n * _.isStream('foo')  // => false\n * _.isStream(_([1,2,3]))  // => true\n */\n\n_.isStream = function (x) {\n    return _.isObject(x) && !!x.__HighlandStream__;\n};\n\n_._isStreamError = function (x) {\n    return _.isObject(x) && !!x.__HighlandStreamError__;\n};\n\n_._isStreamRedirect = function (x) {\n    return _.isObject(x) && !!x.__HighlandStreamRedirect__;\n};\n\n/**\n * Sends errors / data to consumers, observers and event handlers\n */\n\nStream.prototype._send = function (err, x) {\n    //console.log(['_send', this.id, err, x]);\n    var token;\n\n    if (this._consumers.length) {\n        token = err ? new StreamError(err) : x;\n        // this._consumers may be changed from under us,\n        // so we keep a copy.\n        var consumers = this._consumers;\n        for (var i = 0, len = consumers.length; i < len; i++) {\n            consumers[i].write(token);\n        }\n    }\n    if (this._observers.length) {\n        token = err ? new StreamError(err) : x;\n        // this._observers may be changed from under us,\n        // so we keep a copy.\n        var observers = this._observers;\n        for (var j = 0, len2 = observers.length; j < len2; j++) {\n            observers[j].write(token);\n        }\n    }\n    if (this._send_events) {\n        if (err) {\n            this.emit('error', err);\n        }\n        else if (x === nil) {\n            this.emit('end');\n        }\n        else {\n            this.emit('data', x);\n        }\n    }\n\n    if (x === nil) {\n        this._onEnd();\n    }\n};\n\n\nStream.prototype._onEnd = function _onEnd() {\n    if (this.ended) {\n        return;\n    }\n\n    this.pause();\n\n    this.ended = true;\n\n    if (this.source) {\n        var source = this.source;\n        source._removeConsumer(this);\n        source._removeObserver(this);\n    }\n\n    var i, len;\n\n    // _removeConsumer may modify this._consumers.\n    var consumers = this._consumers;\n    for (i = 0, len = consumers.length; i < len; i++) {\n        this._removeConsumer(consumers[i]);\n    }\n\n    // Don't use _removeObserver for efficiency reasons.\n    var observer;\n    for (i = 0, len = this._observers.length; i < len; i++) {\n        observer = this._observers[i];\n        if (observer.source === this) {\n            observer.source = null;\n        }\n    }\n\n    for (i = 0, len = this._destructors.length; i < len; i++) {\n        this._destructors[i].call(this);\n    }\n\n    this.source = null;\n    this._consumers = [];\n    this._incoming = [];\n    this._outgoing = [];\n    this._delegate = null;\n    this._generator = null;\n    this._observers = [];\n    this._destructors = [];\n};\n\n/**\n * Pauses the stream. All Highland Streams start in the paused state.\n *\n * It is unlikely that you will need to manually call this method.\n *\n * @id pause\n * @section Stream Objects\n * @name Stream.pause()\n * @api public\n *\n * var xs = _(generator);\n * xs.pause();\n */\n\nStream.prototype.pause = function () {\n    //console.log(['pause', this.id]);\n    this.paused = true;\n    if (!this._is_observer && this.source) {\n        this.source._checkBackPressure();\n    }\n};\n\n/**\n * When there is a change in downstream consumers, it will often ask\n * the parent Stream to re-check its state and pause/resume accordingly.\n */\n\nStream.prototype._checkBackPressure = function () {\n    if (!this._consumers.length) {\n        this._repeat_resume = false;\n        this.pause();\n        return;\n    }\n    for (var i = 0, len = this._consumers.length; i < len; i++) {\n        if (this._consumers[i].paused) {\n            this._repeat_resume = false;\n            this.pause();\n            return;\n        }\n    }\n\n    this._resume(false);\n};\n\n/**\n * Starts pull values out of the incoming buffer and sending them downstream,\n * this will exit early if this causes a downstream consumer to pause.\n */\n\nStream.prototype._readFromBuffer = function () {\n    //console.log(['_readFromBuffer', this.id, this.paused, this._incoming]);\n    var len = this._incoming.length;\n    var i = 0;\n    while (i < len && !this.paused) {\n        var x = this._incoming[i];\n        if (_._isStreamError(x)) {\n            this._send(x.error);\n        }\n        else if (_._isStreamRedirect(x)) {\n            this._redirect(x.to);\n        }\n        else {\n            this._send(null, x);\n        }\n        i++;\n    }\n    // remove processed data from _incoming buffer\n    this._incoming.splice(0, i);\n};\n\n/**\n * Starts pull values out of the incoming buffer and sending them downstream,\n * this will exit early if this causes a downstream consumer to pause.\n */\n\nStream.prototype._sendOutgoing = function () {\n    //console.log(['_sendOutgoing', this.id, this.paused, this._outgoing]);\n    var len = this._outgoing.length;\n    var i = 0;\n    while (i < len && !this.paused) {\n        var x = this._outgoing[i];\n        if (_._isStreamError(x)) {\n            Stream.prototype._send.call(this, x.error);\n        }\n        else if (_._isStreamRedirect(x)) {\n            this._redirect(x.to);\n        }\n        else {\n            Stream.prototype._send.call(this, null, x);\n        }\n        i++;\n    }\n    // remove processed data from _outgoing buffer\n    this._outgoing.splice(0, i);\n};\n\nStream.prototype._resume = function (forceResumeSource) {\n    //console.log(['resume', this.id]);\n    if (this._resume_running || this._in_consume_cb) {\n        //console.log(['resume already processing _incoming buffer, ignore resume call']);\n        // already processing _incoming buffer, ignore resume call\n        this._repeat_resume = true;\n        return;\n    }\n    this._resume_running = true;\n    do {\n        // use a repeat flag to avoid recursing resume() calls\n        this._repeat_resume = false;\n        this.paused = false;\n\n        // send values from outgoing buffer first\n        this._sendOutgoing();\n\n        // send values from incoming buffer before reading from source\n        this._readFromBuffer();\n\n        // we may have paused while reading from buffer\n        if (!this.paused && !this._is_observer) {\n            // ask parent for more data\n            if (this.source) {\n                if (!this._consume_waiting_for_next || forceResumeSource) {\n                    //console.log(['ask parent for more data']);\n                    this.source._checkBackPressure();\n                }\n            }\n            // run _generator to fill up _incoming buffer\n            else if (this._generator) {\n                //console.log(['run generator to fill up _incoming buffer']);\n                this._runGenerator();\n            }\n            else {\n                // perhaps a node stream is being piped in\n                this.emit('drain');\n            }\n        }\n    } while (this._repeat_resume);\n    this._resume_running = false;\n};\n\n/**\n * Resumes a paused Stream. This will either read from the Stream's incoming\n * buffer or request more data from an upstream source. Never call this method\n * on a stream that has been consumed (via a call to [consume](#consume) or any\n * other transform).\n *\n * @id resume\n * @section Stream Objects\n * @name Stream.resume()\n * @api public\n *\n * var xs = _(generator);\n * xs.resume();\n */\n\nStream.prototype.resume = function () {\n    this._resume(true);\n};\n\n/**\n * Ends a Stream. This is the same as sending a [nil](#nil) value as data.\n * You shouldn't need to call this directly, rather it will be called by\n * any [Node Readable Streams](http://nodejs.org/api/stream.html#stream_class_stream_readable)\n * you pipe in.\n *\n * Only call this function on streams that were constructed with no source\n * (i.e., with `_()`).\n *\n * @id end\n * @section Stream Objects\n * @name Stream.end()\n * @api public\n *\n * mystream.end();\n */\n\nStream.prototype.end = function () {\n    if (this._nil_pushed) {\n        // Allow ending multiple times.\n        return;\n    }\n\n    this.write(nil);\n};\n\n/**\n * Pipes a Highland Stream to a [Node Writable\n * Stream](http://nodejs.org/api/stream.html#stream_class_stream_writable).\n * This will pull all the data from the source Highland Stream and write it to\n * the destination, automatically managing flow so that the destination is not\n * overwhelmed by a fast source.\n *\n * Users may optionally pass an object that may contain any of these fields:\n *\n * - `end` - Ends the destination when this stream ends. Default: `true`. This\n *   option has no effect if the destination is either `process.stdout` or\n *   `process.stderr`. Those two streams are never ended.\n *\n * Like [Readable#pipe](https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options),\n * this function will throw errors if there is no `error` handler installed on\n * the stream.\n *\n * This function returns the destination so you can chain together `pipe` calls.\n *\n * **NOTE**: While Highland streams created via `_()` and [pipeline](#pipeline)\n * support being piped to, it is almost never appropriate to `pipe` from a\n * Highland stream to another Highland stream. Those two cases are meant for\n * use when piping from *Node* streams. You might be tempted to use `pipe` to\n * construct reusable transforms. Do not do it. See [through](#through) for a\n * better way.\n *\n * @id pipe\n * @section Consumption\n * @name Stream.pipe(dest, options)\n * @param {Writable Stream} dest - the destination to write all data to\n * @param {Object} options - (optional) pipe options.\n * @api public\n *\n * var source = _(generator);\n * var dest = fs.createWriteStream('myfile.txt')\n * source.pipe(dest);\n *\n * // chained call\n * source.pipe(through).pipe(dest);\n *\n * // DO NOT do this! It will not work. The stream returned by oddDoubler does\n * // not support being piped to.\n * function oddDoubler() {\n *     return _()\n *         return x % 2; // odd numbers only\n *     })\n *     .map(function (x) {\n *         return x * 2;\n *     });\n * }\n *\n * _([1, 2, 3, 4]).pipe(oddDoubler()) // => Garbage\n */\n\nStream.prototype.pipe = function (dest, options) {\n    options = options || {};\n\n    // stdout and stderr are special case writables that cannot be closed\n    var canClose = dest !== process.stdout && dest !== process.stderr && options.end !== false;\n\n    var end;\n    if (canClose) {\n        end = dest.end;\n    }\n    else {\n        end = nop;\n    }\n\n    return pipeStream(this, dest, dest.write, end, false);\n};\n\n/**\n * Destroys a stream by unlinking it from any consumers and sources. This will\n * stop all consumers from receiving events from this stream and removes this\n * stream as a consumer of any source stream.\n *\n * This function calls end() on the stream and unlinks it from any piped-to streams.\n *\n * @id destroy\n * @section Stream Objects\n * @name Stream.destroy()\n * @api public\n */\n\nStream.prototype.destroy = function () {\n    if (this.ended) {\n        return;\n    }\n\n    if (!this._nil_pushed) {\n        this.end();\n    }\n\n    this._onEnd();\n};\n\n/**\n * Runs the generator function for this Stream. If the generator is already\n * running (it has been called and not called next() yet) then this function\n * will do nothing.\n */\n\nStream.prototype._runGenerator = function () {\n    //console.log(['_runGenerator', this.id]);\n    // if _generator already running, exit\n    if (this._generator_running) {\n        return;\n    }\n    this._generator_running = true;\n    this._generator(this._generator_push, this._generator_next);\n};\n\n/**\n * Performs the redirect from one Stream to another. In order for the\n * redirect to happen at the appropriate time, it is put on the incoming\n * buffer as a StreamRedirect object, and this function is called\n * once it is read from the buffer.\n */\n\nStream.prototype._redirect = function (to) {\n    //console.log(['_redirect', this.id, '=>', to.id]);\n    // coerce to Stream\n    to = _(to);\n\n    while (to._delegate) {\n        to = to._delegate;\n    }\n\n    to._consumers = this._consumers.map(function (c) {\n        c.source = to;\n        return c;\n    });\n\n    // TODO: copy _observers\n    this._consumers = [];\n    //[this.consume = function () {\n    //    return to.consume.apply(to, arguments);\n    //};\n    //this._removeConsumer = function () {\n    //    return to._removeConsumer.apply(to, arguments);\n    //};\n\n    // this will cause a memory leak as long as the root object is around\n    to._delegate_source = this._delegate_source || this;\n    to._delegate_source._delegate = to;\n\n    if (this.paused) {\n        to.pause();\n    }\n    else {\n        this.pause();\n        to._checkBackPressure();\n    }\n};\n\n/**\n * Adds a new consumer Stream, which will accept data and provide backpressure\n * to this Stream. Adding more than one consumer will cause an exception to be\n * thrown as the backpressure strategy must be explicitly chosen by the\n * developer (through calling fork or observe).\n */\n\nStream.prototype._addConsumer = function (s) {\n    if (this._consumers.length) {\n        throw new Error(\n            'Stream already being consumed, you must either fork() or observe()'\n        );\n    }\n    s.source = this;\n    this._consumers.push(s);\n    this._checkBackPressure();\n};\n\n/**\n * Removes a consumer from this Stream.\n */\n\nStream.prototype._removeConsumer = function (s) {\n    var src = this;\n    while (src._delegate) {\n        src = src._delegate;\n    }\n    src._consumers = src._consumers.filter(function (c) {\n        return c !== s;\n    });\n    if (s.source === src) {\n        s.source = null;\n    }\n    src._checkBackPressure();\n};\n\n/**\n * Removes an observer from this Stream.\n */\n\nStream.prototype._removeObserver = function (s) {\n    this._observers = this._observers.filter(function (o) {\n        return o !== s;\n    });\n    if (s.source === this) {\n        s.source = null;\n    }\n};\n\n/**\n * Consumes values from a Stream (once resumed) and returns a new Stream for\n * you to optionally push values onto using the provided push / next functions.\n *\n * This function forms the basis of many higher-level Stream operations.\n * It will not cause a paused stream to immediately resume, but behaves more\n * like a 'through' stream, handling values as they are read.\n *\n * @id consume\n * @section Transforms\n * @name Stream.consume(f)\n * @param {Function} f - the function to handle errors and values\n * @api public\n *\n * var filter = function (f, source) {\n *     return source.consume(function (err, x, push, next) {\n *         if (err) {\n *             // pass errors along the stream and consume next value\n *             push(err);\n *             next();\n *         }\n *         else if (x === _.nil) {\n *             // pass nil (end event) along the stream\n *             push(null, x);\n *         }\n *         else {\n *             // pass on the value only if the value passes the predicate\n *             if (f(x)) {\n *                 push(null, x);\n *             }\n *             next();\n *         }\n *     });\n * };\n */\n\nStream.prototype.consume = function (f) {\n    var self = this;\n    while (self._delegate) {\n        self = self._delegate;\n    }\n    var s = new Stream();\n\n    // Hack. Not needed in v3.0.\n    s._is_consumer = true;\n\n    var async;\n    var next_called;\n    var _send = s._send;\n    var push = function (err, x) {\n        //console.log(['push', err, x, s.paused]);\n        if (s._nil_pushed) {\n            throw new Error('Cannot write to stream after nil');\n        }\n        if (x === nil) {\n            // ended, remove consumer from source\n            s._nil_pushed = true;\n            s._consume_waiting_for_next = false;\n            self._removeConsumer(s);\n\n            // We previously paused the stream, but since a nil was pushed,\n            // next won't be called and we must manually resume.\n            if (async) {\n                s._resume(false);\n            }\n        }\n        if (s.paused) {\n            if (err) {\n                s._outgoing.push(new StreamError(err));\n            }\n            else {\n                s._outgoing.push(x);\n            }\n        }\n        else {\n            _send.call(s, err, x);\n        }\n    };\n    var next = function (s2) {\n        //console.log(['next', async]);\n        s._consume_waiting_for_next = false;\n        if (s._nil_pushed) {\n            throw new Error('Cannot call next after nil');\n        }\n        if (s2) {\n            // we MUST pause to get the redirect object into the _incoming\n            // buffer otherwise it would be passed directly to _send(),\n            // which does not handle StreamRedirect objects!\n            var _paused = s.paused;\n            if (!_paused) {\n                s.pause();\n            }\n            s.write(new StreamRedirect(s2));\n            if (!_paused) {\n                s._resume(false);\n            }\n        }\n        else if (async) {\n            s._resume(false);\n        }\n        else {\n            next_called = true;\n        }\n    };\n    s._send = function (err, x) {\n        async = false;\n        next_called = false;\n        s._in_consume_cb = true;\n\n        f(err, x, push, next);\n\n        s._in_consume_cb = false;\n        async = true;\n\n        // Don't pause if x is nil -- as next will never be called after\n        if (!next_called && x !== nil) {\n            s._consume_waiting_for_next = true;\n            s.pause();\n        }\n\n        if (s._repeat_resume) {\n            s._repeat_resume = false;\n            s._resume(false);\n        }\n    };\n    self._addConsumer(s);\n    self._already_consumed = true;\n    return s;\n};\nexposeMethod('consume');\n\n/**\n * Consumes a single item from the Stream. Unlike consume, this function will\n * not provide a new stream for you to push values onto, and it will unsubscribe\n * as soon as it has a single error, value or nil from the source.\n *\n * You probably won't need to use this directly, but it is used internally by\n * some functions in the Highland library.\n *\n * @id pull\n * @section Consumption\n * @name Stream.pull(f)\n * @param {Function} f - the function to handle data\n * @api public\n *\n * xs.pull(function (err, x) {\n *     // do something\n * });\n */\n\nStream.prototype.pull = function (f) {\n    var s = this.consume(function (err, x) {\n        s.source._removeConsumer(s);\n        f(err, x);\n    });\n    s.id = 'pull:' + s.id;\n    s.resume();\n};\n\n/**\n * Writes a value to the Stream. If the Stream is paused it will go into the\n * Stream's incoming buffer, otherwise it will be immediately processed and\n * sent to the Stream's consumers (if any). Returns false if the Stream is\n * paused, true otherwise. This lets Node's pipe method handle back-pressure.\n *\n * You shouldn't need to call this yourself, but it may be called by Node\n * functions which treat Highland Streams as a [Node Writable Stream](http://nodejs.org/api/stream.html#stream_class_stream_writable).\n *\n * Only call this function on streams that were constructed with no source\n * (i.e., with `_()`).\n\n * @id write\n * @section Stream Objects\n * @name Stream.write(x)\n * @param x - the value to write to the Stream\n * @api public\n *\n * var xs = _();\n * xs.write(1);\n * xs.write(2);\n * xs.end();\n *\n * xs.toArray(function (ys) {\n *     // ys will be [1, 2]\n * });\n *\n * // Do *not* do this.\n * var xs2 = _().toArray(_.log);\n * xs2.write(1); // This call is illegal.\n */\n\nStream.prototype.write = function (x) {\n    if (this._nil_pushed) {\n        throw new Error('Cannot write to stream after nil');\n    }\n\n    // The check for _is_consumer is kind of a hack. Not\n    // needed in v3.0.\n    if (x === _.nil && !this._is_consumer) {\n        this._nil_pushed = true;\n    }\n\n    if (this.paused) {\n        this._incoming.push(x);\n    }\n    else {\n        if (_._isStreamError(x)) {\n            this._send(x.error);\n        }\n        else {\n            this._send(null, x);\n        }\n    }\n    return !this.paused;\n};\n\n/**\n * Forks a stream, allowing you to add additional consumers with shared\n * back-pressure. A stream forked to multiple consumers will only pull values\n * from its source as fast as the slowest consumer can handle them.\n *\n * **NOTE**: Do not depend on a consistent execution order between the forks.\n * This transform only guarantees that all forks will process a value `foo`\n * before any will process a second value `bar`. It does *not* guarantee the\n * order in which the forks process `foo`.\n *\n * **TIP**: Be careful about modifying stream values within the forks (or using\n * a library that does so). Since the same value will be passed to every fork,\n * changes made in one fork will be visible in any fork that executes after it.\n * Add to that the inconsistent execution order, and you can end up with subtle\n * data corruption bugs. If you need to modify any values, you should make a\n * copy and modify the copy instead.\n *\n * *Deprecation warning:* It is currently possible to `fork` a stream after\n * [consuming](#consume) it (e.g., via a [transform](#Transforms)). This will\n * no longer be possible in the next major release. If you are going to `fork`\n * a stream, always call `fork` on it.\n *\n * @id fork\n * @section Higher-order Streams\n * @name Stream.fork()\n * @api public\n *\n * var xs = _([1, 2, 3, 4]);\n * var ys = xs.fork();\n * var zs = xs.fork();\n *\n * // no values will be pulled from xs until zs also resume\n * ys.resume();\n *\n * // now both ys and zs will get values from xs\n * zs.resume();\n */\n\n// Hack our way around the fact that util.deprecate is all-or-nothing for a\n// function.\nvar warnForkAfterConsume = deprecate(function () {\n}, 'Highland: Calling Stream.fork() on a stream that has already been consumed is deprecated. Always call fork() on a stream that is meant to be forked.');\n\nStream.prototype.fork = function () {\n    if (this._already_consumed) {\n        // Trigger deprecation warning.\n        warnForkAfterConsume();\n    }\n\n    var s = new Stream();\n    s.id = 'fork:' + s.id;\n    s.source = this;\n    this._consumers.push(s);\n    this._checkBackPressure();\n    return s;\n};\n\n/**\n * Observes a stream, allowing you to handle values as they are emitted, without\n * adding back-pressure or causing data to be pulled from the source. This can\n * be useful when you are performing two related queries on a stream where one\n * would block the other. Just be aware that a slow observer could fill up its\n * buffer and cause memory issues. Where possible, you should use [fork](#fork).\n *\n * @id observe\n * @section Higher-order Streams\n * @name Stream.observe()\n * @api public\n *\n * var xs = _([1, 2, 3, 4]);\n * var ys = xs.fork();\n * var zs = xs.observe();\n *\n * // now both zs and ys will receive data as fast as ys can handle it\n * ys.resume();\n */\n\nStream.prototype.observe = function () {\n    var s = new Stream();\n    s.id = 'observe:' + s.id;\n    s.source = this;\n    s._is_observer = true;\n    this._observers.push(s);\n    return s;\n};\n\n/**\n * Extracts errors from a Stream and applies them to an error handler\n * function. Returns a new Stream with the errors removed (unless the error\n * handler chooses to rethrow them using `push`). Errors can also be\n * transformed and put back onto the Stream as values.\n *\n * @id errors\n * @section Transforms\n * @name Stream.errors(f)\n * @param {Function} f - the function to pass all errors to\n * @api public\n *\n * getDocument.errors(function (err, push) {\n *     if (err.statusCode === 404) {\n *         // not found, return empty doc\n *         push(null, {});\n *     }\n *     else {\n *         // otherwise, re-throw the error\n *         push(err);\n *     }\n * });\n */\n\nStream.prototype.errors = function (f) {\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            f(err, push);\n            next();\n        }\n        else if (x === nil) {\n            push(null, nil);\n        }\n        else {\n            push(null, x);\n            next();\n        }\n    });\n};\nexposeMethod('errors');\n\n/**\n * Like the [errors](#errors) method, but emits a Stream end marker after\n * an Error is encountered.\n *\n * @id stopOnError\n * @section Transforms\n * @name Stream.stopOnError(f)\n * @param {Function} f - the function to handle an error\n * @api public\n *\n * brokenStream.stopOnError(function (err) {\n *     //console.error('Something broke: ' + err);\n * });\n */\n\nStream.prototype.stopOnError = function (f) {\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            f(err, push);\n            push(null, nil);\n        }\n        else if (x === nil) {\n            push(null, nil);\n        }\n        else {\n            push(null, x);\n            next();\n        }\n    });\n};\nexposeMethod('stopOnError');\n\n/**\n * Iterates over every value from the Stream, calling the iterator function\n * on each of them. This method consumes the Stream.\n *\n * If an error from the Stream reaches this call, it will emit an `error` event\n * (i.e., it will call `emit('error')` on the stream being consumed).  This\n * event will cause an error to be thrown if unhandled.\n *\n * While `each` consumes the stream, it is possible to chain [done](#done) (and\n * *only* `done`) after it.\n *\n * @id each\n * @section Consumption\n * @name Stream.each(f)\n * @param {Function} f - the iterator function\n * @api public\n *\n * _([1, 2, 3, 4]).each(function (x) {\n *     // will be called 4 times with x being 1, 2, 3 and 4\n * });\n */\n\nStream.prototype.each = function (f) {\n    var self = this;\n    var s = this.consume(function (err, x, push, next) {\n        if (err) {\n            self.emit('error', err);\n        }\n        else if (x === nil) {\n            push(null, nil);\n        }\n        else {\n            f(x);\n            next();\n        }\n    });\n    s.resume();\n    return s;\n};\nexposeMethod('each');\n\n/**\n * Applies all values from a Stream as arguments to a function. This method consumes the stream.\n * `f` will always be called when the `nil` token is encountered, even when the stream is empty.\n *\n * @id apply\n * @section Consumption\n * @name Stream.apply(f)\n * @param {Function} f - the function to apply arguments to\n * @api public\n *\n * _([1, 2, 3]).apply(function (a, b, c) {\n *     // a === 1\n *     // b === 2\n *     // c === 3\n * });\n *\n * _([1, 2, 3]).apply(function (a) {\n *     // arguments.length === 3\n *     // a === 1\n * });\n */\n\nStream.prototype.apply = function (f) {\n    return this.toArray(function (args) {\n        f.apply(null, args);\n    });\n};\nexposeMethod('apply');\n\n/**\n * Collects all values from a Stream into an Array and calls a function with\n * the result. This method consumes the stream.\n *\n * If an error from the Stream reaches this call, it will emit an `error` event\n * (i.e., it will call `emit('error')` on the stream being consumed).  This\n * event will cause an error to be thrown if unhandled.\n *\n * @id toArray\n * @section Consumption\n * @name Stream.toArray(f)\n * @param {Function} f - the callback to provide the completed Array to\n * @api public\n *\n * _([1, 2, 3, 4]).toArray(function (x) {\n *     // parameter x will be [1,2,3,4]\n * });\n */\n\nStream.prototype.toArray = function (f) {\n    var self = this;\n    return this.collect().pull(function (err, x) {\n        if (err) {\n            self.emit('error', err);\n        }\n        else {\n            f(x);\n        }\n    });\n};\n\n/**\n * Calls a function once the Stream has ended. This method consumes the stream.\n * If the Stream has already ended, the function is called immediately.\n *\n * If an error from the Stream reaches this call, it will emit an `error` event\n * (i.e., it will call `emit('error')` on the stream being consumed).  This\n * event will cause an error to be thrown if unhandled.\n *\n * As a special case, it is possible to chain `done` after a call to\n * [each](#each) even though both methods consume the stream.\n *\n * @id done\n * @section Consumption\n * @name Stream.done(f)\n * @param {Function} f - the callback\n * @api public\n *\n * var total = 0;\n * _([1, 2, 3, 4]).each(function (x) {\n *     total += x;\n * }).done(function () {\n *     // total will be 10\n * });\n */\n\nStream.prototype.done = function (f) {\n    if (this.ended) {\n        f();\n        return null;\n    }\n    var self = this;\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            self.emit('error', err);\n        }\n        else if (x === nil) {\n            f();\n        }\n        else {\n            next();\n        }\n    }).resume();\n};\n\n/**\n * Returns the result of a stream to a nodejs-style callback function.\n *\n * If the stream contains a single value, it will call `cb`\n * with the single item emitted by the stream (if present).\n * If the stream is empty, `cb` will be called without any arguments.\n * If an error is encountered in the stream, this function will stop\n * consumption and call `cb` with the error.\n * If the stream contains more than one item, it will stop consumption\n * and call `cb` with an error.\n *\n * @id toCallback\n * @section Consumption\n * @name Stream.toCallback(cb)\n * @param {Function} cb - the callback to provide the error/result to\n * @api public\n *\n * _([1, 2, 3, 4]).collect().toCallback(function (err, result) {\n *     // parameter result will be [1,2,3,4]\n *     // parameter err will be null\n * });\n */\n\nStream.prototype.toCallback = function (cb) {\n    var value;\n    var hasValue = false; // In case an emitted value === null or === undefined.\n\n    this.consume(function (err, x, push, next) {\n        if (err) {\n            push(null, nil);\n            if (hasValue) {\n                cb(new Error('toCallback called on stream emitting multiple values'));\n            }\n            else {\n                cb(err);\n            }\n        }\n        else if (x === nil) {\n            if (hasValue) {\n                cb(null, value);\n            }\n            else {\n                cb();\n            }\n        }\n        else {\n            if (hasValue) {\n                push(null, nil);\n                cb(new Error('toCallback called on stream emitting multiple values'));\n            }\n            else {\n                value = x;\n                hasValue = true;\n                next();\n            }\n        }\n    }).resume();\n};\n\n/**\n * Creates a new Stream of transformed values by applying a function to each\n * value from the source. The transformation function can be replaced with\n * a non-function value for convenience, and it will emit that value\n * for every data event on the source Stream.\n *\n * *Deprecation warning:* The use of the convenience non-function argument for\n * `map` is deprecated and will be removed in the next major version.\n *\n * @id map\n * @section Transforms\n * @name Stream.map(f)\n * @param {Function} f - the transformation function or value to map to\n * @api public\n *\n * var doubled = _([1, 2, 3, 4]).map(function (x) {\n *     return x * 2;\n * });\n */\n\n// Hack our way around the fact that util.deprecate is all-or-nothing for a\n// function.\nvar warnMapWithValue = deprecate(function() {\n}, 'Highland: Calling Stream.map() with a non-function argument is deprecated.');\n\nStream.prototype.map = function (f) {\n    if (!_.isFunction(f)) {\n        warnMapWithValue();\n        var val = f;\n        f = function () {\n            return val;\n        };\n    }\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(err, x);\n        }\n        else {\n            var fnVal, fnErr;\n            try {\n                fnVal = f(x);\n            }\n            catch (e) {\n                fnErr = e;\n            }\n            push(fnErr, fnVal);\n            next();\n        }\n    });\n};\nexposeMethod('map');\n\n/**\n * Creates a new Stream which applies a function to each value from the source\n * and re-emits the source value. Useful when you want to mutate the value or\n * perform side effects\n *\n * @id doto\n * @section Transforms\n * @name Stream.doto(f)\n * @param {Function} f - the function to apply\n * @api public\n *\n * var appended = _([[1], [2], [3], [4]]).doto(function (x) {\n *     x.push(1);\n * });\n *\n * _([1, 2, 3]).doto(console.log)\n * // 1\n * // 2\n * // 3\n * // => 1, 2, 3\n */\n\nStream.prototype.doto = function (f) {\n    return this.map(function (x) {\n        f(x);\n        return x;\n    });\n};\nexposeMethod('doto');\n\n/**\n * An alias for the [doto](#doto) method.\n *\n * @id tap\n * @section Transforms\n * @name Stream.tap(f)\n * @param {Function} f - the function to apply\n * @api public\n *\n * _([1, 2, 3]).tap(console.log)\n */\n\nStream.prototype.tap = Stream.prototype.doto;\n_.tap = _.doto;\n\n/**\n * Limits number of values through the stream to a maximum of number of values\n * per window. Errors are not limited but allowed to pass through as soon as\n * they are read from the source.\n *\n * @id ratelimit\n * @section Transforms\n * @name Stream.ratelimit(num, ms)\n * @param {Number} num - the number of operations to perform per window\n * @param {Number} ms - the window of time to limit the operations in (in ms)\n * @api public\n *\n * _([1, 2, 3, 4, 5]).ratelimit(2, 100);\n *\n * // after 0ms => 1, 2\n * // after 100ms => 1, 2, 3, 4\n * // after 200ms => 1, 2, 3, 4, 5\n */\n\nStream.prototype.ratelimit = function (num, ms) {\n    if (num < 1) {\n        throw new Error('Invalid number of operations per ms: ' + num);\n    }\n    var sent = 0;\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(null, nil);\n        }\n        else {\n            if (sent < num) {\n                sent++;\n                push(null, x);\n                next();\n            }\n            else {\n                setTimeout(function () {\n                    sent = 1;\n                    push(null, x);\n                    next();\n                }, ms);\n            }\n        }\n    });\n};\nexposeMethod('ratelimit');\n\n/**\n * Creates a new Stream of values by applying each item in a Stream to an\n * iterator function which must return a (possibly empty) Stream. Each item on\n * these result Streams are then emitted on a single output Stream.\n *\n * This transform is functionally equivalent to `.map(f).sequence()`.\n *\n * @id flatMap\n * @section Higher-order Streams\n * @name Stream.flatMap(f)\n * @param {Function} f - the iterator function\n * @api public\n *\n * var readFile = _.wrapCallback(fs.readFile);\n * filenames.flatMap(readFile)\n */\n\nStream.prototype.flatMap = function (f) {\n    return this.map(f).sequence();\n};\nexposeMethod('flatMap');\n\n/**\n * Retrieves values associated with a given property from all elements in\n * the collection.\n *\n * @id pluck\n * @section Transforms\n * @name Stream.pluck(property)\n * @param {String} prop - the property to which values should be associated\n * @api public\n *\n * var docs = [\n *     {type: 'blogpost', title: 'foo'},\n *     {type: 'blogpost', title: 'bar'},\n *     {type: 'comment', title: 'baz'}\n * ];\n *\n * _(docs).pluck('title').toArray(function (xs) {\n *    // xs is now ['foo', 'bar', 'baz']\n * });\n */\n\nStream.prototype.pluck = function (prop) {\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(err, x);\n        }\n        else if (_.isObject(x)) {\n            push(null, x[prop]);\n            next();\n        }\n        else {\n            push(new Error(\n                'Expected Object, got ' + (typeof x)\n            ));\n            next();\n        }\n    });\n};\nexposeMethod('pluck');\n\n/**\n * Only applies the transformation strategy on Objects.\n * This helper is used in `pick` and `pickBy`\n **/\n\nvar objectOnly = _.curry(function(strategy, x) {\n    if (_.isObject(x)) {\n        return strategy(x);\n    }\n    else {\n        throw new Error(\n            'Expected Object, got ' + (typeof x)\n        );\n    }\n});\n\n\n/**\n *\n * Retrieves copies of all the elements in the collection\n * that satisfy a given predicate. Note: When using ES3,\n * only enumerable elements are selected. Both enumerable\n * and non-enumerable elements are selected when using ES5.\n *\n * @id pickBy\n * @section Transforms\n * @name Stream.pickBy(f)\n * @param {Function} f - the predicate function\n * @api public\n *\n *  var dogs = [\n *      {breed: 'chihuahua', name: 'Princess', age: 5},\n *      {breed: 'labrador', name: 'Rocky', age: 3},\n *      {breed: 'german-shepherd', name: 'Waffles', age: 9}\n *  ];\n\n *  _(dogs).pickBy(function (key, value) {\n *      return value > 4;\n *  }).toArray(function (xs) {\n *    // xs is now:\n *    [\n *      { age: 5 },\n *      {},\n *      { age: 9 }\n *    ]\n *  });\n */\n\nStream.prototype.pickBy = function (f) {\n    return this.map(objectOnly(function (x) {\n        var out = {};\n\n        // prevents testing overridden properties multiple times.\n        var seen = isES5 ? Object.create(null) : {};\n        var obj = x;  // variable used to traverse prototype chain\n        function testAndAdd (prop) {\n            if (seen[prop] !== true && f(prop, x[prop])) {\n                out[prop] = x[prop];\n                seen[prop] = true;\n            }\n        }\n        if (isES5) {\n            do {\n                Object.getOwnPropertyNames(obj).forEach(testAndAdd);\n                obj = Object.getPrototypeOf(obj);\n            } while (obj);\n        }\n        else {\n            for (var k in x) {\n                testAndAdd(k);\n            }\n        }\n        return out;\n    }));\n};\nexposeMethod('pickBy');\n\n/**\n *\n * Retrieves copies of all elements in the collection,\n * with only the whitelisted keys. If one of the whitelisted\n * keys does not exist, it will be ignored.\n *\n * @id pick\n * @section Transforms\n * @name Stream.pick(properties)\n * @param {Array} properties - property names to white filter\n * @api public\n *\n * var dogs = [\n *      {breed: 'chihuahua', name: 'Princess', age: 5},\n *      {breed: 'labrador', name: 'Rocky', age: 3},\n *      {breed: 'german-shepherd', name: 'Waffles', age: 9}\n * ];\n *\n * _(dogs).pick(['breed', 'age']).toArray(function (xs) {\n *       // xs is now:\n *       [\n *           {breed: 'chihuahua', age: 5},\n *           {breed: 'labrador', age: 3},\n *           {breed: 'german-shepherd', age: 9}\n *       ]\n * });\n *\n * _(dogs).pick(['owner']).toArray(function (xs) {\n *      // xs is now:\n *      [\n *          {},\n *          {},\n *          {}\n *      ]\n * });*/\n\nStream.prototype.pick = function (properties) {\n    return this.map(objectOnly(function(x) {\n        var out = {};\n        for (var i = 0, length = properties.length; i < length; i++) {\n            var p = properties[i];\n            if (p in x) {\n                out[p] = x[p];\n            }\n        }\n        return out;\n    }));\n};\nexposeMethod('pick');\n\n/**\n * Creates a new Stream that includes only the values that pass a truth test.\n *\n * @id filter\n * @section Transforms\n * @name Stream.filter(f)\n * @param {Function} f - the truth test function\n * @api public\n *\n * var evens = _([1, 2, 3, 4]).filter(function (x) {\n *     return x % 2 === 0;\n * });\n */\n\nStream.prototype.filter = function (f) {\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(err, x);\n        }\n        else {\n            var fnVal, fnErr;\n            try {\n                fnVal = f(x);\n            }\n            catch (e) {\n                fnErr = e;\n            }\n\n            if (fnErr) {\n                push(fnErr);\n            }\n            else if (fnVal) {\n                push(null, x);\n            }\n            next();\n        }\n    });\n};\nexposeMethod('filter');\n\n/**\n * Filters using a predicate which returns a Stream. If you need to check\n * against an asynchronous data source when filtering a Stream, this can\n * be convenient. The Stream returned from the filter function should have\n * a Boolean as its first value (all other values on the Stream will be\n * disregarded).\n *\n * @id flatFilter\n * @section Higher-order Streams\n * @name Stream.flatFilter(f)\n * @param {Function} f - the truth test function which returns a Stream\n * @api public\n *\n * var checkExists = _.wrapCallback(fs.access);\n *\n * filenames.flatFilter(checkExists)\n */\n\nStream.prototype.flatFilter = function (f) {\n    return this.flatMap(function (x) {\n        return f(x).take(1).otherwise(errorStream())\n        .flatMap(function (bool) {\n            return _(bool ? [x] : []);\n        });\n    });\n\n    function errorStream() {\n        return _(function (push) {\n            push(new Error('Stream returned by function was empty.'));\n            push(null, _.nil);\n        });\n    }\n};\nexposeMethod('flatFilter');\n\n/**\n * The inverse of [filter](#filter).\n *\n * @id reject\n * @section Transforms\n * @name Stream.reject(f)\n * @param {Function} f - the truth test function\n * @api public\n *\n * var odds = _([1, 2, 3, 4]).reject(function (x) {\n *     return x % 2 === 0;\n * });\n */\n\nStream.prototype.reject = function (f) {\n    return this.filter(_.compose(_.not, f));\n};\nexposeMethod('reject');\n\n/**\n * A convenient form of [filter](#filter), which returns the first object from a\n * Stream that passes the provided truth test.\n *\n * @id find\n * @section Transforms\n * @name Stream.find(f)\n * @param {Function} f - the truth test function which returns a Stream\n * @api public\n *\n * var docs = [\n *     {type: 'blogpost', title: 'foo'},\n *     {type: 'blogpost', title: 'bar'},\n *     {type: 'comment', title: 'foo'}\n * ];\n *\n * var f = function (x) {\n *     return x.type == 'blogpost';\n * };\n *\n * _(docs).find(f);\n * // => {type: 'blogpost', title: 'foo'}\n *\n * // example with partial application\n * var firstBlogpost = _.find(f);\n *\n * firstBlogpost(docs)\n * // => {type: 'blogpost', title: 'foo'}\n */\n\nStream.prototype.find = function (f) {\n    return this.filter(f).take(1);\n};\nexposeMethod('find');\n\n/**\n * A convenient form of [where](#where), which returns the first object from a\n * Stream that matches a set of property values. findWhere is to [where](#where) as [find](#find) is to [filter](#filter).\n *\n * @id findWhere\n * @section Transforms\n * @name Stream.findWhere(props)\n * @param {Object} props - the properties to match against\n * @api public\n *\n * var docs = [\n *     {type: 'blogpost', title: 'foo'},\n *     {type: 'blogpost', title: 'bar'},\n *     {type: 'comment', title: 'foo'}\n * ];\n *\n * _(docs).findWhere({type: 'blogpost'})\n * // => {type: 'blogpost', title: 'foo'}\n *\n * // example with partial application\n * var firstBlogpost = _.findWhere({type: 'blogpost'});\n *\n * firstBlogpost(docs)\n * // => {type: 'blogpost', title: 'foo'}\n */\n\nStream.prototype.findWhere = function (props) {\n    return this.where(props).take(1);\n};\nexposeMethod('findWhere');\n\n\n/**\n * A convenient form of [reduce](#reduce), which groups items based on a function or property name\n *\n * @id group\n * @section Transforms\n * @name Stream.group(f)\n * @param {Function | String} f - the function or property name on which to group,\n *                              toString() is called on the result of a function.\n * @api public\n *\n * var docs = [\n *     {type: 'blogpost', title: 'foo'},\n *     {type: 'blogpost', title: 'bar'},\n *     {type: 'comment', title: 'foo'}\n * ];\n *\n * var f = function (x) {\n *     return x.type;\n * };\n *\n * _(docs).group(f); OR _(docs).group('type');\n * // => {\n * // =>    'blogpost': [{type: 'blogpost', title: 'foo'}, {type: 'blogpost', title: 'bar'}]\n * // =>    'comment': [{type: 'comment', title: 'foo'}]\n * // =>  }\n *\n */\n\nStream.prototype.group = function (f) {\n    var lambda = _.isString(f) ? _.get(f) : f;\n    return this.reduce({}, function (m, o) {\n        var key = lambda(o);\n        if (!hasOwn.call(m, key)) { m[key] = []; }\n        m[key].push(o);\n        return m;\n    });\n};\nexposeMethod('group');\n\n/**\n * Filters a Stream to drop all non-truthy values.\n *\n * @id compact\n * @section Transforms\n * @name Stream.compact()\n * @api public\n *\n * var compacted = _([0, 1, false, 3, null, undefined, 6]).compact();\n * // => 1, 3, 6\n */\n\nStream.prototype.compact = function () {\n    return this.filter(function (x) {\n        return x;\n    });\n};\nexposeMethod('compact');\n\n/**\n * A convenient form of [filter](#filter), which returns all objects from a Stream\n * which match a set of property values.\n *\n * @id where\n * @section Transforms\n * @name Stream.where(props)\n * @param {Object} props - the properties to match against\n * @api public\n *\n * var docs = [\n *     {type: 'blogpost', title: 'foo'},\n *     {type: 'blogpost', title: 'bar'},\n *     {type: 'comment', title: 'foo'}\n * ];\n *\n * _(docs).where({title: 'foo'})\n * // => {type: 'blogpost', title: 'foo'}\n * // => {type: 'comment', title: 'foo'}\n *\n * // example with partial application\n * var getBlogposts = _.where({type: 'blogpost'});\n *\n * getBlogposts(docs)\n * // => {type: 'blogpost', title: 'foo'}\n * // => {type: 'blogpost', title: 'bar'}\n */\n\nStream.prototype.where = function (props) {\n    return this.filter(function (x) {\n        for (var k in props) {\n            if (x[k] !== props[k]) {\n                return false;\n            }\n        }\n        return true;\n    });\n};\nexposeMethod('where');\n\n/**\n * Filters out all duplicate values from the stream and keeps only the first\n * occurence of each value, using the provided function to define equality.\n *\n * Note:\n *\n * - Memory: In order to guarantee that each unique item is chosen only once,\n *   we need to keep an internal buffer of all unique values. This may outgrow\n *   the available memory if you are not cautious about the size of your stream\n *   and the number of unique objects you may receive on it.\n * - Errors: The comparison function should never throw an error. However, if\n *   it does, this transform will emit an error for each all that throws. This\n *   means that one value may turn into multiple errors.\n *\n * @id uniqBy\n * @section Transforms\n * @name Stream.uniqBy(compare)\n * @param {Function} compare - custom equality predicate\n * @api public\n *\n * var colors = [ 'blue', 'red', 'red', 'yellow', 'blue', 'red' ]\n *\n * _(colors).uniqBy(function(a, b) { return a[1] === b[1]; })\n * // => 'blue'\n * // => 'red'\n *\n */\n\nStream.prototype.uniqBy = function (compare) {\n    var uniques = [];\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(err, x);\n        }\n        else {\n            var seen = false;\n            var hasErr;\n            for (var i = 0, len = uniques.length; i < len; i++) {\n                try {\n                    seen = compare(x, uniques[i]);\n                }\n                catch (e) {\n                    hasErr = e;\n                    seen = true;\n                }\n                if (seen) {\n                    break;\n                }\n            }\n            if (!seen) {\n                uniques.push(x);\n                push(null, x);\n            }\n            if (hasErr) {\n                push(hasErr);\n            }\n            next();\n        }\n    });\n};\nexposeMethod('uniqBy');\n\n/**\n * Filters out all duplicate values from the stream and keeps only the first\n * occurence of each value, using `===` to define equality.\n *\n * Like [uniqBy](#uniqBy), this transform needs to store a buffer containing\n * all unique values that has been encountered. Be careful about using this\n * transform on a stream that has many unique values.\n *\n * @id uniq\n * @section Transforms\n * @name Stream.uniq()\n * @api public\n *\n * var colors = [ 'blue', 'red', 'red', 'yellow', 'blue', 'red' ]\n *\n * _(colors).uniq()\n * // => 'blue'\n * // => 'red'\n * // => 'yellow'\n */\n\nStream.prototype.uniq = function () {\n    if (!_.isUndefined(_global.Set)) {\n        var uniques = new _global.Set(),\n            size = uniques.size;\n\n        return this.consume(function (err, x, push, next) {\n            if (err) {\n                push(err);\n                next();\n            }\n            else if (x === nil) {\n                push(err, x);\n            }\n            // pass NaN through as Set does not respect strict\n            // equality in this case.\n            else if (x !== x) {\n                push(null, x);\n                next();\n            }\n            else {\n                uniques.add(x);\n                if (uniques.size > size) {\n                    size = uniques.size;\n                    push(null, x);\n                }\n                next();\n            }\n        });\n    }\n    return this.uniqBy(function (a, b) {\n        return a === b;\n    });\n};\nexposeMethod('uniq');\n\n/**\n * Takes a *finite* stream of streams and returns a stream where the first\n * element from each separate stream is combined into a single data event,\n * followed by the second elements of each stream and so on until the shortest\n * input stream is exhausted.\n *\n * *Note:* This transform will be renamed `zipAll` in the next major version\n * release.\n *\n * @id zipAll0\n * @section Higher-order Streams\n * @name Stream.zipAll0()\n * @api public\n *\n * _([\n *     _([1, 2, 3]),\n *     _([4, 5, 6]),\n *     _([7, 8, 9]),\n *     _([10, 11, 12])\n * ]).zipAll0()\n * // => [1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]\n *\n * // shortest stream determines length of output stream\n * _([\n *     _([1, 2, 3, 4]),\n *     _([5, 6, 7, 8]),\n *     _([9, 10, 11, 12]),\n *     _([13, 14])\n * ]).zipAll0()\n * // => [1, 5, 9, 13], [2, 6, 10, 14]\n */\n\nStream.prototype.zipAll0 = function () {\n    var returned = 0;\n    var z = [];\n    var finished = false;\n\n    function nextValue(index, max, src, push, next) {\n        src.pull(function (err, x) {\n            if (err) {\n                push(err);\n                nextValue(index, max, src, push, next);\n            }\n            else if (x === _.nil) {\n                if (!finished) {\n                    finished = true;\n                    push(null, nil);\n                }\n            }\n            else {\n                returned++;\n                z[index] = x;\n                if (returned === max) {\n                    push(null, z);\n                    next();\n                }\n            }\n        });\n    }\n\n    return this.collect().flatMap(function (array) {\n        if (!array.length) {\n            return _([]);\n        }\n\n        return _(function (push, next) {\n            returned = 0;\n            z = [];\n            for (var i = 0, length = array.length; i < length; i++) {\n                nextValue(i, length, array[i], push, next);\n            }\n        });\n    });\n\n};\nexposeMethod('zipAll0');\n\n/**\n * Takes a stream and a *finite* stream of `N` streams\n * and returns a stream of the corresponding `(N+1)`-tuples.\n *\n * *Note:* This transform will be renamed `zipEach` in the next major version\n * release.\n *\n * @id zipAll\n * @section Higher-order Streams\n * @name Stream.zipAll(ys)\n * @param {Array | Stream} ys - the array of streams to combine values with\n * @api public\n *\n * _([1,2,3]).zipAll([[4, 5, 6], [7, 8, 9], [10, 11, 12]])\n * // => [1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]\n *\n * // shortest stream determines length of output stream\n * _([1, 2, 3, 4]).zipAll([[5, 6, 7, 8], [9, 10, 11, 12], [13, 14]])\n * // => [1, 5, 9, 13], [2, 6, 10, 14]\n */\n\nStream.prototype.zipAll = function (ys) {\n    return _([this]).concat(_(ys).map(_)).zipAll0();\n};\nexposeMethod('zipAll');\n\n/**\n * Takes two Streams and returns a Stream of corresponding pairs. The size of\n * the resulting stream is the smaller of the two source streams.\n *\n * @id zip\n * @section Higher-order Streams\n * @name Stream.zip(ys)\n * @param {Array | Stream} ys - the other stream to combine values with\n * @api public\n *\n * _(['a', 'b', 'c']).zip([1, 2, 3])  // => ['a', 1], ['b', 2], ['c', 3]\n *\n * _(['a', 'b', 'c']).zip(_([1]))  // => ['a', 1]\n */\n\nStream.prototype.zip = function (ys) {\n    return _([this, _(ys)]).zipAll0();\n};\nexposeMethod('zip');\n\n/**\n * Takes one Stream and batches incoming data into arrays of given length\n *\n * @id batch\n * @section Transforms\n * @name Stream.batch(n)\n * @param {Number} n - length of the array to batch\n * @api public\n *\n * _([1, 2, 3, 4, 5]).batch(2)  // => [1, 2], [3, 4], [5]\n */\n\nStream.prototype.batch = function (n) {\n    return this.batchWithTimeOrCount(-1, n);\n};\nexposeMethod('batch');\n\n/**\n * Takes one Stream and batches incoming data within a maximum time frame\n * into arrays of a maximum length.\n *\n * @id batchWithTimeOrCount\n * @section Transforms\n * @name Stream.batchWithTimeOrCount(ms, n)\n * @param {Number} ms - the maximum milliseconds to buffer a batch\n * @param {Number} n - the maximum length of the array to batch\n * @api public\n *\n * _(function (push) {\n *     push(1);\n *     push(2);\n *     push(3);\n *     setTimeout(push, 20, 4);\n * }).batchWithTimeOrCount(10, 2)\n *\n * // => [1, 2], [3], [4]\n */\n\nStream.prototype.batchWithTimeOrCount = function (ms, n) {\n    var batched = [],\n        timeout;\n\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            if (batched.length > 0) {\n                push(null, batched);\n                clearTimeout(timeout);\n            }\n\n            push(null, nil);\n        }\n        else {\n            batched.push(x);\n\n            if (batched.length === n) {\n                push(null, batched);\n                batched = [];\n                clearTimeout(timeout);\n            }\n            else if (batched.length === 1 && ms >= 0) {\n                timeout = setTimeout(function () {\n                    push(null, batched);\n                    batched = [];\n                }, ms);\n            }\n\n            next();\n        }\n    });\n};\nexposeMethod('batchWithTimeOrCount');\n\n/**\n * Creates a new Stream with the separator interspersed between the elements of the source.\n *\n * `intersperse` is effectively the inverse of [splitBy](#splitBy).\n *\n * @id intersperse\n * @section Transforms\n * @name Stream.intersperse(sep)\n * @param {String} sep - the value to intersperse between the source elements\n * @api public\n *\n * _(['ba', 'a', 'a']).intersperse('n')  // => 'ba', 'n', 'a', 'n', 'a'\n * _(['mississippi']).splitBy('ss').intersperse('ss')  // => 'mi', 'ss', 'i', 'ss', 'ippi'\n * _(['foo']).intersperse('bar')  // => 'foo'\n */\n\nStream.prototype.intersperse = function (separator) {\n    var started = false;\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(null, nil);\n        }\n        else {\n            if (started) {\n                push(null, separator);\n            }\n            else {\n                started = true;\n            }\n            push(null, x);\n            next();\n        }\n    });\n};\nexposeMethod('intersperse');\n\n/**\n * Splits the source Stream by a separator and emits the pieces in between, much like splitting a string.\n *\n * `splitBy` is effectively the inverse of [intersperse](#intersperse).\n *\n * @id splitBy\n * @section Transforms\n * @name Stream.splitBy(sep)\n * @param {String | RegExp} sep - the separator to split on\n * @api public\n *\n * _(['mis', 'si', 's', 'sippi']).splitBy('ss')  // => 'mi', 'i', 'ippi'\n * _(['ba', 'a', 'a']).intersperse('n').splitBy('n')  // => 'ba', 'a', 'a'\n * _(['foo']).splitBy('bar')  // => 'foo'\n */\n\nStream.prototype.splitBy = function (sep) {\n    var decoder = new Decoder();\n    var buffer = false;\n\n    function drain(x, push) {\n        buffer = (buffer || '') + decoder.write(x);\n        var pieces = buffer.split(sep);\n        buffer = pieces.pop();\n\n        pieces.forEach(function (piece) {\n            push(null, piece);\n        });\n    }\n\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            if (_.isString(buffer)) {\n                drain(decoder.end(), push);\n                push(null, buffer);\n            }\n            push(null, nil);\n        }\n        else {\n            drain(x, push);\n            next();\n        }\n    });\n};\nexposeMethod('splitBy');\n\n/**\n * [splitBy](#splitBy) over newlines.\n *\n * @id split\n * @section Transforms\n * @name Stream.split()\n * @api public\n *\n * _(['a\\n', 'b\\nc\\n', 'd', '\\ne']).split()  // => 'a', 'b', 'c', 'd', 'e'\n * _(['a\\r\\nb\\nc']]).split()  // => 'a', 'b', 'c'\n */\n\nStream.prototype.split = function () {\n    return this.splitBy(/\\r?\\n/);\n};\nexposeMethod('split');\n\n/**\n * Creates a new Stream with the values from the source in the range of `start` (inclusive) to `end` (exclusive).\n * `start` and `end` must be of type `Number`, if `start` is not a `Number` it will default to `0`\n * and, likewise, `end` will default to `Infinity`: this could result in the whole stream being be\n * returned.\n *\n * @id slice\n * @section Transforms\n * @name Stream.slice(start, end)\n * @param {Number} start - integer representing index to start reading from source (inclusive)\n * @param {Number} stop - integer representing index to stop reading from source (exclusive)\n * @api public\n *\n * _([1, 2, 3, 4]).slice(1, 3) // => 2, 3\n */\n\nStream.prototype.slice = function(start, end) {\n    var index = 0;\n    start = typeof start != 'number' || start < 0 ? 0 : start;\n    end = typeof end != 'number' ? Infinity : end;\n\n    if (start === 0 && end === Infinity) {\n        return this;\n    }\n    else if (start >= end) {\n        return _([]);\n    }\n    var s = this.consume(function (err, x, push, next) {\n        var done = x === nil;\n        if (err) {\n            push(err);\n        }\n        else if (!done && index++ >= start) {\n            push(null, x);\n        }\n\n        if (!done && index < end) {\n            next();\n        }\n        else {\n            push(null, nil);\n        }\n    });\n    s.id = 'slice:' + s.id;\n    return s;\n};\nexposeMethod('slice');\n\n/**\n * Creates a new Stream with the first `n` values from the source. `n` must be of type `Number`,\n * if not the whole stream will be returned.\n *\n * @id take\n * @section Transforms\n * @name Stream.take(n)\n * @param {Number} n - integer representing number of values to read from source\n * @api public\n *\n * _([1, 2, 3, 4]).take(2) // => 1, 2\n */\n\nStream.prototype.take = function (n) {\n    var s = this.slice(0, n);\n    s.id = 'take:' + s.id;\n    return s;\n};\nexposeMethod('take');\n\n/**\n * Acts as the inverse of [`take(n)`](#take) - instead of returning the first `n` values, it ignores the\n * first `n` values and then emits the rest. `n` must be of type `Number`, if not the whole stream will\n * be returned. All errors (even ones emitted before the nth value) will be emitted.\n *\n * @id drop\n * @section Transforms\n * @name Stream.drop(n)\n * @param {Number} n - integer representing number of values to read from source\n * @api public\n *\n * _([1, 2, 3, 4]).drop(2) // => 3, 4\n */\n\nStream.prototype.drop = function (n) {\n    return this.slice(n, Infinity);\n};\nexposeMethod('drop');\n\n/**\n * Creates a new Stream with only the first value from the source.\n *\n * @id head\n * @section Transforms\n * @name Stream.head()\n * @api public\n *\n * _([1, 2, 3, 4]).head() // => 1\n */\n\nStream.prototype.head = function () {\n    return this.take(1);\n};\nexposeMethod('head');\n\n/**\n * Drops all values from the Stream apart from the last one (if any).\n *\n * @id last\n * @section Transforms\n * @name Stream.last()\n * @api public\n *\n * _([1, 2, 3, 4]).last()  // => 4\n */\n\nStream.prototype.last = function () {\n    var nothing = {};\n    var prev = nothing;\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            if (prev !== nothing) {\n                push(null, prev);\n            }\n            push(null, nil);\n        }\n        else {\n            prev = x;\n            next();\n        }\n    });\n};\nexposeMethod('last');\n\n/**\n * Collects all values together then emits each value individually in sorted\n * order. The method for sorting the elements is defined by the comparator\n * function supplied as a parameter.\n *\n * The comparison function takes two arguments `a` and `b` and should return\n *\n * - a negative number if `a` should sort before `b`.\n * - a positive number if `a` should sort after `b`.\n * - zero if `a` and `b` may sort in any order (i.e., they are equal).\n *\n * This function must also define a [partial\n * order](https://en.wikipedia.org/wiki/Partially_ordered_set). If it does not,\n * the resulting ordering is undefined.\n *\n * @id sortBy\n * @section Transforms\n * @name Stream.sortBy(f)\n * @param {Function} f - the comparison function\n * @api public\n *\n * var sorts = _([3, 1, 4, 2]).sortBy(function (a, b) {\n *     return b - a;\n * }).toArray(_.log);\n *\n * //=> [4, 3, 2, 1]\n */\n\nStream.prototype.sortBy = function (f) {\n    return this.collect().invoke('sort', [f]).sequence();\n};\nexposeMethod('sortBy');\n\n/**\n * Collects all values together then emits each value individually but in sorted order.\n * The method for sorting the elements is ascending lexical.\n *\n * @id sort\n * @section Transforms\n * @name Stream.sort()\n * @api public\n *\n * var sorted = _(['b', 'z', 'g', 'r']).sort().toArray(_.log);\n * // => ['b', 'g', 'r', 'z']\n */\n\nStream.prototype.sort = function () {\n    return this.sortBy();\n};\nexposeMethod('sort');\n\n\n/**\n * Transforms a stream using an arbitrary target transform.\n *\n * If `target` is a function, this transform passes the current Stream to it,\n * returning the result.\n *\n * If `target` is a [Duplex\n * Stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex_1),\n * this transform pipes the current Stream through it. It will always return a\n * Highland Stream (instead of the piped to target directly as in\n * [pipe](#pipe)). Any errors emitted will be propagated as Highland errors.\n *\n * **TIP**: Passing a function to `through` is a good way to implement complex\n * reusable stream transforms. You can even construct the function dynamically\n * based on certain inputs. See examples below.\n *\n * @id through\n * @section Higher-order Streams\n * @name Stream.through(target)\n * @param {Function | Duplex Stream} target - the stream to pipe through or a\n * function to call.\n * @api public\n *\n * // This is a static complex transform.\n * function oddDoubler(s) {\n *     return s.filter(function (x) {\n *         return x % 2; // odd numbers only\n *     })\n *     .map(function (x) {\n *         return x * 2;\n *     });\n * }\n *\n * // This is a dynamically-created complex transform.\n * function multiplyEvens(factor) {\n *     return function (x) {\n *         return s.filter(function (x) {\n *             return x % 2 === 0;\n *         })\n *         .map(function (x) {\n *             return x * factor;\n *         });\n *     };\n * }\n *\n * _([1, 2, 3, 4]).through(oddDoubler); // => 2, 6\n *\n * _([1, 2, 3, 4]).through(multiplyEvens(5)); // => 10, 20\n *\n * // Can also be used with Node Through Streams\n * _(filenames).through(jsonParser).map(function (obj) {\n *     // ...\n * });\n *\n * // All errors will be propagated as Highland errors\n * _(['zz{\"a\": 1}']).through(jsonParser).errors(function (err) {\n *   console.log(err); // => SyntaxError: Unexpected token z\n * });\n */\n\nStream.prototype.through = function (target) {\n    var output;\n\n    if (_.isFunction(target)) {\n        return target(this);\n    }\n    else {\n        target.pause();\n        output = _();\n        this.on('error', writeErr);\n        target.on('error', writeErr);\n        return this.pipe(target).pipe(output);\n    }\n\n    function writeErr(err) {\n        output.write(new StreamError(err));\n    }\n};\nexposeMethod('through');\n\n/**\n * Creates a 'Through Stream', which passes data through a pipeline\n * of functions or other through Streams. This is particularly useful\n * when combined with partial application of Highland functions to expose a\n * Node-compatible Through Stream.\n *\n * This is not a method on a Stream, and it only exposed at the top-level\n * as `_.pipeline`. It takes an arbitrary number of arguments.\n *\n * @id pipeline\n * @section Higher-order Streams\n * @name _.pipeline(...)\n * @api public\n *\n * var through = _.pipeline(\n *     _.map(parseJSON),\n *     _.filter(isBlogpost),\n *     _.reduce(collectCategories)\n *     _.through(otherPipeline)\n * );\n *\n * readStream.pipe(through).pipe(outStream);\n *\n * // Alternatively, you can use pipeline to manipulate a stream in\n * // the chained method call style:\n *\n * var through2 = _.pipeline(function (s) {\n *     return s.map(parseJSON).filter(isBlogpost); // etc.\n * });\n */\n\n_.pipeline = function (/*through...*/) {\n    if (!arguments.length) {\n        return _();\n    }\n    var start = arguments[0], rest, startHighland;\n    if (!_.isStream(start) && !_.isFunction(start.resume)) {\n        // not a Highland stream or Node stream, start with empty stream\n        start = _();\n        startHighland = start;\n        rest = slice.call(arguments);\n    }\n    else {\n        // got a stream as first argument, co-erce to Highland stream\n        startHighland = _(start);\n        rest = slice.call(arguments, 1);\n    }\n\n    var end = rest.reduce(function (src, dest) {\n        return src.through(dest);\n    }, startHighland);\n\n    var wrapper = _(function (push, next) {\n        end.pull(function (err, x) {\n            push(err, x);\n            if (x !== nil) {\n                next();\n            }\n        });\n    });\n\n    wrapper.write = function (x) {\n        return start.write(x);\n    };\n\n    wrapper.end = function () {\n        return start.end();\n    };\n\n    start.on('drain', function () {\n        wrapper.emit('drain');\n    });\n\n    return wrapper;\n};\n\n/**\n * Reads values from a Stream of Streams or Arrays, emitting them on a single\n * output Stream. This can be thought of as a [flatten](#flatten), just one\n * level deep, often used for resolving asynchronous actions such as a HTTP\n * request or reading a file.\n *\n * @id sequence\n * @section Higher-order Streams\n * @name Stream.sequence()\n * @api public\n *\n * var nums = _([\n *     _([1, 2, 3]),\n *     _([4, 5, 6])\n * ]);\n *\n * nums.sequence()  // => 1, 2, 3, 4, 5, 6\n *\n * // using sequence to read from files in series\n * var readFile = _.wrapCallback(fs.readFile);\n * filenames.map(readFile).sequence()\n */\n\nStream.prototype.sequence = function () {\n    var original = this;\n    var curr = this;\n    return _(function (push, next) {\n        curr.pull(function (err, x) {\n            if (err) {\n                push(err);\n                next();\n            }\n            else if (_.isArray(x)) {\n                if (onOriginalStream()) {\n                    // just send all values from array directly\n                    x.forEach(function (y) {\n                        push(null, y);\n                    });\n                }\n                else {\n                    push(null, x);\n                }\n                next();\n            }\n            else if (_.isStream(x)) {\n                if (onOriginalStream()) {\n                    // switch to reading new stream\n                    curr = x;\n                    next();\n                }\n                else {\n                    // sequence only goes 1 level deep\n                    push(null, x);\n                    next();\n                }\n            }\n            else if (x === nil) {\n                if (onOriginalStream()) {\n                    push(null, nil);\n                }\n                else {\n                    // resume reading from original\n                    curr = original;\n                    next();\n                }\n            }\n            else {\n                if (onOriginalStream()) {\n                    // we shouldn't be getting non-stream (or array)\n                    // values from the top-level stream\n                    push(new Error(\n                        'Expected Stream, got ' + (typeof x)\n                    ));\n                    next();\n                }\n                else {\n                    push(null, x);\n                    next();\n                }\n            }\n        });\n    });\n\n    function onOriginalStream() {\n        return curr === original;\n    }\n};\nexposeMethod('sequence');\n\n/**\n * An alias for the [sequence](#sequence) method.\n *\n * @id series\n * @section Higher-order Streams\n * @name Stream.series()\n * @api public\n *\n * var readFile = _.wrapCallback(fs.readFile);\n * filenames.map(readFile).series()\n */\n\nStream.prototype.series = Stream.prototype.sequence;\n_.series = _.sequence;\n\n/**\n * Recursively reads values from a Stream which may contain nested Streams\n * or Arrays. As values or errors are encountered, they are emitted on a\n * single output Stream.\n *\n * @id flatten\n * @section Higher-order Streams\n * @name Stream.flatten()\n * @api public\n *\n * _([1, [2, 3], [[4]]]).flatten();  // => 1, 2, 3, 4\n *\n * var nums = _(\n *     _([1, 2, 3]),\n *     _([4, _([5, 6]) ])\n * );\n *\n * nums.flatten();  // => 1, 2, 3, 4, 5, 6\n */\n\nStream.prototype.flatten = function () {\n    var curr = this;\n    var stack = [];\n    return _(function (push, next) {\n        curr.pull(function (err, x) {\n            if (err) {\n                push(err);\n                next();\n                return;\n            }\n            if (_.isArray(x)) {\n                x = _(x);\n            }\n            if (_.isStream(x)) {\n                stack.push(curr);\n                curr = x;\n                next();\n            }\n            else if (x === nil) {\n                if (stack.length) {\n                    curr = stack.pop();\n                    next();\n                }\n                else {\n                    push(null, nil);\n                }\n            }\n            else {\n                push(null, x);\n                next();\n            }\n        });\n    });\n};\nexposeMethod('flatten');\n\n/**\n * Takes a Stream of Streams and reads from them in parallel, buffering\n * the results until they can be returned to the consumer in their original\n * order.\n *\n * @id parallel\n * @section Higher-order Streams\n * @name Stream.parallel(n)\n * @param {Number} n - the maximum number of concurrent reads/buffers\n * @api public\n *\n * var readFile = _.wrapCallback(fs.readFile);\n * var filenames = _(['foo.txt', 'bar.txt', 'baz.txt']);\n *\n * // read from up to 10 files at once\n * filenames.map(readFile).parallel(10);\n */\n\nStream.prototype.parallel = function (n) {\n    var source = this;\n    var running = [];\n    var ended = false;\n    var reading_source = false;\n\n    if (typeof n !== 'number') {\n        throw new Error('Must specify a number to parallel().');\n    }\n\n    if (n <= 0) {\n        throw new Error('The parallelism factor must be positive');\n    }\n\n    return _(function (push, next) {\n        if (running.length < n && !ended && !reading_source) {\n            // get another stream if not already waiting for one\n            reading_source = true;\n            source.pull(function (err, x) {\n                reading_source = false;\n                if (err) {\n                    push(err);\n                }\n                else if (x === nil) {\n                    ended = true;\n                }\n                else if (!_.isStream(x)) {\n                    push(new Error('Expected Stream, got ' + (typeof x)));\n                }\n                else {\n                    // got a new source, add it to the running array\n                    var run = {stream: x, buffer: []};\n                    running.push(run);\n                    x.consume(function (_err, y, _push, _next) {\n                        if (running[0] === run) {\n                            // current output stream\n                            if (y === nil) {\n                                // remove self from running and check\n                                // to see if we need to read from source again\n                                running.shift();\n                                flushBuffer();\n                                next();\n\n                            }\n                            else {\n                                // push directly onto parallel output stream\n                                push(_err, y);\n                            }\n                        }\n                        else {\n                            // we're reading ahead, buffer the output\n                            run.buffer.push([_err, y]);\n                        }\n                        if (y !== nil) {\n                            // keep reading until we hit nil\n                            _next();\n                        }\n                    }).resume();\n                }\n                // check if we need to get any more streams\n                return next();\n            });\n        }\n        else if (!running.length && ended) {\n            // nothing more to do\n            push(null, nil);\n        }\n\n        function flushBuffer() {\n            while (running.length && running[0].buffer.length) {\n                var buf = running[0].buffer;\n                for (var i = 0; i < buf.length; i++) {\n                    if (buf[i][1] === nil) {\n                        // this stream has ended\n                        running.shift();\n                        break;\n                    }\n                    else {\n                        // send the buffered output\n                        push.apply(null, buf[i]);\n                    }\n                }\n                buf.length = 0;\n            }\n        }\n        // else wait for more data to arrive from running streams\n    });\n};\nexposeMethod('parallel');\n\n/**\n * Switches source to an alternate Stream if the current Stream is empty.\n *\n * @id otherwise\n * @section Higher-order Streams\n * @name Stream.otherwise(ys)\n * @param {Stream | Function} ys - alternate stream (or stream-returning function) to use if this stream is empty\n * @api public\n *\n * _([1,2,3]).otherwise(['foo'])  // => 1, 2, 3\n * _([]).otherwise(['foo'])       // => 'foo'\n *\n * _.otherwise(_(['foo']), _([1,2,3]))    // => 1, 2, 3\n * _.otherwise(_(['foo']), _([]))         // => 'foo'\n */\n\nStream.prototype.otherwise = function (ys) {\n    var xs = this;\n    return xs.consume(function (err, x, push, next) {\n        if (err) {\n            // got an error, just keep going\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            // hit the end without redirecting to xs, use alternative\n            if (_.isFunction(ys)) {\n                next(ys());\n            }\n            else {\n                next(ys);\n            }\n        }\n        else {\n            // got a value, push it, then redirect to xs\n            push(null, x);\n            next(xs);\n        }\n    });\n};\nexposeMethod('otherwise');\n\n/**\n * Adds a value to the end of a Stream.\n *\n * @id append\n * @section Transforms\n * @name Stream.append(y)\n * @param y - the value to append to the Stream\n * @api public\n *\n * _([1, 2, 3]).append(4)  // => 1, 2, 3, 4\n */\n\nStream.prototype.append = function (y) {\n    return this.consume(function (err, x, push, next) {\n        if (x === nil) {\n            push(null, y);\n            push(null, _.nil);\n        }\n        else {\n            push(err, x);\n            next();\n        }\n    });\n};\nexposeMethod('append');\n\n/**\n * Boils down a Stream to a single value. The memo is the initial state\n * of the reduction, and each successive step of it should be returned by\n * the iterator function. The iterator is passed two arguments:\n * the memo and the next value.\n *\n * If the iterator throws an error, the reduction stops and the resulting\n * stream will emit that error instead of a value.\n *\n * *Note:* The order of the `memo` and `iterator` arguments will be flipped in\n * the next major version release.\n *\n * @id reduce\n * @section Transforms\n * @name Stream.reduce(memo, iterator)\n * @param memo - the initial state of the reduction\n * @param {Function} iterator - the function which reduces the values\n * @api public\n *\n * var add = function (a, b) {\n *     return a + b;\n * };\n *\n * _([1, 2, 3, 4]).reduce(0, add)  // => 10\n */\n\nStream.prototype.reduce = function (z, f) {\n    // This can't be implemented with scan(), because we don't know if the\n    // errors that we see from the scan were thrown by the iterator or just\n    // passed through from the source stream.\n    return this.consume(function (err, x, push, next) {\n        if (x === nil) {\n            push(null, z);\n            push(null, _.nil);\n        }\n        else if (err) {\n            push(err);\n            next();\n        }\n        else {\n            try {\n                z = f(z, x);\n            }\n            catch (e) {\n                push(e);\n                push(null, _.nil);\n                return;\n            }\n\n            next();\n        }\n    });\n};\nexposeMethod('reduce');\n\n/**\n * Same as [reduce](#reduce), but uses the first element as the initial\n * state instead of passing in a `memo` value.\n *\n * @id reduce1\n * @section Transforms\n * @name Stream.reduce1(iterator)\n * @param {Function} iterator - the function which reduces the values\n * @api public\n *\n * _([1, 2, 3, 4]).reduce1(add)  // => 10\n */\n\nStream.prototype.reduce1 = function (f) {\n    var self = this;\n    return _(function (push, next) {\n        self.pull(function (err, x) {\n            if (err) {\n                push(err);\n                next();\n            }\n            else if (x === nil) {\n                push(null, nil);\n            }\n            else {\n                next(self.reduce(x, f));\n            }\n        });\n    });\n};\nexposeMethod('reduce1');\n\n/**\n * Groups all values into an Array and passes down the stream as a single\n * data event. This is a bit like doing [toArray](#toArray), but instead\n * of accepting a callback and consuming the stream, it passes the value on.\n *\n * @id collect\n * @section Transforms\n * @name Stream.collect()\n * @api public\n *\n * _(['foo', 'bar']).collect().toArray(function (xs) {\n *     // xs will be [['foo', 'bar']]\n * });\n */\n\nStream.prototype.collect = function () {\n    var xs = [];\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(null, xs);\n            push(null, nil);\n        }\n        else {\n            xs.push(x);\n            next();\n        }\n    });\n};\nexposeMethod('collect');\n\n/**\n * Like [reduce](#reduce), but emits each intermediate value of the\n * reduction as it is calculated.\n *\n * If the iterator throws an error, the scan will stop and the stream will\n * emit that error. Any intermediate values that were produced before the\n * error will still be emitted.\n *\n * *Note:* The order of the `memo` and `iterator` arguments will be flipped in\n * the next major version release.\n *\n * @id scan\n * @section Transforms\n * @name Stream.scan(memo, iterator)\n * @param memo - the initial state of the reduction\n * @param {Function} iterator - the function which reduces the values\n * @api public\n *\n * _([1, 2, 3, 4]).scan(0, add)  // => 0, 1, 3, 6, 10\n */\n\nStream.prototype.scan = function (z, f) {\n    var self = this;\n    return _([z]).concat(\n        self.consume(function (err, x, push, next) {\n            if (x === nil) {\n                push(null, _.nil);\n            }\n            else if (err) {\n                push(err);\n                next();\n            }\n            else {\n                try {\n                    z = f(z, x);\n                }\n                catch (e) {\n                    push(e);\n                    push(null, _.nil);\n                    return;\n                }\n\n                push(null, z);\n                next();\n            }\n        })\n    );\n};\nexposeMethod('scan');\n\n/**\n * Same as [scan](#scan), but uses the first element as the initial\n * state instead of passing in a `memo` value.\n *\n * @id scan1\n * @section Transforms\n * @name Stream.scan1(iterator)\n * @param {Function} iterator - the function which reduces the values\n * @api public\n *\n * _([1, 2, 3, 4]).scan1(add)  // => 1, 3, 6, 10\n */\n\nStream.prototype.scan1 = function (f) {\n    var self = this;\n    return _(function (push, next) {\n        self.pull(function (err, x) {\n            if (err) {\n                push(err);\n                next();\n            }\n            else if (x === nil) {\n                push(null, nil);\n            }\n            else {\n                next(self.scan(x, f));\n            }\n        });\n    });\n};\nexposeMethod('scan1');\n\nfunction HighlandTransform(push) {\n    this.push = push;\n}\n\nHighlandTransform.prototype['@@transducer/init'] = function () {\n    return this.push;\n};\n\nHighlandTransform.prototype['@@transducer/result'] = function (push) {\n    // Don't push nil here. Otherwise, we can't catch errors from `result`\n    // and propagate them. The `transduce` implementation will do it.\n    return push;\n};\n\nHighlandTransform.prototype['@@transducer/step'] = function (push, input) {\n    push(null, input);\n    return push;\n};\n\n/**\n * Applies the transformation defined by the the given *transducer* to the\n * stream. A transducer is any function that follows the\n * [Transducer Protocol](https://github.com/cognitect-labs/transducers-js#transformer-protocol).\n * See\n * [transduce-js](https://github.com/cognitect-labs/transducers-js#transducers-js)\n * for more details on what transducers actually are.\n *\n * The `result` object that is passed in through the\n * [Transformer Protocol](https://github.com/cognitect-labs/transducers-js#transformer-protocol)\n * will be the `push` function provided by the [consume](#consume) transform.\n *\n * Like [scan](#scan), if the transducer throws an exception, the transform\n * will stop and emit that error. Any intermediate values that were produced\n * before the error will still be emitted.\n *\n * @id transduce\n * @section Transforms\n * @name Stream.transduce(xf)\n * @param {Function} xf - The transducer.\n * @api public\n *\n * var xf = require('transducer-js').map(_.add(1));\n * _([1, 2, 3, 4]).transduce(xf);\n * // => 2, 3, 4, 5\n */\n\nStream.prototype.transduce = function transduce(xf) {\n    var transform = null,\n        memo = null;\n\n    return this.consume(function (err, x, push, next) {\n        if (transform == null) {\n            transform = xf(new HighlandTransform(push));\n            memo = transform['@@transducer/init']();\n        }\n\n        if (err) {\n            // Pass through errors, like we always do.\n            push(err);\n            next();\n        }\n        else if (x === _.nil) {\n            // Push may be different from memo depending on the transducer that\n            // we get.\n            runResult(push, memo);\n        }\n        else {\n            var res = runStep(push, memo, x);\n\n            if (!res) {\n                return;\n            }\n\n            memo = res;\n            if (memo['@@transducer/reduced']) {\n                runResult(memo['@@transducer/value']);\n            }\n            else {\n                next();\n            }\n        }\n    });\n\n    function runResult(push, _memo) {\n        try {\n            transform['@@transducer/result'](_memo);\n        }\n        catch (e) {\n            push(e);\n        }\n        push(null, _.nil);\n    }\n\n    function runStep(push, _memo, x) {\n        try {\n            return transform['@@transducer/step'](_memo, x);\n        }\n        catch (e) {\n            push(e);\n            push(null, _.nil);\n            return null;\n        }\n    }\n};\nexposeMethod('transduce');\n\n/**\n * Concatenates a Stream to the end of this Stream.\n *\n * Be aware that in the top-level export, the args may be in the reverse\n * order to what you'd expect `_([a], [b]) => b, a`, as this follows the\n * convention of other top-level exported functions which do `x` to `y`.\n *\n * @id concat\n * @section Higher-order Streams\n * @name Stream.concat(ys)\n * @param {Stream | Array} ys - the values to concatenate onto this Stream\n * @api public\n *\n * _([1, 2]).concat([3, 4])  // => 1, 2, 3, 4\n * _.concat([3, 4], [1, 2])  // => 1, 2, 3, 4\n */\n\nStream.prototype.concat = function (ys) {\n    ys = _(ys);\n    return this.consume(function (err, x, push, next) {\n        if (x === nil) {\n            next(ys);\n        }\n        else {\n            push(err, x);\n            next();\n        }\n    });\n};\nexposeMethod('concat');\n\n/**\n * Takes a Stream of Streams and merges their values and errors into a\n * single new Stream. The merged stream ends when all source streams have\n * ended.\n *\n * Note that no guarantee is made with respect to the order in which\n * values for each stream end up in the merged stream. Values in the\n * merged stream will, however, respect the order they were emitted from\n * their respective streams.\n *\n * @id merge\n * @section Higher-order Streams\n * @name Stream.merge()\n * @api public\n *\n * var readFile = _.wrapCallback(fs.readFile);\n *\n * var txt = _(['foo.txt', 'bar.txt']).map(readFile)\n * var md = _(['baz.md']).map(readFile)\n *\n * _([txt, md]).merge();\n * // => contents of foo.txt, bar.txt and baz.txt in the order they were read\n */\n\nStream.prototype.merge = function () {\n    var self = this;\n    var srcs = [];\n\n    var srcsNeedPull = [],\n        first = true,\n        async = false;\n\n    return _(function (push, next) {\n        if (first) {\n            first = false;\n            getSourcesSync(push, next);\n        }\n\n        if (srcs.length === 0) {\n            push(null, nil);\n        }\n        else if (srcsNeedPull.length) {\n            pullFromAllSources(push, next);\n            next();\n        }\n        else {\n            async = true;\n        }\n    });\n\n    // Make a handler for the main merge loop.\n    function srcPullHandler(push, next, src) {\n        return function (err, x) {\n            if (err) {\n                push(err);\n                srcsNeedPull.push(src);\n            }\n            else if (x === nil) {\n                srcs = srcs.filter(function (s) {\n                    return s !== src;\n                });\n            }\n            else {\n                if (src === self) {\n                    srcs.push(x);\n                    srcsNeedPull.push(x);\n                    srcsNeedPull.unshift(self);\n                }\n                else {\n                    push(null, x);\n                    srcsNeedPull.push(src);\n                }\n            }\n\n            if (async) {\n                async = false;\n                next();\n            }\n        };\n    }\n\n\n    function pullFromAllSources(push, next) {\n        var _srcs = srcsNeedPull;\n        srcsNeedPull = [];\n        _srcs.forEach(function (src) {\n            src.pull(srcPullHandler(push, next, src));\n        });\n    }\n\n    // Pulls as many sources as possible from self synchronously.\n    function getSourcesSync(push, next) {\n        // Shadows the outer async variable.\n        var asynchronous;\n        var done = false;\n\n        var pull_cb = function(err, x) {\n            asynchronous = false;\n            if (done) {\n                // This means the pull was async. Handle like\n                // regular async.\n                srcPullHandler(push, next, self)(err, x);\n            }\n            else {\n                if (err) {\n                    push(err);\n                }\n                else if (x === nil) {\n                    done = true;\n                }\n                else {\n                    srcs.push(x);\n                    srcsNeedPull.push(x);\n                }\n            }\n        };\n\n        while (!done) {\n            asynchronous = true;\n            self.pull(pull_cb);\n\n            // Async behavior, record self as a src and return.\n            if (asynchronous) {\n                done = true;\n                srcs.unshift(self);\n            }\n        }\n    }\n\n};\nexposeMethod('merge');\n\n/**\n * Takes a Stream of Streams and merges their values and errors into a\n * single new Stream, limitting the number of unpaused streams that can\n * running at any one time.\n *\n * Note that no guarantee is made with respect to the order in which\n * values for each stream end up in the merged stream. Values in the\n * merged stream will, however, respect the order they were emitted from\n * their respective streams.\n *\n * @id mergeWithLimit\n * @section Higher-order Streams\n * @name Stream.mergeWithLimit(n)\n * @param {Number} n - the maximum number of streams to run in parallel\n * @api public\n *\n * var readFile = _.wrapCallback(fs.readFile);\n *\n * var txt = _(['foo.txt', 'bar.txt']).flatMap(readFile)\n * var md = _(['baz.md']).flatMap(readFile)\n * var js = _(['bosh.js']).flatMap(readFile)\n *\n * _([txt, md, js]).mergeWithLimit(2);\n * // => contents of foo.txt, bar.txt, baz.txt and bosh.js in the order\n * // they were read, but bosh.js is not read until either foo.txt and bar.txt\n * // has completely been read or baz.md has been read\n */\n\n\nStream.prototype.mergeWithLimit = function (n){\n    var self = this;\n    var processCount = 0;\n    var waiting = false;\n    if (typeof n !== 'number' || n < 1) {\n        throw new Error('mergeWithLimit expects a positive number, but got: ' + n);\n    }\n\n    if (n === Infinity) {\n        return this.merge();\n    }\n    return _(function(push, next){\n        self.pull(function(err, x){\n            var done = x === nil;\n            if (err){\n                push(err);\n                next();\n            }\n            else if (x === nil) {\n                push(null, nil);\n            }\n            else {\n                processCount++;\n                push(err, x);\n                // console.log('start', x.id);\n                x._destructors.push(function(){\n                    processCount--;\n                    // console.log('end', x.id);\n                    if (waiting) {\n                        // console.log('get more');\n                        waiting = false;\n                        next();\n                    }\n                });\n                if (!done && processCount < n) {\n                    next();\n                }\n                else {\n                    // console.log('wait till something ends');\n                    waiting = true;\n                }\n            }\n\n        });\n    }).merge();\n};\nexposeMethod('mergeWithLimit');\n\n/**\n * Calls a named method on each object from the Stream - returning\n * a new stream with the result of those calls.\n *\n * @id invoke\n * @section Transforms\n * @name Stream.invoke(method, args)\n * @param {String} method - the method name to call\n * @param {Array} args - the arguments to call the method with\n * @api public\n *\n * _(['foo', 'bar']).invoke('toUpperCase', [])  // => 'FOO', 'BAR'\n *\n * var readFile = _.wrapCallback(fs.readFile);\n * filenames.flatMap(readFile).invoke('toString', ['utf8']);\n */\n\nStream.prototype.invoke = function (method, args) {\n    return this.map(function (x) {\n        return x[method].apply(x, args);\n    });\n};\nexposeMethod('invoke');\n\n/**\n * Takes a Stream of callback-accepting node-style functions,\n * [wraps](#wrapCallback) each one into a stream-returning function,\n * calls them with the arguments provided, and returns the results\n * as a Stream.\n *\n * This can be used as a control flow shortcut and draws parallels\n * with some control flow functions from [async](https://github.com/caolan/async).\n * A few rough correspondences include:\n *\n * - `.nfcall([]).series()` to `async.series()`\n * - `.nfcall([]).parallel(n)` to `async.parallelLimit(n)`\n * - `.nfcall(args)` to `async.applyEach(..., args)`\n * - `.nfcall(args).series()` to `async.applyEachSeries(..., args)`\n *\n * @id nfcall\n * @section Transforms\n * @name Stream.nfcall(args)\n * @param {Array} args - the arguments to call each function with\n * @api public\n *\n * _([\n *   function (callback) {\n *     setTimeout(function () {\n *       callback(null, 'one');\n *     }, 200);\n *   },\n *   function (callback) {\n *     setTimeout(function () {\n *       callback(null, 'two');\n *     }, 100);\n *   }\n * ]).nfcall([]).parallel(2).toArray(function (xs) {\n *   // xs is ['one', 'two'] even though second function had a shorter timeout\n * });\n *\n * _([enableSearch, updateSchema]).nfcall(['bucket']).toArray(callback);\n * // does roughly the same as\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * _([\n *   fs.appendFile,\n *   fs.appendFile\n * ]).nfcall(['example.txt', 'hello']).series().toArray(function() {\n *   // example.txt now contains 'hellohello'\n * });\n *\n */\n\nStream.prototype.nfcall = function (args) {\n    return this.map(function (x) {\n        return _.wrapCallback(x).apply(x, args);\n    });\n};\nexposeMethod('nfcall');\n\n/**\n * Ensures that only one data event is push downstream (or into the buffer)\n * every `ms` milliseconds, any other values are dropped.\n *\n * @id throttle\n * @section Transforms\n * @name Stream.throttle(ms)\n * @param {Number} ms - the minimum milliseconds between each value\n * @api public\n *\n * _('mousemove', document).throttle(1000);\n */\n\nStream.prototype.throttle = function (ms) {\n    var last = 0 - ms;\n    return this.consume(function (err, x, push, next) {\n        var now = new Date().getTime();\n        if (err) {\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            push(null, nil);\n        }\n        else if (now - ms >= last) {\n            last = now;\n            push(null, x);\n            next();\n        }\n        else {\n            next();\n        }\n    });\n};\nexposeMethod('throttle');\n\n/**\n * Holds off pushing data events downstream until there has been no more\n * data for `ms` milliseconds. Sends the last value that occurred before\n * the delay, discarding all other values.\n *\n * **Implementation Note**: This transform will will not wait the full `ms`\n * delay to emit a pending value (if any) once it see a `nil`, as that\n * guarantees that there will be no more values.\n *\n * @id debounce\n * @section Transforms\n * @name Stream.debounce(ms)\n * @param {Number} ms - the milliseconds to wait before sending data\n * @api public\n *\n * function delay(x, ms, push) {\n *     setTimeout(function () {\n *         push(null, x);\n *     }, ms);\n * }\n *\n * // sends last keyup event after user has stopped typing for 1 second\n * $('keyup', textbox).debounce(1000);\n *\n * // A nil triggers the emit immediately\n * _(function (push, next) {\n *     delay(0, 100, push);\n *     delay(1, 200, push);\n *     delay(_.nil, 250, push);\n * }).debounce(75);\n * // => after 175ms => 1\n * // => after 250ms (not 275ms!) => 1 2\n */\n\nStream.prototype.debounce = function (ms) {\n    var t = null;\n    var nothing = {};\n    var last = nothing;\n\n    return this.consume(function (err, x, push, next) {\n        if (err) {\n            // let errors through regardless\n            push(err);\n            next();\n        }\n        else if (x === nil) {\n            if (t) {\n                clearTimeout(t);\n            }\n            if (last !== nothing) {\n                push(null, last);\n            }\n            push(null, nil);\n        }\n        else {\n            last = x;\n            if (t) {\n                clearTimeout(t);\n            }\n            t = setTimeout(push.bind(this, null, x), ms);\n            next();\n        }\n    });\n};\nexposeMethod('debounce');\n\n/**\n * Creates a new Stream, which when read from, only returns the last\n * seen value from the source. The source stream does not experience\n * back-pressure. Useful if you're using a Stream to model a changing\n * property which you need to query periodically.\n *\n * @id latest\n * @section Transforms\n * @name Stream.latest()\n * @api public\n *\n * // slowThing will always get the last known mouse position\n * // when it asks for more data from the mousePosition stream\n * mousePosition.latest().map(slowThing)\n */\n\nStream.prototype.latest = function () {\n    var nothing = {},\n        latest = nothing,\n        errors = [],\n        ended = false,\n        onValue = null;\n\n    this.consume(function (err, x, push, next) {\n        if (onValue != null) {\n            var cb = onValue;\n            onValue = null;\n            cb(err, x);\n        }\n\n        if (err) {\n            errors.push(err);\n            next();\n        }\n        else if (x === nil) {\n            ended = true;\n        }\n        else {\n            latest = x;\n            next();\n        }\n    }).resume();\n\n    return _(function (push, next) {\n        var oldErrors = errors;\n        errors = [];\n\n        if (!oldErrors.length && latest === nothing && !ended) {\n            // We haven't gotten any data yet. We can't call next\n            // because that might cause the stream to call the generator\n            // again, resulting in an infinite loop. Thus, we stick a\n            // a callback to be called whenever we get a value.\n            onValue = function (err, x) {\n                push(err, x);\n                if (x !== nil) {\n                    next();\n                }\n            };\n        }\n        else {\n            oldErrors.forEach(push);\n            if (latest !== nothing) {\n                push(null, latest);\n            }\n            if (ended) {\n                push(null, nil);\n            }\n            else {\n                next();\n            }\n        }\n    });\n};\nexposeMethod('latest');\n\n/**\n * Returns values from an Object as a Stream. Reads properties\n * lazily, so if you don't read from all keys on an object, not\n * all properties will be read from (may have an effect where getters\n * are used).\n *\n * @id values\n * @section Objects\n * @name _.values(obj)\n * @param {Object} obj - the object to return values from\n * @api public\n *\n * _.values({foo: 1, bar: 2, baz: 3})  // => 1, 2, 3\n */\n\n_.values = function (obj) {\n    return _.keys(obj).map(function (k) {\n        return obj[k];\n    });\n};\n\n/**\n * Returns keys from an Object as a Stream.\n *\n * @id keys\n * @section Objects\n * @name _.keys(obj)\n * @param {Object} obj - the object to return keys from\n * @api public\n *\n * _.keys({foo: 1, bar: 2, baz: 3})  // => 'foo', 'bar', 'baz'\n */\n\nfunction keys (obj) {\n    var keysArray = [];\n    for (var k in obj) {\n        if (hasOwn.call(obj, k)) {\n            keysArray.push(k);\n        }\n    }\n    return keysArray;\n}\n\n_.keys = function (obj) {\n    return _(keys(obj));\n};\n\n/**\n * Returns key/value pairs for an Object as a Stream. Reads properties\n * lazily, so if you don't read from all keys on an object, not\n * all properties will be read from (may have an effect where getters\n * are used).\n *\n * @id pairs\n * @section Objects\n * @name _.pairs(obj)\n * @param {Object} obj - the object to return key/value pairs from\n * @api public\n *\n * _.pairs({foo: 1, bar: 2})  // => ['foo', 1], ['bar', 2]\n */\n\n_.pairs = function (obj) {\n    return _.keys(obj).map(function (k) {\n        return [k, obj[k]];\n    });\n};\n\n/**\n * Extends one object with the properties of another. **Note:** The\n * arguments are in the reverse order of other libraries such as\n * underscore. This is so it follows the convention of other functions in\n * this library and so you can more meaningfully partially apply it.\n *\n * @id extend\n * @section Objects\n * @name _.extend(a, b)\n * @param {Object} a - the properties to extend b with\n * @param {Object} b - the original object to extend\n * @api public\n *\n * _.extend({name: 'bar'}, {name: 'foo', price: 20})\n * // => {name: 'bar', price: 20}\n *\n * // example of partial application\n * var publish = _.extend({published: true});\n *\n * publish({title: 'test post'})\n * // => {title: 'test post', published: true}\n */\n\n_.extend = _.curry(function (extensions, target) {\n    for (var k in extensions) {\n        if (hasOwn.call(extensions, k)) {\n            target[k] = extensions[k];\n        }\n    }\n    return target;\n});\n\n/**\n * Returns a property from an object.\n *\n * @id get\n * @section Objects\n * @name _.get(prop, obj)\n * @param {String} prop - the property to return\n * @param {Object} obj - the object to read properties from\n * @api public\n *\n * var obj = {foo: 'bar', baz: 123};\n * _.get('foo', obj) // => 'bar'\n *\n * // making use of partial application\n * var posts = [\n *   {title: 'one'},\n *   {title: 'two'},\n *   {title: 'three'}\n * ];\n *\n * _(posts).map(_.get('title'))  // => 'one', 'two', 'three'\n */\n\n_.get = _.curry(function (prop, obj) {\n    return obj[prop];\n});\n\n/**\n * Updates a property on an object, returning the updated object.\n *\n * @id set\n * @section Objects\n * @name _.set(prop, value, obj)\n * @param {String} prop - the property to return\n * @param value - the value to set the property to\n * @param {Object} obj - the object to set properties on\n * @api public\n *\n * var obj = {foo: 'bar', baz: 123};\n * _.set('foo', 'wheeee', obj) // => {foo: 'wheeee', baz: 123}\n *\n * // making use of partial application\n * var publish = _.set('published', true);\n *\n * publish({title: 'example'})  // => {title: 'example', published: true}\n */\n\n_.set = _.curry(function (prop, val, obj) {\n    obj[prop] = val;\n    return obj;\n});\n\n/**\n * Logs values to the console, a simple wrapper around `console.log` that\n * it suitable for passing to other functions by reference without having to\n * call `bind`.\n *\n * @id log\n * @section Utils\n * @name _.log(args..)\n * @api public\n *\n * _.log('Hello, world!');\n *\n * _([1, 2, 3, 4]).each(_.log);\n */\n\n_.log = function () {\n    console.log.apply(console, arguments);\n};\n\n/**\n * Wraps a node-style async function which accepts a callback, transforming\n * it to a function which accepts the same arguments minus the callback and\n * returns a Highland Stream instead. The wrapped function keeps its context,\n * so you can safely use it as a method without binding (see the second\n * example below).\n *\n * `wrapCallback` also accepts an optional `mappingHint`, which specifies how\n * callback arguments are pushed to the stream. This can be used to handle\n * non-standard callback protocols that pass back more than one value.\n *\n * `mappingHint` can be a function, number, or array. See the documentation on\n * [EventEmitter Stream Objects](#Stream Objects) for details on the mapping\n * hint. If `mappingHint` is a function, it will be called with all but the\n * first argument that is passed to the callback. The first is still assumed to\n * be the error argument.\n *\n * @id wrapCallback\n * @section Utils\n * @name _.wrapCallback(f)\n * @param {Function} f - the node-style function to wrap\n * @param {Array | Function | Number} mappingHint - (optional) how to pass the\n * arguments to the callback\n * @api public\n *\n * var fs = require('fs');\n *\n * var readFile = _.wrapCallback(fs.readFile);\n *\n * readFile('example.txt').apply(function (data) {\n *     // data is now the contents of example.txt\n * });\n *\n * function Reader(file) {\n *     this.file = file;\n * }\n *\n * Reader.prototype.read = function(cb) {\n *     fs.readFile(this.file, cb);\n * };\n *\n * Reader.prototype.readStream = _.wrapCallback(Reader.prototype.read);\n */\n\n/*eslint-disable no-multi-spaces */\n_.wrapCallback = function (f, /*optional*/mappingHint) {\n    /*eslint-enable no-multi-spaces */\n    var mapper = hintMapper(mappingHint);\n\n    return function () {\n        var self = this;\n        var args = slice.call(arguments);\n        return _(function (push) {\n            var cb = function (err) {\n                if (err) {\n                    push(err);\n                }\n                else {\n                    var cbArgs = slice.call(arguments, 1);\n                    var v = mapper.apply(this, cbArgs);\n                    push(null, v);\n                }\n                push(null, nil);\n            };\n            f.apply(self, args.concat([cb]));\n        });\n    };\n};\n\n/**\n * Takes an object or a constructor function and returns that object or\n * constructor with streamified versions of its function properties.\n * Passed constructors will also have their prototype functions\n * streamified.  This is useful for wrapping many node style async\n * functions at once, and for preserving those functions' context.\n *\n * @id streamifyAll\n * @section Utils\n * @name _.streamifyAll(source)\n * @param {Object | Function} source - the function or object with\n * node-style function properties.\n * @api public\n *\n * var fs = _.streamifyAll(require('fs'));\n *\n * fs.readFileStream('example.txt').apply(function (data) {\n *     // data is now the contents of example.txt\n * });\n */\n\nfunction isClass (fn) {\n    if (!(typeof fn === 'function' && fn.prototype)) { return false; }\n    var getKeys = isES5 ? Object.getOwnPropertyNames : keys;\n    var allKeys = getKeys(fn.prototype);\n    return allKeys.length > 0 && !(allKeys.length === 1 &&\n            allKeys[0] === 'constructor');\n}\n\nfunction inheritedKeys (obj) {\n    var allProps = {};\n    var curr = obj;\n    var handleProp = function (prop) {\n        allProps[prop] = true;\n    };\n    while (Object.getPrototypeOf(curr)) {\n        var props = Object.getOwnPropertyNames(curr);\n        props.forEach(handleProp);\n        curr = Object.getPrototypeOf(curr);\n    }\n    return keys(allProps);\n}\n\nfunction streamifyAll (inp, suffix) {\n    // will not streamify inherited functions in ES3\n    var getKeys = isES5 ? inheritedKeys : keys;\n    var allKeys = getKeys(inp);\n\n    for (var i = 0, len = allKeys.length; i < len; i++) {\n        var key = allKeys[i];\n        var val;\n\n        // will skip context aware getters\n        try {\n            val = inp[key];\n        }\n        catch (e) {\n            // Ignore\n        }\n\n        if (val && typeof val === 'function' && !isClass(val) &&\n                !val.__HighlandStreamifiedFunction__) {\n\n            var streamified = _.wrapCallback(val);\n            streamified.__HighlandStreamifiedFunction__ = true;\n            inp[key + suffix] = streamified;\n        }\n    }\n    return inp;\n}\n\n_.streamifyAll = function (arg) {\n    if (typeof arg !== 'function' && typeof arg !== 'object') {\n        throw new TypeError('takes an object or a constructor function');\n    }\n    var suffix = 'Stream';\n\n    var ret = streamifyAll(arg, suffix);\n    if (isClass(arg)) {\n        ret.prototype = streamifyAll(arg.prototype, suffix);\n    }\n    return ret;\n};\n\n/**\n * Add two values. Can be partially applied.\n *\n * @id add\n * @section Operators\n * @name _.add(a, b)\n * @api public\n *\n * _.add(1, 2) === 3\n * _.add(1)(5) === 6\n */\n\n_.add = _.curry(function (a, b) {\n    return a + b;\n});\n\n/**\n * Perform logical negation on a value. If `x` is truthy then returns false,\n * otherwise returns true.\n *\n * @id not\n * @section Operators\n * @name _.not(x)\n * @param x - the value to negate\n * @api public\n *\n * _.not(true)   // => false\n * _.not(false)  // => true\n */\n\n_.not = function (x) {\n    return !x;\n};\n","// @flow\n\n//\n// INTEL CONFIDENTIAL\n//\n// Copyright 2013-2017 Intel Corporation All Rights Reserved.\n//\n// The source code contained or described herein and all documents related\n// to the source code (\"Material\") are owned by Intel Corporation or its\n// suppliers or licensors. Title to the Material remains with Intel Corporation\n// or its suppliers and licensors. The Material contains trade secrets and\n// proprietary and confidential information of Intel or its suppliers and\n// licensors. The Material is protected by worldwide copyright and trade secret\n// laws and treaty provisions. No part of the Material may be used, copied,\n// reproduced, modified, published, uploaded, posted, transmitted, distributed,\n// or disclosed in any way without Intel's prior express written permission.\n//\n// No license under any patent, copyright, trade secret or other intellectual\n// property right is granted to or conferred upon you by disclosure or delivery\n// of the Materials, either expressly, by implication, inducement, estoppel or\n// otherwise. Any license under such intellectual property rights must be\n// express and approved by Intel in writing.\n\nimport fs from 'fs';\nimport os from 'os';\n\ntype confT = {\n  name: string,\n  path: string,\n  level: 30 | 50,\n  serializers: {\n    [key: string]: (x: any) => mixed\n  }\n};\n\nexport const LEVELS = {\n  INFO: 30,\n  ERROR: 50\n};\n\nexport const serializers = {\n  err(e: ?child_process$Error) {\n    if (!e || !e.stack) return e;\n\n    return {\n      message: e.message,\n      name: e.name,\n      stack: e.stack,\n      signal: e.signal,\n      code: e.code\n    };\n  }\n};\n\nexport default (config: confT) => {\n  const s = fs.createWriteStream(config.path, {\n    flags: 'a',\n    encoding: 'utf8'\n  });\n\n  const base = {\n    name: config.name,\n    pid: process.pid,\n    hostname: os.hostname(),\n    v: 0\n  };\n\n  return createLogger(base, s, config);\n};\n\nconst createLogger = (base, s, config) => ({\n  child: (r: Object) => {\n    return createLogger(\n      {\n        ...base,\n        ...r\n      },\n      s,\n      config\n    );\n  },\n  info: getLevelLogger(config.level, LEVELS.INFO, s, config.serializers, base),\n  error: getLevelLogger(config.level, LEVELS.ERROR, s, config.serializers, base)\n});\n\nconst getLevelLogger = (passedLevel, expectedLevel, s, serializers, base) =>\n  (passedLevel <= expectedLevel\n    ? parseRecord(s, serializers, expectedLevel, base)\n    : () => {});\n\nconst parseRecord = (s, serializers, level, base) => (\n  r: string | {},\n  msg: string = ''\n) => {\n  if (typeof r === 'string') {\n    msg = r;\n    r = {};\n  }\n\n  type logObj = $Shape<{\n    hostname: string,\n    name: string,\n    pid: number,\n    v: number,\n    msg: string,\n    level: 30 | 50,\n    time: string\n  }>;\n\n  const result: logObj = {\n    ...base,\n    ...r,\n    msg,\n    level,\n    time: new Date().toISOString()\n  };\n\n  const out = Object.keys(result).reduce((x: logObj, k: string): logObj => {\n    const val = result[k];\n    const serialized = serializers[k] && serializers[k](val);\n\n    return {\n      ...x,\n      [k]: serialized || val\n    };\n  }, {});\n\n  s.write(`${JSON.stringify(out)}\\n`);\n};\n","import { LEVELS, default as logger } from '@mfl/logger';\n\nconst errorLog = logger({\n  path: 'srcmap-reverse-errors.log',\n  level: LEVELS.ERROR,\n  name: 'errors',\n  serializers: {}\n});\n\nconst reverseLog = logger({\n  path: 'srcmap-reverse-trace.log',\n  level: LEVELS.INFO,\n  name: 'reverseTrace',\n  serializers: {}\n});\n\nexport { errorLog, reverseLog };\n","// @flow\n\n//\n// INTEL CONFIDENTIAL\n//\n// Copyright 2013-2016 Intel Corporation All Rights Reserved.\n//\n// The source code contained or described herein and all documents related\n// to the source code (\"Material\") are owned by Intel Corporation or its\n// suppliers or licensors. Title to the Material remains with Intel Corporation\n// or its suppliers and licensors. The Material contains trade secrets and\n// proprietary and confidential information of Intel or its suppliers and\n// licensors. The Material is protected by worldwide copyright and trade secret\n// laws and treaty provisions. No part of the Material may be used, copied,\n// reproduced, modified, published, uploaded, posted, transmitted, distributed,\n// or disclosed in any way without Intel's prior express written permission.\n//\n// No license under any patent, copyright, trade secret or other intellectual\n// property right is granted to or conferred upon you by disclosure or delivery\n// of the Materials, either expressly, by implication, inducement, estoppel or\n// otherwise. Any license under such intellectual property rights must be\n// express and approved by Intel in writing.\n\n'use strict';\n\nimport highland from 'highland';\nimport { exec } from 'child_process';\nimport { errorLog } from './logger';\n\nexport default (trace: string) => {\n  const lines = trace.split('\\n');\n\n  return highland(lines)\n    .map((line: string) => {\n      return highland((push: Function) => {\n        const reverse = exec(\n          `node packages/reverser/dist/bundle.js`,\n          (err, x) => {\n            if (err) {\n              errorLog.error({ err }, 'Reversing source map');\n              push(null, line);\n            } else {\n              if (x.length > 0) push(null, x);\n            }\n\n            push(null, highland.nil);\n          }\n        );\n\n        reverse.stdin.write(line);\n        reverse.stdin.end();\n      });\n    })\n    .parallel(lines.length)\n    .map((x: Buffer) => x.toString('utf8'))\n    .collect()\n    .map(x => x.join('\\n'));\n};\n","// @flow\n\n//\n// INTEL CONFIDENTIAL\n//\n// Copyright 2013-2017 Intel Corporation All Rights Reserved.\n//\n// The source code contained or described herein and all documents related\n// to the source code (\"Material\") are owned by Intel Corporation or its\n// suppliers or licensors. Title to the Material remains with Intel Corporation\n// or its suppliers and licensors. The Material contains trade secrets and\n// proprietary and confidential information of Intel or its suppliers and\n// licensors. The Material is protected by worldwide copyright and trade secret\n// laws and treaty provisions. No part of the Material may be used, copied,\n// reproduced, modified, published, uploaded, posted, transmitted, distributed,\n// or disclosed in any way without Intel's prior express written permission.\n//\n// No license under any patent, copyright, trade secret or other intellectual\n// property right is granted to or conferred upon you by disclosure or delivery\n// of the Materials, either expressly, by implication, inducement, estoppel or\n// otherwise. Any license under such intellectual property rights must be\n// express and approved by Intel in writing.\n\nimport http from 'http';\nimport highland from 'highland';\nimport reverseInParallel from './reverse-in-parallel.js';\n\nlet server: http.Server;\n\nexport default () => {\n  server = http.createServer(\n    (request: http.IncomingMessage, response: http.ServerResponse) => {\n      const through = highland.pipeline(\n        highland.map(x => x.toString('utf-8')),\n        highland.collect(),\n        highland.map((x: string[]) => x.join('')),\n        highland.flatMap((x: string) => {\n          const { trace }: { trace: string } = JSON.parse(x);\n          return reverseInParallel(trace);\n        }),\n        highland.map(xs => {\n          return JSON.stringify(xs);\n        })\n      );\n\n      request.pipe(through).pipe(response);\n    }\n  );\n\n  const port: number = +process.env.npm_package_config_port;\n  server.listen(port);\n\n  return server;\n};\n"],"names":["module","require","deprecate","inherits","EventEmitter","Decoder","StringDecoder","exports","xs","secondArg","mappingHint","Stream","_","slice","Array","prototype","hasOwn","Object","hasOwnProperty","isES5","Function","bind","isUndefined","x","isFunction","isObject","isString","isArray","toString","call","setImmediate","fn","process","stdout","_global","this","global","window","nil","curry","args","arguments","ncurry","apply","length","concat","n","largs","partial","f","flip","y","compose","fns","reverse","seq","r","i","nop","defaultReadableOnFinish","readable","callback","once","removeListener","pipeReadable","onFinish","stream","response","streamEndCb","unbound","cleanup","endOnError","onDestroy","continueOnError","pipe","_destructors","push","unbind","error","_nil_pushed","write","StreamError","end","unpipe","promiseStream","promise","nilScheduled","then","value","err","iteratorStream","it","next","iterElem","iterErr","done","hintMapper","mappingHintType","mapper","reduce","ctx","hint","idx","pipeStream","src","dest","passAlongErrors","resume","s","consume","canContinue","emit","on","onConsumerDrain","oldResume","generatorPush","isStream","self","__HighlandStream__","id","Math","random","substr","paused","_incoming","_outgoing","_consumers","_observers","_send_events","_delegate","_is_observer","_in_consume_cb","_repeat_resume","_consume_waiting_for_next","source","writable","ev","end_listeners","listeners","data_listeners","_generator","_generator_push","_generator_next","Error","_paused","pause","StreamRedirect","_resume","_generator_running","Symbol","iterator","callback_func","removeMethod","of","fromError","exposeMethod","name","pop","__HighlandStreamError__","to","__HighlandStreamRedirect__","_isStreamError","_isStreamRedirect","_send","token","consumers","len","observers","j","len2","_onEnd","ended","_removeConsumer","_removeObserver","observer","_checkBackPressure","_readFromBuffer","_redirect","splice","_sendOutgoing","forceResumeSource","_resume_running","_runGenerator","options","canClose","stderr","destroy","map","c","_delegate_source","_addConsumer","filter","o","_is_consumer","async","next_called","s2","_already_consumed","pull","warnForkAfterConsume","fork","observe","errors","stopOnError","each","toArray","collect","toCallback","cb","hasValue","warnMapWithValue","val","fnVal","fnErr","e","doto","tap","ratelimit","num","ms","sent","flatMap","sequence","pluck","prop","objectOnly","strategy","pickBy","out","seen","create","obj","testAndAdd","getOwnPropertyNames","forEach","getPrototypeOf","k","pick","properties","p","flatFilter","take","otherwise","errorStream","bool","reject","not","find","findWhere","props","where","group","lambda","get","m","key","compact","uniqBy","compare","uniques","hasErr","uniq","Set","size","add","a","b","zipAll0","returned","z","finished","nextValue","index","max","array","zipAll","ys","zip","batch","batchWithTimeOrCount","batched","timeout","setTimeout","intersperse","separator","started","splitBy","sep","decoder","buffer","drain","pieces","split","piece","start","Infinity","drop","head","last","nothing","prev","sortBy","invoke","sort","through","target","output","writeErr","pipeline","rest","startHighland","wrapper","original","curr","onOriginalStream","series","flatten","stack","parallel","running","reading_source","run","_err","_push","_next","shift","flushBuffer","buf","append","reduce1","scan","scan1","HighlandTransform","input","transduce","xf","transform","memo","res","runStep","runResult","_memo","merge","srcs","srcsNeedPull","first","srcPullHandler","unshift","pullFromAllSources","_srcs","getSourcesSync","asynchronous","pull_cb","mergeWithLimit","processCount","waiting","method","nfcall","wrapCallback","throttle","now","Date","getTime","debounce","t","latest","onValue","oldErrors","values","keys","keysArray","pairs","extend","extensions","set","log","console","cbArgs","v","isClass","getKeys","allKeys","inheritedKeys","allProps","handleProp","streamifyAll","inp","suffix","__HighlandStreamifiedFunction__","streamified","arg","TypeError","ret","LEVELS","config","fs","createWriteStream","path","base","pid","os","hostname","createLogger","getLevelLogger","level","INFO","serializers","ERROR","passedLevel","expectedLevel","parseRecord","msg","result","toISOString","serialized","JSON","stringify","errorLog","logger","reverseLog","trace","lines","highland","line","exec","stdin","join","server","http","createServer","request","parse","reverseInParallel","port","env","npm_package_config_port","listen"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAKAA,QAAA,GAAiBC,KAAgBC,SAAjC;;;ACKA,IAAIC,WAAWF,KAAgBE,QAA/B;AAEA,IAAIC,eAAeH,OAAkBG,YAArC;AACA,IAAIC,UAAUJ,eAA0BK,aAAxC;AAqKAC,UAAUP,cAAA,GAAiB,uBAAsBQ,EAAtB,cAAsCC,SAAtC,cAA8DC,WAA9D,EAA2E;WAE3F,IAAIC,MAAJ,CAAWH,EAAX,EAAeC,SAAf,EAA0BC,WAA1B,CAAP;CAFJ;AAKA,IAAIE,IAAIL,OAAR;AAGA,IAAIM,QAAQC,MAAMC,SAAN,CAAgBF,KAA5B;AACA,IAAIG,SAASC,OAAOF,SAAP,CAAiBG,cAA9B;AAGA,IAAIC,QAAS,YAAY;;WAEdC,SAASL,SAAT,CAAmBM,IAAnB,IAA2B,CAAC,IAAnC;CAFS,EAAb;AAMAT,EAAEU,WAAF,GAAgB,UAAUC,CAAV,EAAa;WAClB,OAAOA,CAAP,KAAa,WAApB;CADJ;AAIAX,EAAEY,UAAF,GAAe,UAAUD,CAAV,EAAa;WACjB,OAAOA,CAAP,KAAa,UAApB;CADJ;AAIAX,EAAEa,QAAF,GAAa,UAAUF,CAAV,EAAa;WACf,OAAOA,CAAP,KAAa,QAAb,IAAyBA,MAAM,IAAtC;CADJ;AAIAX,EAAEc,QAAF,GAAa,UAAUH,CAAV,EAAa;WACf,OAAOA,CAAP,KAAa,QAApB;CADJ;AAIAX,EAAEe,OAAF,GAAYb,MAAMa,OAAN,IAAiB,UAAUJ,CAAV,EAAa;WAC/BN,OAAOF,SAAP,CAAiBa,QAAjB,CAA0BC,IAA1B,CAA+BN,CAA/B,MAAsC,gBAA7C;CADJ;AAKA,IAAI,OAAOO,YAAP,KAAwB,WAA5B,EAAyC;MACnCA,YAAF,GAAiB,UAAUC,EAAV,EAAc;mBAChBA,EAAX,EAAe,CAAf;KADJ;;KAKC,IAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,CAAEA,QAAQC,MAAhD,EAAyD;UAExDH,YAAF,GAAiB,UAAUC,EAAV,EAAc;yBACdA,EAAb;SADJ;KAFC,MAMA;UACCD,YAAF,GAAiBA,YAAjB;;AAqCJ,IAAII,UAAUC,cAAd;AACA,IAAI,OAAOC,cAAP,KAAkB,WAAtB,EAAmC;cACrBA,cAAV;CADJ,MAGK,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;cAC1BA,MAAV;;AAEJ,IAAI,CAACH,QAAQI,GAAb,EAAkB;YACNA,GAAR,GAAc,EAAd;;AAEJ,IAAIA,MAAM1B,EAAE0B,GAAF,GAAQJ,QAAQI,GAA1B;AA0BA1B,EAAE2B,KAAF,GAAU,UAAUR,EAAV,gBAA4B;QAC9BS,OAAO3B,MAAMgB,IAAN,CAAWY,SAAX,CAAX;WACO7B,EAAE8B,MAAF,CAASC,KAAT,CAAe,IAAf,EAAqB,CAACZ,GAAGa,MAAJ,EAAYC,MAAZ,CAAmBL,IAAnB,CAArB,CAAP;CAFJ;AA6BA5B,EAAE8B,MAAF,GAAW,UAAUI,CAAV,EAAaf,EAAb,gBAA+B;QAClCgB,QAAQlC,MAAMgB,IAAN,CAAWY,SAAX,EAAsB,CAAtB,CAAZ;QACIM,MAAMH,MAAN,IAAgBE,CAApB,EAAuB;eACZf,GAAGY,KAAH,CAAS,IAAT,EAAeI,MAAMlC,KAAN,CAAY,CAAZ,EAAeiC,CAAf,CAAf,CAAP;;WAGGlC,EAAEoC,OAAF,CAAUL,KAAV,CAAgB,IAAhB,EAAsB,CAAC/B,EAAE8B,MAAH,EAAWI,CAAX,EAAcf,EAAd,EAAkBc,MAAlB,CAAyBE,KAAzB,CAAtB,CAAP;CANJ;AA6BAnC,EAAEoC,OAAF,GAAY,UAAUC,CAAV,gBAA2B;QAC/BT,OAAO3B,MAAMgB,IAAN,CAAWY,SAAX,EAAsB,CAAtB,CAAX;WACO,YAAY;eACRQ,EAAEN,KAAF,CAAQ,IAAR,EAAcH,KAAKK,MAAL,CAAYhC,MAAMgB,IAAN,CAAWY,SAAX,CAAZ,CAAd,CAAP;KADJ;CAFJ;AAwBA7B,EAAEsC,IAAF,GAAStC,EAAE2B,KAAF,CAAQ,UAAUR,EAAV,EAAcR,CAAd,EAAiB4B,CAAjB,EAAoB;WAASpB,GAAGoB,CAAH,EAAM5B,CAAN,CAAP;CAA9B,CAAT;AAoBAX,EAAEwC,OAAF,GAAY,4BAA4B;QAChCC,MAAMxC,MAAMgB,IAAN,CAAWY,SAAX,EAAsBa,OAAtB,EAAV;WACO1C,EAAE2C,GAAF,CAAMZ,KAAN,CAAY,IAAZ,EAAkBU,GAAlB,CAAP;CAFJ;AAqBAzC,EAAE2C,GAAF,GAAQ,YAAY;QACZF,MAAMxC,MAAMgB,IAAN,CAAWY,SAAX,CAAV;WACO,YAAY;YACX,CAACY,IAAIT,MAAT,EAAiB;mBACN,IAAP;;YAEAY,IAAIH,IAAI,CAAJ,EAAOV,KAAP,CAAa,IAAb,EAAmBF,SAAnB,CAAR;aACK,IAAIgB,IAAI,CAAb,EAAgBA,IAAIJ,IAAIT,MAAxB,EAAgCa,GAAhC,EAAqC;gBAC7BJ,IAAII,CAAJ,EAAO5B,IAAP,CAAY,IAAZ,EAAkB2B,CAAlB,CAAJ;;eAEGA,CAAP;KARJ;CAFJ;AAcA,SAASE,GAAT,GAAe;;AAIf,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,QAA3C,EAAqD;aAQxCC,IAAT,CAAc,OAAd,EAAuBD,QAAvB;WAEO,YAAY;iBACNE,cAAT,CAAwB,OAAxB,EAAiCF,QAAjC;KADJ;;AAKJ,SAASG,YAAT,CAAsBxD,EAAtB,EAA0ByD,QAA1B,EAAoCC,MAApC,EAA4C;QACpCC,WAAWF,SAASzD,EAAT,EAAa4D,WAAb,CAAf;QACIC,UAAU,KAAd;QAEIC,UAAU,IAAd;QACIC,aAAa,IAAjB;QAEI3D,EAAEY,UAAF,CAAa2C,QAAb,CAAJ,EAA4B;kBACdA,QAAV;KADJ,MAGK,IAAIA,YAAY,IAAhB,EAAsB;kBACbA,SAASK,SAAnB;qBACa,CAACL,SAASM,eAAvB;;OAGDC,IAAH,CAAQR,MAAR;WAGOS,YAAP,CAAoBC,IAApB,CAAyBC,MAAzB;aAEST,WAAT,CAAqBU,KAArB,EAA4B;YACpBZ,OAAOa,WAAX,EAAwB;;;YAIpBD,KAAJ,EAAW;mBACAE,KAAP,CAAa,IAAIC,WAAJ,CAAgBH,KAAhB,CAAb;;YAGAA,SAAS,IAAT,IAAiBP,UAArB,EAAiC;;mBAEtBW,GAAP;;;aAICL,MAAT,GAAkB;YACVR,OAAJ,EAAa;;;kBAIH,IAAV;YAEIC,OAAJ,EAAa;;;YAIT9D,GAAG2E,MAAP,EAAe;eACRA,MAAH,CAAUjB,MAAV;;;;AAKZ,SAASkB,aAAT,CAAuBC,OAAvB,EAAgC;QACxBC,eAAe,KAAnB;WACO1E,EAAE,UAAUgE,IAAV,EAAgB;kBAMXS,QAAQE,IAAR,CAAa,UAAUC,KAAV,EAAiB;2BACrB,IAAf;cACE1D,YAAF,CAAe,YAAY;qBAClB,IAAL,EAAW0D,KAAX;qBACK,IAAL,EAAWlD,GAAX;aAFJ;mBAIO,IAAP;SANM,EAOP,UAAUmD,GAAV,EAAe;2BACC,IAAf;cACE3D,YAAF,CAAe,YAAY;qBAClB2D,GAAL;qBACK,IAAL,EAAWnD,GAAX;aAFJ;mBAIO,IAAP;SAbM,CAAV;YAkBI1B,EAAEY,UAAF,CAAa6D,QAAQ,SAAR,CAAb,CAAJ,EAAsC;oBAC1B,SAAR,EAAmB,YAAY;oBACvB,CAACC,YAAL,EAAmB;sBACbxD,YAAF,CAAe,YAAY;6BAClB,IAAL,EAAWQ,GAAX;qBADJ;;uBAIG,IAAP;aANJ;;KAzBD,CAAP;;AAqCJ,SAASoD,cAAT,CAAwBC,EAAxB,EAA4B;WACjB/E,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;YACvBC,QAAJ,EAAcC,OAAd;YACI;uBACWH,GAAGC,IAAH,EAAX;SADJ,CAGA,OAAOH,GAAP,EAAY;sBACEA,GAAV;;YAGAK,OAAJ,EAAa;iBACJA,OAAL;iBACK,IAAL,EAAWlF,EAAE0B,GAAb;SAFJ,MAIK,IAAIuD,SAASE,IAAb,EAAmB;gBAChB,CAACnF,EAAEU,WAAF,CAAcuE,SAASL,KAAvB,CAAL,EAAoC;qBAK3B,IAAL,EAAWK,SAASL,KAApB;;iBAEC,IAAL,EAAW5E,EAAE0B,GAAb;SARC,MAUA;iBACI,IAAL,EAAWuD,SAASL,KAApB;;;KAxBD,CAAP;;AA+BJ,SAASQ,UAAT,CAAoBtF,WAApB,EAAiC;QACzBuF,kBAAmB,OAAOvF,WAA9B;QACIwF,MAAJ;QAEID,oBAAoB,UAAxB,EAAoC;iBACvBvF,WAAT;KADJ,MAGK,IAAIuF,oBAAoB,QAAxB,EAAkC;iBAC1B,YAAY;mBACVpF,MAAMgB,IAAN,CAAWY,SAAX,EAAsB,CAAtB,EAAyB/B,WAAzB,CAAP;SADJ;KADC,MAKA,IAAIE,EAAEe,OAAF,CAAUjB,WAAV,CAAJ,EAA4B;iBACpB,YAAY;gBACb8B,OAAOC,SAAX;mBACO/B,YAAYyF,MAAZ,CAAmB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,GAArB,EAA0B;oBAC5CD,IAAJ,IAAY7D,KAAK8D,GAAL,CAAZ;uBACOF,GAAP;aAFG,EAGJ,EAHI,CAAP;SAFJ;KADC,MASA;iBACQ,UAAU7E,CAAV,EAAa;mBAASA,CAAP;SAAxB;;WAGG2E,MAAP;;AAGJ,SAASK,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BzB,KAA/B,EAAsCE,GAAtC,EAA2CwB,eAA3C,EAA4D;QACpDC,SAAS,IAAb;QACIC,IAAIJ,IAAIK,OAAJ,CAAY,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CkB,WAAJ;YACIrB,GAAJ,EAAS;gBACDiB,eAAJ,EAAqB;8BACH1B,MAAMnD,IAAN,CAAW4E,IAAX,EAAiB,IAAIxB,WAAJ,CAAgBQ,GAAhB,CAAjB,CAAd;aADJ,MAGK;oBACGsB,IAAJ,CAAS,OAAT,EAAkBtB,GAAlB;8BACc,IAAd;;SANR,MASK,IAAIlE,MAAMe,GAAV,EAAe;gBACZT,IAAJ,CAAS4E,IAAT;;SADC,MAIA;0BACazB,MAAMnD,IAAN,CAAW4E,IAAX,EAAiBlF,CAAjB,CAAd;;YAGAuF,gBAAgB,KAApB,EAA2B;;SAA3B,MAGK;qBACQlB,IAAT;;KAvBA,CAAR;SA2BKoB,EAAL,CAAQ,OAAR,EAAiBC,eAAjB;QAIItC,YAAJ,CAAiBC,IAAjB,CAAsB,YAAY;aACzBb,cAAL,CAAoB,OAApB,EAA6BkD,eAA7B;KADJ;SAIKF,IAAL,CAAU,MAAV,EAAkBP,GAAlB;MAEEG,MAAF;WACOF,IAAP;aAESQ,eAAT,GAA2B;YACnBN,MAAJ,EAAY;gBACJO,YAAYP,MAAhB;qBACS,IAAT;;;;;AAMZ,SAASQ,aAAT,CAAuBjD,MAAvB,EAA+Bc,KAA/B,EAAsC;QAC9B,CAACA,KAAL,EAAY;gBACAd,OAAOc,KAAf;;WAGG,UAAUS,GAAV,EAAelE,CAAf,EAAkB;cAEfM,IAAN,CAAWqC,MAAX,EAAmBuB,MAAM,IAAIR,WAAJ,CAAgBQ,GAAhB,CAAN,GAA6BlE,CAAhD;KAFJ;;AAYJ,SAASZ,MAAT,cAA4BH,EAA5B,cAA4CC,SAA5C,cAAmEC,WAAnE,EAAgF;QAExEF,MAAMI,EAAEwG,QAAF,CAAW5G,EAAX,CAAV,EAA0B;eAEfA,EAAP;;iBAGSqB,IAAb,CAAkB,IAAlB;QACIwF,OAAO,IAAX;SAKKC,kBAAL,GAA0B,IAA1B;SAEKC,EAAL,GAAU,CAAC,KAAKC,KAAKC,MAAL,EAAN,EAAqBC,MAArB,CAA4B,CAA5B,EAA+B,CAA/B,CAAV;SACKC,MAAL,GAAc,IAAd;SACKC,SAAL,GAAiB,EAAjB;SACKC,SAAL,GAAiB,EAAjB;SACKC,UAAL,GAAkB,EAAlB;SACKC,UAAL,GAAkB,EAAlB;SACKpD,YAAL,GAAoB,EAApB;SACKqD,YAAL,GAAoB,KAApB;SACKjD,WAAL,GAAmB,KAAnB;SACKkD,SAAL,GAAiB,IAAjB;SACKC,YAAL,GAAoB,KAApB;SACKC,cAAL,GAAsB,KAAtB;SACKC,cAAL,GAAsB,KAAtB;SAMKC,yBAAL,GAAiC,KAAjC;SACKC,MAAL,GAAc,IAAd;SAGKC,QAAL,GAAgB,IAAhB;SAEKvB,EAAL,CAAQ,aAAR,EAAuB,UAAUwB,EAAV,EAAc;YAC7BA,OAAO,MAAX,EAAmB;iBACVR,YAAL,GAAoB,IAApB;cACElG,YAAF,CAAeuF,KAAKV,MAAL,CAAYtF,IAAZ,CAAiBgG,IAAjB,CAAf;SAFJ,MAIK,IAAImB,OAAO,KAAX,EAAkB;iBAGdR,YAAL,GAAoB,IAApB;;KARR;SAaKhB,EAAL,CAAQ,gBAAR,EAA0B,UAAUwB,EAAV,EAAc;YAChCA,OAAO,KAAP,IAAgBA,OAAO,MAA3B,EAAmC;gBAC3BC,gBAAgBpB,KAAKqB,SAAL,CAAe,KAAf,EAAsB9F,MAA1C;gBACI+F,iBAAiBtB,KAAKqB,SAAL,CAAe,MAAf,EAAuB9F,MAA5C;gBACI6F,gBAAgBE,cAAhB,KAAmC,CAAvC,EAA0C;qBAEjCX,YAAL,GAAoB,KAApB;;;KANZ;QAWIpH,EAAEU,WAAF,CAAcd,EAAd,CAAJ,EAAuB;eAEZ,IAAP;KAFJ,MAIK,IAAII,EAAEe,OAAF,CAAUnB,EAAV,CAAJ,EAAmB;aACfoH,SAAL,GAAiBpH,GAAGqC,MAAH,CAAU,CAACP,GAAD,CAAV,CAAjB;eACO,IAAP;KAFC,MAIA,IAAI1B,EAAEY,UAAF,CAAahB,EAAb,CAAJ,EAAsB;aAClBoI,UAAL,GAAkBpI,EAAlB;aACKqI,eAAL,GAAuB1B,cAAc,IAAd,CAAvB;aACK2B,eAAL,GAAuB,UAAUlC,CAAV,EAAa;gBAC5BS,KAAKtC,WAAT,EAAsB;sBACZ,IAAIgE,KAAJ,CAAU,4BAAV,CAAN;;gBAGAnC,CAAJ,EAAO;oBAICoC,UAAU3B,KAAKM,MAAnB;oBACI,CAACqB,OAAL,EAAc;yBACLC,KAAL;;qBAECjE,KAAL,CAAW,IAAIkE,cAAJ,CAAmBtC,CAAnB,CAAX;oBACI,CAACoC,OAAL,EAAc;yBACLG,OAAL,CAAa,KAAb;;aAVR,MAaK;qBACIC,kBAAL,GAA0B,KAA1B;;gBAEA,CAAC/B,KAAKM,MAAV,EAAkB;qBACTwB,OAAL,CAAa,KAAb;;SAtBR;eA0BO,IAAP;KA7BC,MA+BA,IAAIvI,EAAEa,QAAF,CAAWjB,EAAX,CAAJ,EAAoB;YAEjBI,EAAEY,UAAF,CAAahB,GAAGwG,EAAhB,KAAuBpG,EAAEY,UAAF,CAAahB,GAAGkE,IAAhB,CAA3B,EAAkD;gBAC1CT,WAAWrD,EAAEY,UAAF,CAAaf,SAAb,IAA0BA,SAA1B,GAAsCkD,uBAArD;yBACanD,EAAb,EAAiByD,QAAjB,EAA2BoD,IAA3B;mBACO,IAAP;SAHJ,MAKK,IAAIzG,EAAEY,UAAF,CAAahB,GAAG+E,IAAhB,CAAJ,EAA2B;mBAErBH,cAAc5E,EAAd,CAAP;;aAMC,IAAII,EAAEY,UAAF,CAAahB,GAAGoF,IAAhB,CAAJ,EAA2B;uBAErBF,eAAelF,EAAf,CAAP;aAFC,MAIA,IAAI,CAACI,EAAEU,WAAF,CAAcY,QAAQmH,MAAtB,CAAD,IAAkC7I,GAAG0B,QAAQmH,MAAR,CAAeC,QAAlB,CAAtC,EAAmE;uBAE7D5D,eAAelF,GAAG0B,QAAQmH,MAAR,CAAeC,QAAlB,GAAf,CAAP;aAFC,MAIA;sBACK,IAAIP,KAAJ,CACF,6DAA8D,OAAOvI,EADnE,CAAN;;KAxBH,MA6BA,IAAII,EAAEc,QAAF,CAAWlB,EAAX,CAAJ,EAAoB;YACjB0F,SAASF,WAAWtF,WAAX,CAAb;YAEI6I,gBAAgB,YAAY;gBACxBnD,MAAMF,OAAOvD,KAAP,CAAa,IAAb,EAAmBF,SAAnB,CAAV;iBACKuC,KAAL,CAAWoB,GAAX;SAFJ;kBAKUY,EAAV,CAAaxG,EAAb,EAAiB+I,aAAjB;YACIC,eAAe/I,UAAUsD,cAAV;WACGtD,UAAUoE,MADhC,CATqB;YAYjB2E,YAAJ,EAAkB;iBACT7E,YAAL,CAAkBC,IAAlB,CAAuB,YAAW;6BACjB/C,IAAb,CAAkBpB,SAAlB,EAA6BD,EAA7B,EAAiC+I,aAAjC;aADJ;;eAKG,IAAP;KAlBC,MAoBA;cACK,IAAIR,KAAJ,CACF,2CAA4C,OAAOvI,EADjD,CAAN;;;AAKRL,SAASQ,MAAT,EAAiBP,YAAjB;AAeAQ,EAAE6I,EAAF,GAAO,UAAUlI,CAAV,EAAa;WACTX,EAAE,CAACW,CAAD,CAAF,CAAP;CADJ;AAmBAX,EAAE8I,SAAF,GAAc,UAAU5E,KAAV,EAAiB;WACpBlE,EAAE,UAAUgE,IAAV,EAAgB;aAChBE,KAAL;aACK,IAAL,EAAWlE,EAAE0B,GAAb;KAFG,CAAP;CADJ;AAWA,SAASqH,YAAT,CAAsBC,IAAtB,EAA4B;QACpB3G,IAAItC,OAAOI,SAAP,CAAiB6I,IAAjB,CAAR;QACI9G,IAAIG,EAAEL,MAAV;MACEgH,IAAF,IAAUhJ,EAAE8B,MAAF,CAASI,IAAI,CAAb,EAAgB,YAAY;YAC9BN,OAAO3B,MAAMgB,IAAN,CAAWY,SAAX,CAAX;YACImE,IAAIhG,EAAE4B,KAAKqH,GAAL,EAAF,CAAR;eACO5G,EAAEN,KAAF,CAAQiE,CAAR,EAAWpE,IAAX,CAAP;KAHM,CAAV;;AAWJ,SAASyC,WAAT,CAAqBQ,GAArB,EAA0B;SACjBqE,uBAAL,GAA+B,IAA/B;SACKhF,KAAL,GAAaW,GAAb;;AAOJ,SAASyD,cAAT,CAAwBa,EAAxB,EAA4B;SACnBC,0BAAL,GAAkC,IAAlC;SACKD,EAAL,GAAUA,EAAV;;AAiBJnJ,EAAEwG,QAAF,GAAa,UAAU7F,CAAV,EAAa;WACfX,EAAEa,QAAF,CAAWF,CAAX,KAAiB,CAAC,CAACA,EAAE+F,kBAA5B;CADJ;AAIA1G,EAAEqJ,cAAF,GAAmB,UAAU1I,CAAV,EAAa;WACrBX,EAAEa,QAAF,CAAWF,CAAX,KAAiB,CAAC,CAACA,EAAEuI,uBAA5B;CADJ;AAIAlJ,EAAEsJ,iBAAF,GAAsB,UAAU3I,CAAV,EAAa;WACxBX,EAAEa,QAAF,CAAWF,CAAX,KAAiB,CAAC,CAACA,EAAEyI,0BAA5B;CADJ;AAQArJ,OAAOI,SAAP,CAAiBoJ,KAAjB,GAAyB,UAAU1E,GAAV,EAAelE,CAAf,EAAkB;QAEnC6I,KAAJ;QAEI,KAAKtC,UAAL,CAAgBlF,MAApB,EAA4B;gBAChB6C,MAAM,IAAIR,WAAJ,CAAgBQ,GAAhB,CAAN,GAA6BlE,CAArC;YAGI8I,YAAY,KAAKvC,UAArB;aACK,IAAIrE,IAAI,CAAR,EAAW6G,MAAMD,UAAUzH,MAAhC,EAAwCa,IAAI6G,GAA5C,EAAiD7G,GAAjD,EAAsD;sBACxCA,CAAV,EAAauB,KAAb,CAAmBoF,KAAnB;;;QAGJ,KAAKrC,UAAL,CAAgBnF,MAApB,EAA4B;gBAChB6C,MAAM,IAAIR,WAAJ,CAAgBQ,GAAhB,CAAN,GAA6BlE,CAArC;YAGIgJ,YAAY,KAAKxC,UAArB;aACK,IAAIyC,IAAI,CAAR,EAAWC,OAAOF,UAAU3H,MAAjC,EAAyC4H,IAAIC,IAA7C,EAAmDD,GAAnD,EAAwD;sBAC1CA,CAAV,EAAaxF,KAAb,CAAmBoF,KAAnB;;;QAGJ,KAAKpC,YAAT,EAAuB;YACfvC,GAAJ,EAAS;iBACAsB,IAAL,CAAU,OAAV,EAAmBtB,GAAnB;SADJ,MAGK,IAAIlE,MAAMe,GAAV,EAAe;iBACXyE,IAAL,CAAU,KAAV;SADC,MAGA;iBACIA,IAAL,CAAU,MAAV,EAAkBxF,CAAlB;;;QAIJA,MAAMe,GAAV,EAAe;aACNoI,MAAL;;CAnCR;AAwCA/J,OAAOI,SAAP,CAAiB2J,MAAjB,GAA0B,SAASA,MAAT,GAAkB;QACpC,KAAKC,KAAT,EAAgB;;;SAIX1B,KAAL;SAEK0B,KAAL,GAAa,IAAb;QAEI,KAAKrC,MAAT,EAAiB;YACTA,SAAS,KAAKA,MAAlB;eACOsC,eAAP,CAAuB,IAAvB;eACOC,eAAP,CAAuB,IAAvB;;QAGApH,CAAJ,EAAO6G,GAAP;QAGID,YAAY,KAAKvC,UAArB;SACKrE,IAAI,CAAJ,EAAO6G,MAAMD,UAAUzH,MAA5B,EAAoCa,IAAI6G,GAAxC,EAA6C7G,GAA7C,EAAkD;aACzCmH,eAAL,CAAqBP,UAAU5G,CAAV,CAArB;;QAIAqH,QAAJ;SACKrH,IAAI,CAAJ,EAAO6G,MAAM,KAAKvC,UAAL,CAAgBnF,MAAlC,EAA0Ca,IAAI6G,GAA9C,EAAmD7G,GAAnD,EAAwD;mBACzC,KAAKsE,UAAL,CAAgBtE,CAAhB,CAAX;YACIqH,SAASxC,MAAT,KAAoB,IAAxB,EAA8B;qBACjBA,MAAT,GAAkB,IAAlB;;;SAIH7E,IAAI,CAAJ,EAAO6G,MAAM,KAAK3F,YAAL,CAAkB/B,MAApC,EAA4Ca,IAAI6G,GAAhD,EAAqD7G,GAArD,EAA0D;aACjDkB,YAAL,CAAkBlB,CAAlB,EAAqB5B,IAArB,CAA0B,IAA1B;;SAGCyG,MAAL,GAAc,IAAd;SACKR,UAAL,GAAkB,EAAlB;SACKF,SAAL,GAAiB,EAAjB;SACKC,SAAL,GAAiB,EAAjB;SACKI,SAAL,GAAiB,IAAjB;SACKW,UAAL,GAAkB,IAAlB;SACKb,UAAL,GAAkB,EAAlB;SACKpD,YAAL,GAAoB,EAApB;CA3CJ;AA4DAhE,OAAOI,SAAP,CAAiBkI,KAAjB,GAAyB,YAAY;SAE5BtB,MAAL,GAAc,IAAd;QACI,CAAC,KAAKO,YAAN,IAAsB,KAAKI,MAA/B,EAAuC;aAC9BA,MAAL,CAAYyC,kBAAZ;;CAJR;AAaApK,OAAOI,SAAP,CAAiBgK,kBAAjB,GAAsC,YAAY;QAC1C,CAAC,KAAKjD,UAAL,CAAgBlF,MAArB,EAA6B;aACpBwF,cAAL,GAAsB,KAAtB;aACKa,KAAL;;;SAGC,IAAIxF,IAAI,CAAR,EAAW6G,MAAM,KAAKxC,UAAL,CAAgBlF,MAAtC,EAA8Ca,IAAI6G,GAAlD,EAAuD7G,GAAvD,EAA4D;YACpD,KAAKqE,UAAL,CAAgBrE,CAAhB,EAAmBkE,MAAvB,EAA+B;iBACtBS,cAAL,GAAsB,KAAtB;iBACKa,KAAL;;;;SAKHE,OAAL,CAAa,KAAb;CAdJ;AAsBAxI,OAAOI,SAAP,CAAiBiK,eAAjB,GAAmC,YAAY;QAEvCV,MAAM,KAAK1C,SAAL,CAAehF,MAAzB;QACIa,IAAI,CAAR;WACOA,IAAI6G,GAAJ,IAAW,CAAC,KAAK3C,MAAxB,EAAgC;YACxBpG,IAAI,KAAKqG,SAAL,CAAenE,CAAf,CAAR;YACI7C,EAAEqJ,cAAF,CAAiB1I,CAAjB,CAAJ,EAAyB;iBAChB4I,KAAL,CAAW5I,EAAEuD,KAAb;SADJ,MAGK,IAAIlE,EAAEsJ,iBAAF,CAAoB3I,CAApB,CAAJ,EAA4B;iBACxB0J,SAAL,CAAe1J,EAAEwI,EAAjB;SADC,MAGA;iBACII,KAAL,CAAW,IAAX,EAAiB5I,CAAjB;;;;SAKHqG,SAAL,CAAesD,MAAf,CAAsB,CAAtB,EAAyBzH,CAAzB;CAlBJ;AA0BA9C,OAAOI,SAAP,CAAiBoK,aAAjB,GAAiC,YAAY;QAErCb,MAAM,KAAKzC,SAAL,CAAejF,MAAzB;QACIa,IAAI,CAAR;WACOA,IAAI6G,GAAJ,IAAW,CAAC,KAAK3C,MAAxB,EAAgC;YACxBpG,IAAI,KAAKsG,SAAL,CAAepE,CAAf,CAAR;YACI7C,EAAEqJ,cAAF,CAAiB1I,CAAjB,CAAJ,EAAyB;mBACdR,SAAP,CAAiBoJ,KAAjB,CAAuBtI,IAAvB,CAA4B,IAA5B,EAAkCN,EAAEuD,KAApC;SADJ,MAGK,IAAIlE,EAAEsJ,iBAAF,CAAoB3I,CAApB,CAAJ,EAA4B;iBACxB0J,SAAL,CAAe1J,EAAEwI,EAAjB;SADC,MAGA;mBACMhJ,SAAP,CAAiBoJ,KAAjB,CAAuBtI,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,EAAwCN,CAAxC;;;;SAKHsG,SAAL,CAAeqD,MAAf,CAAsB,CAAtB,EAAyBzH,CAAzB;CAlBJ;AAqBA9C,OAAOI,SAAP,CAAiBoI,OAAjB,GAA2B,UAAUiC,iBAAV,EAA6B;QAEhD,KAAKC,eAAL,IAAwB,KAAKlD,cAAjC,EAAiD;aAGxCC,cAAL,GAAsB,IAAtB;;;SAGCiD,eAAL,GAAuB,IAAvB;OACG;aAEMjD,cAAL,GAAsB,KAAtB;aACKT,MAAL,GAAc,KAAd;aAGKwD,aAAL;aAGKH,eAAL;YAGI,CAAC,KAAKrD,MAAN,IAAgB,CAAC,KAAKO,YAA1B,EAAwC;gBAEhC,KAAKI,MAAT,EAAiB;oBACT,CAAC,KAAKD,yBAAN,IAAmC+C,iBAAvC,EAA0D;yBAEjD9C,MAAL,CAAYyC,kBAAZ;;;iBAIH,IAAI,KAAKnC,UAAT,EAAqB;yBAEjB0C,aAAL;iBAFC,MAIA;yBAEIvE,IAAL,CAAU,OAAV;;;KA3BZ,QA8BS,KAAKqB,cA9Bd;SA+BKiD,eAAL,GAAuB,KAAvB;CAxCJ;AA0DA1K,OAAOI,SAAP,CAAiB4F,MAAjB,GAA0B,YAAY;SAC7BwC,OAAL,CAAa,IAAb;CADJ;AAqBAxI,OAAOI,SAAP,CAAiBmE,GAAjB,GAAuB,YAAY;QAC3B,KAAKH,WAAT,EAAsB;;;SAKjBC,KAAL,CAAW1C,GAAX;CANJ;AA+DA3B,OAAOI,SAAP,CAAiB2D,IAAjB,GAAwB,UAAU+B,IAAV,EAAgB8E,OAAhB,EAAyB;cACnCA,WAAW,EAArB;QAGIC,WAAW/E,SAASzE,QAAQC,MAAjB,IAA2BwE,SAASzE,QAAQyJ,MAA5C,IAAsDF,QAAQrG,GAAR,KAAgB,KAArF;QAEIA,GAAJ;QACIsG,QAAJ,EAAc;cACJ/E,KAAKvB,GAAX;KADJ,MAGK;cACKxB,GAAN;;WAGG6C,WAAW,IAAX,EAAiBE,IAAjB,EAAuBA,KAAKzB,KAA5B,EAAmCE,GAAnC,EAAwC,KAAxC,CAAP;CAdJ;AA8BAvE,OAAOI,SAAP,CAAiB2K,OAAjB,GAA2B,YAAY;QAC/B,KAAKf,KAAT,EAAgB;;;QAIZ,CAAC,KAAK5F,WAAV,EAAuB;aACdG,GAAL;;SAGCwF,MAAL;CATJ;AAkBA/J,OAAOI,SAAP,CAAiBuK,aAAjB,GAAiC,YAAY;QAGrC,KAAKlC,kBAAT,EAA6B;;;SAGxBA,kBAAL,GAA0B,IAA1B;SACKR,UAAL,CAAgB,KAAKC,eAArB,EAAsC,KAAKC,eAA3C;CAPJ;AAiBAnI,OAAOI,SAAP,CAAiBkK,SAAjB,GAA6B,UAAUlB,EAAV,EAAc;SAGlCnJ,EAAEmJ,EAAF,CAAL;WAEOA,GAAG9B,SAAV,EAAqB;aACZ8B,GAAG9B,SAAR;;OAGDH,UAAH,GAAgB,KAAKA,UAAL,CAAgB6D,GAAhB,CAAoB,UAAUC,CAAV,EAAa;UAC3CtD,MAAF,GAAWyB,EAAX;eACO6B,CAAP;KAFY,CAAhB;SAMK9D,UAAL,GAAkB,EAAlB;OASG+D,gBAAH,GAAsB,KAAKA,gBAAL,IAAyB,IAA/C;OACGA,gBAAH,CAAoB5D,SAApB,GAAgC8B,EAAhC;QAEI,KAAKpC,MAAT,EAAiB;WACVsB,KAAH;KADJ,MAGK;aACIA,KAAL;WACG8B,kBAAH;;CAhCR;AA2CApK,OAAOI,SAAP,CAAiB+K,YAAjB,GAAgC,UAAUlF,CAAV,EAAa;QACrC,KAAKkB,UAAL,CAAgBlF,MAApB,EAA4B;cAClB,IAAImG,KAAJ,CACF,oEADE,CAAN;;MAIFT,MAAF,GAAW,IAAX;SACKR,UAAL,CAAgBlD,IAAhB,CAAqBgC,CAArB;SACKmE,kBAAL;CARJ;AAeApK,OAAOI,SAAP,CAAiB6J,eAAjB,GAAmC,UAAUhE,CAAV,EAAa;QACxCJ,MAAM,IAAV;WACOA,IAAIyB,SAAX,EAAsB;cACZzB,IAAIyB,SAAV;;QAEAH,UAAJ,GAAiBtB,IAAIsB,UAAJ,CAAeiE,MAAf,CAAsB,UAAUH,CAAV,EAAa;eACzCA,MAAMhF,CAAb;KADa,CAAjB;QAGIA,EAAE0B,MAAF,KAAa9B,GAAjB,EAAsB;UAChB8B,MAAF,GAAW,IAAX;;QAEAyC,kBAAJ;CAXJ;AAkBApK,OAAOI,SAAP,CAAiB8J,eAAjB,GAAmC,UAAUjE,CAAV,EAAa;SACvCmB,UAAL,GAAkB,KAAKA,UAAL,CAAgBgE,MAAhB,CAAuB,UAAUC,CAAV,EAAa;eAC3CA,MAAMpF,CAAb;KADc,CAAlB;QAGIA,EAAE0B,MAAF,KAAa,IAAjB,EAAuB;UACjBA,MAAF,GAAW,IAAX;;CALR;AA6CA3H,OAAOI,SAAP,CAAiB8F,OAAjB,GAA2B,UAAU5D,CAAV,EAAa;QAChCoE,OAAO,IAAX;WACOA,KAAKY,SAAZ,EAAuB;eACZZ,KAAKY,SAAZ;;QAEArB,IAAI,IAAIjG,MAAJ,EAAR;MAGEsL,YAAF,GAAiB,IAAjB;QAEIC,KAAJ;QACIC,WAAJ;QACIhC,QAAQvD,EAAEuD,KAAd;QACIvF,OAAO,UAAUa,GAAV,EAAelE,CAAf,EAAkB;YAErBqF,EAAE7B,WAAN,EAAmB;kBACT,IAAIgE,KAAJ,CAAU,kCAAV,CAAN;;YAEAxH,MAAMe,GAAV,EAAe;cAETyC,WAAF,GAAgB,IAAhB;cACEsD,yBAAF,GAA8B,KAA9B;iBACKuC,eAAL,CAAqBhE,CAArB;gBAIIsF,KAAJ,EAAW;kBACL/C,OAAF,CAAU,KAAV;;;YAGJvC,EAAEe,MAAN,EAAc;gBACNlC,GAAJ,EAAS;kBACHoC,SAAF,CAAYjD,IAAZ,CAAiB,IAAIK,WAAJ,CAAgBQ,GAAhB,CAAjB;aADJ,MAGK;kBACCoC,SAAF,CAAYjD,IAAZ,CAAiBrD,CAAjB;;SALR,MAQK;kBACKM,IAAN,CAAW+E,CAAX,EAAcnB,GAAd,EAAmBlE,CAAnB;;KA1BR;QA6BIqE,OAAO,UAAUwG,EAAV,EAAc;UAEnB/D,yBAAF,GAA8B,KAA9B;YACIzB,EAAE7B,WAAN,EAAmB;kBACT,IAAIgE,KAAJ,CAAU,4BAAV,CAAN;;YAEAqD,EAAJ,EAAQ;gBAIApD,UAAUpC,EAAEe,MAAhB;gBACI,CAACqB,OAAL,EAAc;kBACRC,KAAF;;cAEFjE,KAAF,CAAQ,IAAIkE,cAAJ,CAAmBkD,EAAnB,CAAR;gBACI,CAACpD,OAAL,EAAc;kBACRG,OAAF,CAAU,KAAV;;SAVR,MAaK,IAAI+C,KAAJ,EAAW;cACV/C,OAAF,CAAU,KAAV;SADC,MAGA;0BACa,IAAd;;KAvBR;MA0BEgB,KAAF,GAAU,UAAU1E,GAAV,EAAelE,CAAf,EAAkB;gBAChB,KAAR;sBACc,KAAd;UACE4G,cAAF,GAAmB,IAAnB;UAEE1C,GAAF,EAAOlE,CAAP,EAAUqD,IAAV,EAAgBgB,IAAhB;UAEEuC,cAAF,GAAmB,KAAnB;gBACQ,IAAR;YAGI,CAACgE,WAAD,IAAgB5K,MAAMe,GAA1B,EAA+B;cACzB+F,yBAAF,GAA8B,IAA9B;cACEY,KAAF;;YAGArC,EAAEwB,cAAN,EAAsB;cAChBA,cAAF,GAAmB,KAAnB;cACEe,OAAF,CAAU,KAAV;;KAlBR;SAqBK2C,YAAL,CAAkBlF,CAAlB;SACKyF,iBAAL,GAAyB,IAAzB;WACOzF,CAAP;CA3FJ;AA6FA+C,aAAa,SAAb;AAqBAhJ,OAAOI,SAAP,CAAiBuL,IAAjB,GAAwB,UAAUrJ,CAAV,EAAa;QAC7B2D,IAAI,KAAKC,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkB;UACjC+G,MAAF,CAASsC,eAAT,CAAyBhE,CAAzB;UACEnB,GAAF,EAAOlE,CAAP;KAFI,CAAR;MAIEgG,EAAF,GAAO,UAAUX,EAAEW,EAAnB;MACEZ,MAAF;CANJ;AAyCAhG,OAAOI,SAAP,CAAiBiE,KAAjB,GAAyB,UAAUzD,CAAV,EAAa;QAC9B,KAAKwD,WAAT,EAAsB;cACZ,IAAIgE,KAAJ,CAAU,kCAAV,CAAN;;QAKAxH,MAAMX,EAAE0B,GAAR,IAAe,CAAC,KAAK2J,YAAzB,EAAuC;aAC9BlH,WAAL,GAAmB,IAAnB;;QAGA,KAAK4C,MAAT,EAAiB;aACRC,SAAL,CAAehD,IAAf,CAAoBrD,CAApB;KADJ,MAGK;YACGX,EAAEqJ,cAAF,CAAiB1I,CAAjB,CAAJ,EAAyB;iBAChB4I,KAAL,CAAW5I,EAAEuD,KAAb;SADJ,MAGK;iBACIqF,KAAL,CAAW,IAAX,EAAiB5I,CAAjB;;;WAGD,CAAC,KAAKoG,MAAb;CAtBJ;AAiEA,IAAI4E,uBAAuBrM,KAAU,YAAY,EAAtB,EACxB,sJADwB,CAA3B;AAGAS,OAAOI,SAAP,CAAiByL,IAAjB,GAAwB,YAAY;QAC5B,KAAKH,iBAAT,EAA4B;;;QAKxBzF,IAAI,IAAIjG,MAAJ,EAAR;MACE4G,EAAF,GAAO,UAAUX,EAAEW,EAAnB;MACEe,MAAF,GAAW,IAAX;SACKR,UAAL,CAAgBlD,IAAhB,CAAqBgC,CAArB;SACKmE,kBAAL;WACOnE,CAAP;CAXJ;AAkCAjG,OAAOI,SAAP,CAAiB0L,OAAjB,GAA2B,YAAY;QAC/B7F,IAAI,IAAIjG,MAAJ,EAAR;MACE4G,EAAF,GAAO,aAAaX,EAAEW,EAAtB;MACEe,MAAF,GAAW,IAAX;MACEJ,YAAF,GAAiB,IAAjB;SACKH,UAAL,CAAgBnD,IAAhB,CAAqBgC,CAArB;WACOA,CAAP;CANJ;AAiCAjG,OAAOI,SAAP,CAAiB2L,MAAjB,GAA0B,UAAUzJ,CAAV,EAAa;WAC5B,KAAK4D,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;cACHA,GAAF,EAAOb,IAAP;;SADJ,MAIK,IAAIrD,MAAMe,GAAV,EAAe;iBACX,IAAL,EAAWA,GAAX;SADC,MAGA;iBACI,IAAL,EAAWf,CAAX;;;KATD,CAAP;CADJ;AAeAoI,aAAa,QAAb;AAiBAhJ,OAAOI,SAAP,CAAiB4L,WAAjB,GAA+B,UAAU1J,CAAV,EAAa;WACjC,KAAK4D,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;cACHA,GAAF,EAAOb,IAAP;iBACK,IAAL,EAAWtC,GAAX;SAFJ,MAIK,IAAIf,MAAMe,GAAV,EAAe;iBACX,IAAL,EAAWA,GAAX;SADC,MAGA;iBACI,IAAL,EAAWf,CAAX;;;KATD,CAAP;CADJ;AAeAoI,aAAa,aAAb;AAwBAhJ,OAAOI,SAAP,CAAiB6L,IAAjB,GAAwB,UAAU3J,CAAV,EAAa;QAC7BoE,OAAO,IAAX;QACIT,IAAI,KAAKC,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC3CH,GAAJ,EAAS;iBACAsB,IAAL,CAAU,OAAV,EAAmBtB,GAAnB;SADJ,MAGK,IAAIlE,MAAMe,GAAV,EAAe;iBACX,IAAL,EAAWA,GAAX;SADC,MAGA;cACCf,CAAF;;;KARA,CAAR;MAYEoF,MAAF;WACOC,CAAP;CAfJ;AAiBA+C,aAAa,MAAb;AAwBAhJ,OAAOI,SAAP,CAAiB4B,KAAjB,GAAyB,UAAUM,CAAV,EAAa;WAC3B,KAAK4J,OAAL,CAAa,UAAUrK,IAAV,EAAgB;UAC9BG,KAAF,CAAQ,IAAR,EAAcH,IAAd;KADG,CAAP;CADJ;AAKAmH,aAAa,OAAb;AAqBAhJ,OAAOI,SAAP,CAAiB8L,OAAjB,GAA2B,UAAU5J,CAAV,EAAa;QAChCoE,OAAO,IAAX;WACO,KAAKyF,OAAL,GAAeR,IAAf,CAAoB,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;YACrCkE,GAAJ,EAAS;iBACAsB,IAAL,CAAU,OAAV,EAAmBtB,GAAnB;SADJ,MAGK;cACClE,CAAF;;KALD,CAAP;CAFJ;AAqCAZ,OAAOI,SAAP,CAAiBgF,IAAjB,GAAwB,UAAU9C,CAAV,EAAa;QAC7B,KAAK0H,KAAT,EAAgB;;eAEL,IAAP;;QAEAtD,OAAO,IAAX;WACO,KAAKR,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAsB,IAAL,CAAU,OAAV,EAAmBtB,GAAnB;SADJ,MAGK,IAAIlE,MAAMe,GAAV,EAAe;;SAAf,MAGA;;;KAPF,EAUJqE,MAVI,EAAP;CANJ;AA0CAhG,OAAOI,SAAP,CAAiBgM,UAAjB,GAA8B,UAAUC,EAAV,EAAc;QACpCxH,KAAJ;QACIyH,WAAW,KAAf,CAFwC;SAInCpG,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YACnCH,GAAJ,EAAS;iBACA,IAAL,EAAWnD,GAAX;gBACI2K,QAAJ,EAAc;mBACP,IAAIlE,KAAJ,CAAU,sDAAV,CAAH;aADJ,MAGK;mBACEtD,GAAH;;SANR,MASK,IAAIlE,MAAMe,GAAV,EAAe;gBACZ2K,QAAJ,EAAc;mBACP,IAAH,EAASzH,KAAT;aADJ,MAGK;;;SAJJ,MAQA;gBACGyH,QAAJ,EAAc;qBACL,IAAL,EAAW3K,GAAX;mBACG,IAAIyG,KAAJ,CAAU,sDAAV,CAAH;aAFJ,MAIK;wBACOxH,CAAR;2BACW,IAAX;;;;KAzBZ,EA6BGoF,MA7BH;CAJJ;AA0DA,IAAIuG,mBAAmBhN,KAAU,YAAW,EAArB,EACpB,4EADoB,CAAvB;AAGAS,OAAOI,SAAP,CAAiB4K,GAAjB,GAAuB,UAAU1I,CAAV,EAAa;QAC5B,CAACrC,EAAEY,UAAF,CAAayB,CAAb,CAAL,EAAsB;;YAEdkK,MAAMlK,CAAV;YACI,YAAY;mBACLkK,GAAP;SADJ;;WAIG,KAAKtG,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACXmD,GAAL,EAAUlE,CAAV;SADC,MAGA;gBACG6L,KAAJ,EAAWC,KAAX;gBACI;wBACQpK,EAAE1B,CAAF,CAAR;aADJ,CAGA,OAAO+L,CAAP,EAAU;wBACEA,CAAR;;iBAECD,KAAL,EAAYD,KAAZ;;;KAhBD,CAAP;CARJ;AA6BAzD,aAAa,KAAb;AAwBAhJ,OAAOI,SAAP,CAAiBwM,IAAjB,GAAwB,UAAUtK,CAAV,EAAa;WAC1B,KAAK0I,GAAL,CAAS,UAAUpK,CAAV,EAAa;UACvBA,CAAF;eACOA,CAAP;KAFG,CAAP;CADJ;AAMAoI,aAAa,MAAb;AAcAhJ,OAAOI,SAAP,CAAiByM,GAAjB,GAAuB7M,OAAOI,SAAP,CAAiBwM,IAAxC;AACA3M,EAAE4M,GAAF,GAAQ5M,EAAE2M,IAAV;AAqBA5M,OAAOI,SAAP,CAAiB0M,SAAjB,GAA6B,UAAUC,GAAV,EAAeC,EAAf,EAAmB;QACxCD,MAAM,CAAV,EAAa;cACH,IAAI3E,KAAJ,CAAU,0CAA0C2E,GAApD,CAAN;;QAEAE,OAAO,CAAX;WACO,KAAK/G,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACX,IAAL,EAAWA,GAAX;SADC,MAGA;gBACGsL,OAAOF,GAAX,EAAgB;;qBAEP,IAAL,EAAWnM,CAAX;;aAFJ,MAKK;2BACU,YAAY;2BACZ,CAAP;yBACK,IAAL,EAAWA,CAAX;;iBAFJ,EAIGoM,EAJH;;;KAfL,CAAP;CALJ;AA6BAhE,aAAa,WAAb;AAmBAhJ,OAAOI,SAAP,CAAiB8M,OAAjB,GAA2B,UAAU5K,CAAV,EAAa;WAC7B,KAAK0I,GAAL,CAAS1I,CAAT,EAAY6K,QAAZ,EAAP;CADJ;AAGAnE,aAAa,SAAb;AAuBAhJ,OAAOI,SAAP,CAAiBgN,KAAjB,GAAyB,UAAUC,IAAV,EAAgB;WAC9B,KAAKnH,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACXmD,GAAL,EAAUlE,CAAV;SADC,MAGA,IAAIX,EAAEa,QAAF,CAAWF,CAAX,CAAJ,EAAmB;iBACf,IAAL,EAAWA,EAAEyM,IAAF,CAAX;;SADC,MAIA;iBACI,IAAIjF,KAAJ,CACD,0BAA2B,OAAOxH,CADjC,CAAL;;;KAbD,CAAP;CADJ;AAqBAoI,aAAa,OAAb;AAOA,IAAIsE,aAAarN,EAAE2B,KAAF,CAAQ,UAAS2L,QAAT,EAAmB3M,CAAnB,EAAsB;QACvCX,EAAEa,QAAF,CAAWF,CAAX,CAAJ,EAAmB;eACR2M,SAAS3M,CAAT,CAAP;KADJ,MAGK;cACK,IAAIwH,KAAJ,CACF,0BAA2B,OAAOxH,CADhC,CAAN;;CALS,CAAjB;AA2CAZ,OAAOI,SAAP,CAAiBoN,MAAjB,GAA0B,UAAUlL,CAAV,EAAa;WAC5B,KAAK0I,GAAL,CAASsC,WAAW,UAAU1M,CAAV,EAAa;YAChC6M,MAAM,EAAV;YAGIC,OAAOlN,QAAQF,OAAOqN,MAAP,CAAc,IAAd,CAAR,GAA8B,EAAzC;YACIC,MAAMhN,CAAV,CALoC;iBAM3BiN,UAAT,CAAqBR,IAArB,EAA2B;gBACnBK,KAAKL,IAAL,MAAe,IAAf,IAAuB/K,EAAE+K,IAAF,EAAQzM,EAAEyM,IAAF,CAAR,CAA3B,EAA6C;oBACrCA,IAAJ,IAAYzM,EAAEyM,IAAF,CAAZ;qBACKA,IAAL,IAAa,IAAb;;;YAGJ7M,KAAJ,EAAW;eACJ;uBACQsN,mBAAP,CAA2BF,GAA3B,EAAgCG,OAAhC,CAAwCF,UAAxC;sBACMvN,OAAO0N,cAAP,CAAsBJ,GAAtB,CAAN;aAFJ,QAGSA,GAHT;SADJ,MAMK;iBACI,IAAIK,CAAT,IAAcrN,CAAd,EAAiB;2BACFqN,CAAX;;;eAGDR,GAAP;KAvBY,CAAT,CAAP;CADJ;AA2BAzE,aAAa,QAAb;AAsCAhJ,OAAOI,SAAP,CAAiB8N,IAAjB,GAAwB,UAAUC,UAAV,EAAsB;WACnC,KAAKnD,GAAL,CAASsC,WAAW,UAAS1M,CAAT,EAAY;YAC/B6M,MAAM,EAAV;aACK,IAAI3K,IAAI,CAAR,EAAWb,SAASkM,WAAWlM,MAApC,EAA4Ca,IAAIb,MAAhD,EAAwDa,GAAxD,EAA6D;gBACrDsL,IAAID,WAAWrL,CAAX,CAAR;gBACIsL,KAAKxN,CAAT,EAAY;oBACJwN,CAAJ,IAASxN,EAAEwN,CAAF,CAAT;;;eAGDX,GAAP;KARY,CAAT,CAAP;CADJ;AAYAzE,aAAa,MAAb;AAgBAhJ,OAAOI,SAAP,CAAiBgL,MAAjB,GAA0B,UAAU9I,CAAV,EAAa;WAC5B,KAAK4D,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACXmD,GAAL,EAAUlE,CAAV;SADC,MAGA;gBACG6L,KAAJ,EAAWC,KAAX;gBACI;wBACQpK,EAAE1B,CAAF,CAAR;aADJ,CAGA,OAAO+L,CAAP,EAAU;wBACEA,CAAR;;gBAGAD,KAAJ,EAAW;qBACFA,KAAL;aADJ,MAGK,IAAID,KAAJ,EAAW;qBACP,IAAL,EAAW7L,CAAX;;;;KArBL,CAAP;CADJ;AA4BAoI,aAAa,QAAb;AAoBAhJ,OAAOI,SAAP,CAAiBiO,UAAjB,GAA8B,UAAU/L,CAAV,EAAa;WAChC,KAAK4K,OAAL,CAAa,UAAUtM,CAAV,EAAa;eACtB0B,EAAE1B,CAAF,EAAK0N,IAAL,CAAU,CAAV,EAAaC,SAAb,CAAuBC,aAAvB,EACNtB,OADM,CACE,UAAUuB,IAAV,EAAgB;mBACdxO,EAAEwO,OAAO,CAAC7N,CAAD,CAAP,GAAa,EAAf,CAAP;SAFG,CAAP;KADG,CAAP;aAOS4N,WAAT,GAAuB;eACZvO,EAAE,UAAUgE,IAAV,EAAgB;iBAChB,IAAImE,KAAJ,CAAU,wCAAV,CAAL;iBACK,IAAL,EAAWnI,EAAE0B,GAAb;SAFG,CAAP;;CATR;AAeAqH,aAAa,YAAb;AAgBAhJ,OAAOI,SAAP,CAAiBsO,MAAjB,GAA0B,UAAUpM,CAAV,EAAa;WAC5B,KAAK8I,MAAL,CAAYnL,EAAEwC,OAAF,CAAUxC,EAAE0O,GAAZ,EAAiBrM,CAAjB,CAAZ,CAAP;CADJ;AAGA0G,aAAa,QAAb;AAgCAhJ,OAAOI,SAAP,CAAiBwO,IAAjB,GAAwB,UAAUtM,CAAV,EAAa;WAC1B,KAAK8I,MAAL,CAAY9I,CAAZ,EAAegM,IAAf,CAAoB,CAApB,CAAP;CADJ;AAGAtF,aAAa,MAAb;AA4BAhJ,OAAOI,SAAP,CAAiByO,SAAjB,GAA6B,UAAUC,KAAV,EAAiB;WACnC,KAAKC,KAAL,CAAWD,KAAX,EAAkBR,IAAlB,CAAuB,CAAvB,CAAP;CADJ;AAGAtF,aAAa,WAAb;AA+BAhJ,OAAOI,SAAP,CAAiB4O,KAAjB,GAAyB,UAAU1M,CAAV,EAAa;QAC9B2M,SAAShP,EAAEc,QAAF,CAAWuB,CAAX,IAAgBrC,EAAEiP,GAAF,CAAM5M,CAAN,CAAhB,GAA2BA,CAAxC;WACO,KAAKkD,MAAL,CAAY,EAAZ,EAAgB,UAAU2J,CAAV,EAAa9D,CAAb,EAAgB;YAC/B+D,MAAMH,OAAO5D,CAAP,CAAV;YACI,CAAChL,OAAOa,IAAP,CAAYiO,CAAZ,EAAeC,GAAf,CAAL,EAA0B;cAAIA,GAAF,IAAS,EAAT;;UAC1BA,GAAF,EAAOnL,IAAP,CAAYoH,CAAZ;eACO8D,CAAP;KAJG,CAAP;CAFJ;AASAnG,aAAa,OAAb;AAcAhJ,OAAOI,SAAP,CAAiBiP,OAAjB,GAA2B,YAAY;WAC5B,KAAKjE,MAAL,CAAY,UAAUxK,CAAV,EAAa;eACrBA,CAAP;KADG,CAAP;CADJ;AAKAoI,aAAa,SAAb;AA8BAhJ,OAAOI,SAAP,CAAiB2O,KAAjB,GAAyB,UAAUD,KAAV,EAAiB;WAC/B,KAAK1D,MAAL,CAAY,UAAUxK,CAAV,EAAa;aACvB,IAAIqN,CAAT,IAAca,KAAd,EAAqB;gBACblO,EAAEqN,CAAF,MAASa,MAAMb,CAAN,CAAb,EAAuB;uBACZ,KAAP;;;eAGD,IAAP;KANG,CAAP;CADJ;AAUAjF,aAAa,OAAb;AA8BAhJ,OAAOI,SAAP,CAAiBkP,MAAjB,GAA0B,UAAUC,OAAV,EAAmB;QACrCC,UAAU,EAAd;WACO,KAAKtJ,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACXmD,GAAL,EAAUlE,CAAV;SADC,MAGA;gBACG8M,OAAO,KAAX;gBACI+B,MAAJ;iBACK,IAAI3M,IAAI,CAAR,EAAW6G,MAAM6F,QAAQvN,MAA9B,EAAsCa,IAAI6G,GAA1C,EAA+C7G,GAA/C,EAAoD;oBAC5C;2BACOyM,QAAQ3O,CAAR,EAAW4O,QAAQ1M,CAAR,CAAX,CAAP;iBADJ,CAGA,OAAO6J,CAAP,EAAU;6BACGA,CAAT;2BACO,IAAP;;oBAEAe,IAAJ,EAAU;;;;gBAIV,CAACA,IAAL,EAAW;wBACCzJ,IAAR,CAAarD,CAAb;qBACK,IAAL,EAAWA,CAAX;;gBAEA6O,MAAJ,EAAY;qBACHA,MAAL;;;;KA5BL,CAAP;CAFJ;AAoCAzG,aAAa,QAAb;AAuBAhJ,OAAOI,SAAP,CAAiBsP,IAAjB,GAAwB,YAAY;QAC5B,CAACzP,EAAEU,WAAF,CAAcY,QAAQoO,GAAtB,CAAL,EAAiC;YACzBH,UAAU,IAAIjO,QAAQoO,GAAZ,EAAd;YACIC,OAAOJ,QAAQI,IADnB;eAGO,KAAK1J,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;gBAC1CH,GAAJ,EAAS;qBACAA,GAAL;;aADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;qBACXmD,GAAL,EAAUlE,CAAV;;iBAIC,IAAIA,MAAMA,CAAV,EAAa;yBACT,IAAL,EAAWA,CAAX;;iBADC,MAIA;4BACOiP,GAAR,CAAYjP,CAAZ;wBACI4O,QAAQI,IAAR,GAAeA,IAAnB,EAAyB;+BACdJ,QAAQI,IAAf;6BACK,IAAL,EAAWhP,CAAX;;;;SAlBL,CAAP;;WAwBG,KAAK0O,MAAL,CAAY,UAAUQ,CAAV,EAAaC,CAAb,EAAgB;eACxBD,MAAMC,CAAb;KADG,CAAP;CA7BJ;AAiCA/G,aAAa,MAAb;AAkCAhJ,OAAOI,SAAP,CAAiB4P,OAAjB,GAA2B,YAAY;QAC/BC,WAAW,CAAf;QACIC,IAAI,EAAR;QACIC,WAAW,KAAf;aAESC,SAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BzK,GAA/B,EAAoC5B,IAApC,EAA0CgB,IAA1C,EAAgD;YACxC0G,IAAJ,CAAS,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;gBACnBkE,GAAJ,EAAS;qBACAA,GAAL;0BACUuL,KAAV,EAAiBC,GAAjB,EAAsBzK,GAAtB,EAA2B5B,IAA3B,EAAiCgB,IAAjC;aAFJ,MAIK,IAAIrE,MAAMX,EAAE0B,GAAZ,EAAiB;oBACd,CAACwO,QAAL,EAAe;+BACA,IAAX;yBACK,IAAL,EAAWxO,GAAX;;aAHH,MAMA;;kBAEC0O,KAAF,IAAWzP,CAAX;oBACIqP,aAAaK,GAAjB,EAAsB;yBACb,IAAL,EAAWJ,CAAX;;;;SAfZ;;WAsBG,KAAK/D,OAAL,GAAee,OAAf,CAAuB,UAAUqD,KAAV,EAAiB;YACvC,CAACA,MAAMtO,MAAX,EAAmB;mBACRhC,EAAE,EAAF,CAAP;;eAGGA,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;uBAChB,CAAX;gBACI,EAAJ;iBACK,IAAInC,IAAI,CAAR,EAAWb,SAASsO,MAAMtO,MAA/B,EAAuCa,IAAIb,MAA3C,EAAmDa,GAAnD,EAAwD;0BAC1CA,CAAV,EAAab,MAAb,EAAqBsO,MAAMzN,CAAN,CAArB,EAA+BmB,IAA/B,EAAqCgB,IAArC;;SAJD,CAAP;KALG,CAAP;CA5BJ;AA2CA+D,aAAa,SAAb;AAuBAhJ,OAAOI,SAAP,CAAiBoQ,MAAjB,GAA0B,UAAUC,EAAV,EAAc;WAC7BxQ,EAAE,CAAC,IAAD,CAAF,EAAUiC,MAAV,CAAiBjC,EAAEwQ,EAAF,EAAMzF,GAAN,CAAU/K,CAAV,CAAjB,EAA+B+P,OAA/B,EAAP;CADJ;AAGAhH,aAAa,QAAb;AAiBAhJ,OAAOI,SAAP,CAAiBsQ,GAAjB,GAAuB,UAAUD,EAAV,EAAc;WAC1BxQ,EAAE,CAAC,IAAD,EAAOA,EAAEwQ,EAAF,CAAP,CAAF,EAAiBT,OAAjB,EAAP;CADJ;AAGAhH,aAAa,KAAb;AAcAhJ,OAAOI,SAAP,CAAiBuQ,KAAjB,GAAyB,UAAUxO,CAAV,EAAa;WAC3B,KAAKyO,oBAAL,CAA0B,CAAC,CAA3B,EAA8BzO,CAA9B,CAAP;CADJ;AAGA6G,aAAa,OAAb;AAuBAhJ,OAAOI,SAAP,CAAiBwQ,oBAAjB,GAAwC,UAAU5D,EAAV,EAAc7K,CAAd,EAAiB;QACjD0O,UAAU,EAAd;QACIC,OADJ;WAGO,KAAK5K,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;gBACZkP,QAAQ5O,MAAR,GAAiB,CAArB,EAAwB;qBACf,IAAL,EAAW4O,OAAX;6BACaC,OAAb;;iBAGC,IAAL,EAAWnP,GAAX;SANC,MAQA;oBACOsC,IAAR,CAAarD,CAAb;gBAEIiQ,QAAQ5O,MAAR,KAAmBE,CAAvB,EAA0B;qBACjB,IAAL,EAAW0O,OAAX;0BACU,EAAV;6BACaC,OAAb;aAHJ,MAKK,IAAID,QAAQ5O,MAAR,KAAmB,CAAnB,IAAwB+K,MAAM,CAAlC,EAAqC;0BAC5B+D,WAAW,YAAY;yBACxB,IAAL,EAAWF,OAAX;8BACU,EAAV;iBAFM,EAGP7D,EAHO,CAAV;;;;KAtBL,CAAP;CAJJ;AAoCAhE,aAAa,sBAAb;AAkBAhJ,OAAOI,SAAP,CAAiB4Q,WAAjB,GAA+B,UAAUC,SAAV,EAAqB;QAC5CC,UAAU,KAAd;WACO,KAAKhL,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACX,IAAL,EAAWA,GAAX;SADC,MAGA;gBACGuP,OAAJ,EAAa;qBACJ,IAAL,EAAWD,SAAX;aADJ,MAGK;0BACS,IAAV;;iBAEC,IAAL,EAAWrQ,CAAX;;;KAfD,CAAP;CAFJ;AAsBAoI,aAAa,aAAb;AAkBAhJ,OAAOI,SAAP,CAAiB+Q,OAAjB,GAA2B,UAAUC,GAAV,EAAe;QAClCC,UAAU,IAAI3R,OAAJ,EAAd;QACI4R,SAAS,KAAb;aAESC,KAAT,CAAe3Q,CAAf,EAAkBqD,IAAlB,EAAwB;iBACX,CAACqN,UAAU,EAAX,IAAiBD,QAAQhN,KAAR,CAAczD,CAAd,CAA1B;YACI4Q,SAASF,OAAOG,KAAP,CAAaL,GAAb,CAAb;iBACSI,OAAOtI,GAAP,EAAT;eAEO6E,OAAP,CAAe,UAAU2D,KAAV,EAAiB;iBACvB,IAAL,EAAWA,KAAX;SADJ;;WAKG,KAAKxL,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;gBACZ1B,EAAEc,QAAF,CAAWuQ,MAAX,CAAJ,EAAwB;sBACdD,QAAQ9M,GAAR,EAAN,EAAqBN,IAArB;qBACK,IAAL,EAAWqN,MAAX;;iBAEC,IAAL,EAAW3P,GAAX;SALC,MAOA;kBACKf,CAAN,EAASqD,IAAT;;;KAbD,CAAP;CAdJ;AAgCA+E,aAAa,SAAb;AAcAhJ,OAAOI,SAAP,CAAiBqR,KAAjB,GAAyB,YAAY;WAC1B,KAAKN,OAAL,CAAa,OAAb,CAAP;CADJ;AAGAnI,aAAa,OAAb;AAkBAhJ,OAAOI,SAAP,CAAiBF,KAAjB,GAAyB,UAASyR,KAAT,EAAgBpN,GAAhB,EAAqB;QACtC8L,QAAQ,CAAZ;YACQ,OAAOsB,KAAP,IAAgB,QAAhB,IAA4BA,QAAQ,CAApC,GAAwC,CAAxC,GAA4CA,KAApD;UACM,OAAOpN,GAAP,IAAc,QAAd,GAAyBqN,QAAzB,GAAoCrN,GAA1C;QAEIoN,UAAU,CAAV,IAAepN,QAAQqN,QAA3B,EAAqC;eAC1B,IAAP;KADJ,MAGK,IAAID,SAASpN,GAAb,EAAkB;eACZtE,EAAE,EAAF,CAAP;;QAEAgG,IAAI,KAAKC,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC3CG,OAAOxE,MAAMe,GAAjB;YACImD,GAAJ,EAAS;iBACAA,GAAL;SADJ,MAGK,IAAI,CAACM,IAAD,IAASiL,WAAWsB,KAAxB,EAA+B;iBAC3B,IAAL,EAAW/Q,CAAX;;YAGA,CAACwE,IAAD,IAASiL,QAAQ9L,GAArB,EAA0B;;SAA1B,MAGK;iBACI,IAAL,EAAW5C,GAAX;;KAbA,CAAR;MAgBEiF,EAAF,GAAO,WAAWX,EAAEW,EAApB;WACOX,CAAP;CA5BJ;AA8BA+C,aAAa,OAAb;AAeAhJ,OAAOI,SAAP,CAAiBkO,IAAjB,GAAwB,UAAUnM,CAAV,EAAa;QAC7B8D,IAAI,KAAK/F,KAAL,CAAW,CAAX,EAAciC,CAAd,CAAR;MACEyE,EAAF,GAAO,UAAUX,EAAEW,EAAnB;WACOX,CAAP;CAHJ;AAKA+C,aAAa,MAAb;AAgBAhJ,OAAOI,SAAP,CAAiByR,IAAjB,GAAwB,UAAU1P,CAAV,EAAa;WAC1B,KAAKjC,KAAL,CAAWiC,CAAX,EAAcyP,QAAd,CAAP;CADJ;AAGA5I,aAAa,MAAb;AAaAhJ,OAAOI,SAAP,CAAiB0R,IAAjB,GAAwB,YAAY;WACzB,KAAKxD,IAAL,CAAU,CAAV,CAAP;CADJ;AAGAtF,aAAa,MAAb;AAaAhJ,OAAOI,SAAP,CAAiB2R,IAAjB,GAAwB,YAAY;QAC5BC,UAAU,EAAd;QACIC,OAAOD,OAAX;WACO,KAAK9L,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;gBACZsQ,SAASD,OAAb,EAAsB;qBACb,IAAL,EAAWC,IAAX;;iBAEC,IAAL,EAAWtQ,GAAX;SAJC,MAMA;mBACMf,CAAP;;;KAZD,CAAP;CAHJ;AAoBAoI,aAAa,MAAb;AA8BAhJ,OAAOI,SAAP,CAAiB8R,MAAjB,GAA0B,UAAU5P,CAAV,EAAa;WAC5B,KAAK6J,OAAL,GAAegG,MAAf,CAAsB,MAAtB,EAA8B,CAAC7P,CAAD,CAA9B,EAAmC6K,QAAnC,EAAP;CADJ;AAGAnE,aAAa,QAAb;AAeAhJ,OAAOI,SAAP,CAAiBgS,IAAjB,GAAwB,YAAY;WACzB,KAAKF,MAAL,EAAP;CADJ;AAGAlJ,aAAa,MAAb;AA+DAhJ,OAAOI,SAAP,CAAiBiS,OAAjB,GAA2B,UAAUC,MAAV,EAAkB;QACrCC,MAAJ;QAEItS,EAAEY,UAAF,CAAayR,MAAb,CAAJ,EAA0B;eACfA,OAAO,IAAP,CAAP;KADJ,MAGK;eACMhK,KAAP;iBACSrI,GAAT;aACKoG,EAAL,CAAQ,OAAR,EAAiBmM,QAAjB;eACOnM,EAAP,CAAU,OAAV,EAAmBmM,QAAnB;eACO,KAAKzO,IAAL,CAAUuO,MAAV,EAAkBvO,IAAlB,CAAuBwO,MAAvB,CAAP;;aAGKC,QAAT,CAAkB1N,GAAlB,EAAuB;eACZT,KAAP,CAAa,IAAIC,WAAJ,CAAgBQ,GAAhB,CAAb;;CAfR;AAkBAkE,aAAa,SAAb;AAiCA/I,EAAEwS,QAAF,GAAa,0BAA0B;QAC/B,CAAC3Q,UAAUG,MAAf,EAAuB;eACZhC,GAAP;;QAEA0R,QAAQ7P,UAAU,CAAV,CAAZ;QAA0B4Q,IAA1B;QAAgCC,aAAhC;QACI,CAAC1S,EAAEwG,QAAF,CAAWkL,KAAX,CAAD,IAAsB,CAAC1R,EAAEY,UAAF,CAAa8Q,MAAM3L,MAAnB,CAA3B,EAAuD;gBAE3C/F,GAAR;wBACgB0R,KAAhB;eACOzR,MAAMgB,IAAN,CAAWY,SAAX,CAAP;KAJJ,MAMK;wBAEe7B,EAAE0R,KAAF,CAAhB;eACOzR,MAAMgB,IAAN,CAAWY,SAAX,EAAsB,CAAtB,CAAP;;QAGAyC,MAAMmO,KAAKlN,MAAL,CAAY,UAAUK,GAAV,EAAeC,IAAf,EAAqB;eAChCD,IAAIwM,OAAJ,CAAYvM,IAAZ,CAAP;KADM,EAEP6M,aAFO,CAAV;QAIIC,UAAU3S,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;YAC9B0G,IAAJ,CAAS,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;iBAClBkE,GAAL,EAAUlE,CAAV;gBACIA,MAAMe,GAAV,EAAe;;;SAFnB;KADU,CAAd;YASQ0C,KAAR,GAAgB,UAAUzD,CAAV,EAAa;eAClB+Q,MAAMtN,KAAN,CAAYzD,CAAZ,CAAP;KADJ;YAIQ2D,GAAR,GAAc,YAAY;eACfoN,MAAMpN,GAAN,EAAP;KADJ;UAIM8B,EAAN,CAAS,OAAT,EAAkB,YAAY;gBAClBD,IAAR,CAAa,OAAb;KADJ;WAIOwM,OAAP;CA1CJ;AAoEA5S,OAAOI,SAAP,CAAiB+M,QAAjB,GAA4B,YAAY;QAChC0F,WAAW,IAAf;QACIC,OAAO,IAAX;WACO7S,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;aACtB0G,IAAL,CAAU,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;gBACpBkE,GAAJ,EAAS;qBACAA,GAAL;;aADJ,MAIK,IAAI7E,EAAEe,OAAF,CAAUJ,CAAV,CAAJ,EAAkB;oBACfmS,kBAAJ,EAAwB;sBAElBhF,OAAF,CAAU,UAAUvL,CAAV,EAAa;6BACd,IAAL,EAAWA,CAAX;qBADJ;iBAFJ,MAMK;yBACI,IAAL,EAAW5B,CAAX;;;aARH,MAYA,IAAIX,EAAEwG,QAAF,CAAW7F,CAAX,CAAJ,EAAmB;oBAChBmS,kBAAJ,EAAwB;2BAEbnS,CAAP;;iBAFJ,MAKK;yBAEI,IAAL,EAAWA,CAAX;;;aARH,MAYA,IAAIA,MAAMe,GAAV,EAAe;oBACZoR,kBAAJ,EAAwB;yBACf,IAAL,EAAWpR,GAAX;iBADJ,MAGK;2BAEMkR,QAAP;;;aANH,MAUA;oBACGE,kBAAJ,EAAwB;yBAGf,IAAI3K,KAAJ,CACD,0BAA2B,OAAOxH,CADjC,CAAL;;iBAHJ,MAQK;yBACI,IAAL,EAAWA,CAAX;;;;SAjDZ;KADG,CAAP;aAyDSmS,gBAAT,GAA4B;eACjBD,SAASD,QAAhB;;CA7DR;AAgEA7J,aAAa,UAAb;AAcAhJ,OAAOI,SAAP,CAAiB4S,MAAjB,GAA0BhT,OAAOI,SAAP,CAAiB+M,QAA3C;AACAlN,EAAE+S,MAAF,GAAW/S,EAAEkN,QAAb;AAsBAnN,OAAOI,SAAP,CAAiB6S,OAAjB,GAA2B,YAAY;QAC/BH,OAAO,IAAX;QACII,QAAQ,EAAZ;WACOjT,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;aACtB0G,IAAL,CAAU,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;gBACpBkE,GAAJ,EAAS;qBACAA,GAAL;;;;gBAIA7E,EAAEe,OAAF,CAAUJ,CAAV,CAAJ,EAAkB;oBACVX,EAAEW,CAAF,CAAJ;;gBAEAX,EAAEwG,QAAF,CAAW7F,CAAX,CAAJ,EAAmB;sBACTqD,IAAN,CAAW6O,IAAX;uBACOlS,CAAP;;aAFJ,MAKK,IAAIA,MAAMe,GAAV,EAAe;oBACZuR,MAAMjR,MAAV,EAAkB;2BACPiR,MAAMhK,GAAN,EAAP;;iBADJ,MAIK;yBACI,IAAL,EAAWvH,GAAX;;aANH,MASA;qBACI,IAAL,EAAWf,CAAX;;;SAxBR;KADG,CAAP;CAHJ;AAkCAoI,aAAa,SAAb;AAoBAhJ,OAAOI,SAAP,CAAiB+S,QAAjB,GAA4B,UAAUhR,CAAV,EAAa;QACjCwF,SAAS,IAAb;QACIyL,UAAU,EAAd;QACIpJ,QAAQ,KAAZ;QACIqJ,iBAAiB,KAArB;QAEI,OAAOlR,CAAP,KAAa,QAAjB,EAA2B;cACjB,IAAIiG,KAAJ,CAAU,sCAAV,CAAN;;QAGAjG,KAAK,CAAT,EAAY;cACF,IAAIiG,KAAJ,CAAU,yCAAV,CAAN;;WAGGnI,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;YACvBmO,QAAQnR,MAAR,GAAiBE,CAAjB,IAAsB,CAAC6H,KAAvB,IAAgC,CAACqJ,cAArC,EAAqD;6BAEhC,IAAjB;mBACO1H,IAAP,CAAY,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;iCACT,KAAjB;oBACIkE,GAAJ,EAAS;yBACAA,GAAL;iBADJ,MAGK,IAAIlE,MAAMe,GAAV,EAAe;4BACR,IAAR;iBADC,MAGA,IAAI,CAAC1B,EAAEwG,QAAF,CAAW7F,CAAX,CAAL,EAAoB;yBAChB,IAAIwH,KAAJ,CAAU,0BAA2B,OAAOxH,CAA5C,CAAL;iBADC,MAGA;wBAEG0S,MAAM,EAAC/P,QAAQ3C,CAAT,EAAY0Q,QAAQ,EAApB,EAAV;4BACQrN,IAAR,CAAaqP,GAAb;sBACEpN,OAAF,CAAU,UAAUqN,IAAV,EAAgB/Q,CAAhB,EAAmBgR,KAAnB,EAA0BC,KAA1B,EAAiC;4BACnCL,QAAQ,CAAR,MAAeE,GAAnB,EAAwB;gCAEhB9Q,MAAMb,GAAV,EAAe;wCAGH+R,KAAR;;;6BAHJ,MAQK;qCAEIH,IAAL,EAAW/Q,CAAX;;yBAZR,MAeK;gCAEG8O,MAAJ,CAAWrN,IAAX,CAAgB,CAACsP,IAAD,EAAO/Q,CAAP,CAAhB;;4BAEAA,MAAMb,GAAV,EAAe;;;qBApBnB,EAwBGqE,MAxBH;;uBA2BGf,MAAP;aA1CJ;SAHJ,MAgDK,IAAI,CAACmO,QAAQnR,MAAT,IAAmB+H,KAAvB,EAA8B;iBAE1B,IAAL,EAAWrI,GAAX;;iBAGKgS,WAAT,GAAuB;mBACZP,QAAQnR,MAAR,IAAkBmR,QAAQ,CAAR,EAAW9B,MAAX,CAAkBrP,MAA3C,EAAmD;oBAC3C2R,MAAMR,QAAQ,CAAR,EAAW9B,MAArB;qBACK,IAAIxO,IAAI,CAAb,EAAgBA,IAAI8Q,IAAI3R,MAAxB,EAAgCa,GAAhC,EAAqC;wBAC7B8Q,IAAI9Q,CAAJ,EAAO,CAAP,MAAcnB,GAAlB,EAAuB;gCAEX+R,KAAR;;qBAFJ,MAKK;6BAEI1R,KAAL,CAAW,IAAX,EAAiB4R,IAAI9Q,CAAJ,CAAjB;;;oBAGJb,MAAJ,GAAa,CAAb;;;KApEL,CAAP;CAdJ;AAwFA+G,aAAa,UAAb;AAkBAhJ,OAAOI,SAAP,CAAiBmO,SAAjB,GAA6B,UAAUkC,EAAV,EAAc;QACnC5Q,KAAK,IAAT;WACOA,GAAGqG,OAAH,CAAW,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YACxCH,GAAJ,EAAS;iBAEAA,GAAL;;SAFJ,MAKK,IAAIlE,MAAMe,GAAV,EAAe;gBAEZ1B,EAAEY,UAAF,CAAa4P,EAAb,CAAJ,EAAsB;qBACbA,IAAL;aADJ,MAGK;qBACIA,EAAL;;SANH,MASA;iBAEI,IAAL,EAAW7P,CAAX;iBACKf,EAAL;;KAlBD,CAAP;CAFJ;AAwBAmJ,aAAa,WAAb;AAcAhJ,OAAOI,SAAP,CAAiByT,MAAjB,GAA0B,UAAUrR,CAAV,EAAa;WAC5B,KAAK0D,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CrE,MAAMe,GAAV,EAAe;iBACN,IAAL,EAAWa,CAAX;iBACK,IAAL,EAAWvC,EAAE0B,GAAb;SAFJ,MAIK;iBACImD,GAAL,EAAUlE,CAAV;;;KAND,CAAP;CADJ;AAYAoI,aAAa,QAAb;AA4BAhJ,OAAOI,SAAP,CAAiBoF,MAAjB,GAA0B,UAAU0K,CAAV,EAAa5N,CAAb,EAAgB;WAI/B,KAAK4D,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CrE,MAAMe,GAAV,EAAe;iBACN,IAAL,EAAWuO,CAAX;iBACK,IAAL,EAAWjQ,EAAE0B,GAAb;SAFJ,MAIK,IAAImD,GAAJ,EAAS;iBACLA,GAAL;;SADC,MAIA;gBACG;oBACIxC,EAAE4N,CAAF,EAAKtP,CAAL,CAAJ;aADJ,CAGA,OAAO+L,CAAP,EAAU;qBACDA,CAAL;qBACK,IAAL,EAAW1M,EAAE0B,GAAb;;;;;KAfL,CAAP;CAJJ;AA2BAqH,aAAa,QAAb;AAeAhJ,OAAOI,SAAP,CAAiB0T,OAAjB,GAA2B,UAAUxR,CAAV,EAAa;QAChCoE,OAAO,IAAX;WACOzG,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;aACtB0G,IAAL,CAAU,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;gBACpBkE,GAAJ,EAAS;qBACAA,GAAL;;aADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;qBACX,IAAL,EAAWA,GAAX;aADC,MAGA;qBACI+E,KAAKlB,MAAL,CAAY5E,CAAZ,EAAe0B,CAAf,CAAL;;SATR;KADG,CAAP;CAFJ;AAiBA0G,aAAa,SAAb;AAiBAhJ,OAAOI,SAAP,CAAiB+L,OAAjB,GAA2B,YAAY;QAC/BtM,KAAK,EAAT;WACO,KAAKqG,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACX,IAAL,EAAW9B,EAAX;iBACK,IAAL,EAAW8B,GAAX;SAFC,MAIA;eACEsC,IAAH,CAAQrD,CAAR;;;KAVD,CAAP;CAFJ;AAiBAoI,aAAa,SAAb;AAuBAhJ,OAAOI,SAAP,CAAiB2T,IAAjB,GAAwB,UAAU7D,CAAV,EAAa5N,CAAb,EAAgB;QAChCoE,OAAO,IAAX;WACOzG,EAAE,CAACiQ,CAAD,CAAF,EAAOhO,MAAP,CACHwE,KAAKR,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YACnCrE,MAAMe,GAAV,EAAe;iBACN,IAAL,EAAW1B,EAAE0B,GAAb;SADJ,MAGK,IAAImD,GAAJ,EAAS;iBACLA,GAAL;;SADC,MAIA;gBACG;oBACIxC,EAAE4N,CAAF,EAAKtP,CAAL,CAAJ;aADJ,CAGA,OAAO+L,CAAP,EAAU;qBACDA,CAAL;qBACK,IAAL,EAAW1M,EAAE0B,GAAb;;;iBAIC,IAAL,EAAWuO,CAAX;;;KAlBR,CADG,CAAP;CAFJ;AA2BAlH,aAAa,MAAb;AAeAhJ,OAAOI,SAAP,CAAiB4T,KAAjB,GAAyB,UAAU1R,CAAV,EAAa;QAC9BoE,OAAO,IAAX;WACOzG,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;aACtB0G,IAAL,CAAU,UAAU7G,GAAV,EAAelE,CAAf,EAAkB;gBACpBkE,GAAJ,EAAS;qBACAA,GAAL;;aADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;qBACX,IAAL,EAAWA,GAAX;aADC,MAGA;qBACI+E,KAAKqN,IAAL,CAAUnT,CAAV,EAAa0B,CAAb,CAAL;;SATR;KADG,CAAP;CAFJ;AAiBA0G,aAAa,OAAb;AAEA,SAASiL,iBAAT,CAA2BhQ,IAA3B,EAAiC;SACxBA,IAAL,GAAYA,IAAZ;;AAGJgQ,kBAAkB7T,SAAlB,CAA4B,mBAA5B,IAAmD,YAAY;WACpD,KAAK6D,IAAZ;CADJ;AAIAgQ,kBAAkB7T,SAAlB,CAA4B,qBAA5B,IAAqD,UAAU6D,IAAV,EAAgB;WAG1DA,IAAP;CAHJ;AAMAgQ,kBAAkB7T,SAAlB,CAA4B,mBAA5B,IAAmD,UAAU6D,IAAV,EAAgBiQ,KAAhB,EAAuB;SACjE,IAAL,EAAWA,KAAX;WACOjQ,IAAP;CAFJ;AAgCAjE,OAAOI,SAAP,CAAiB+T,SAAjB,GAA6B,SAASA,SAAT,CAAmBC,EAAnB,EAAuB;QAC5CC,YAAY,IAAhB;QACIC,OAAO,IADX;WAGO,KAAKpO,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CoP,aAAa,IAAjB,EAAuB;wBACPD,GAAG,IAAIH,iBAAJ,CAAsBhQ,IAAtB,CAAH,CAAZ;mBACOoQ,UAAU,mBAAV,GAAP;;YAGAvP,GAAJ,EAAS;iBAEAA,GAAL;;SAFJ,MAKK,IAAIlE,MAAMX,EAAE0B,GAAZ,EAAiB;sBAGRsC,IAAV,EAAgBqQ,IAAhB;SAHC,MAKA;gBACGC,MAAMC,QAAQvQ,IAAR,EAAcqQ,IAAd,EAAoB1T,CAApB,CAAV;gBAEI,CAAC2T,GAAL,EAAU;;;mBAIHA,GAAP;gBACID,KAAK,sBAAL,CAAJ,EAAkC;0BACpBA,KAAK,oBAAL,CAAV;aADJ,MAGK;;;;KA3BN,CAAP;aAiCSG,SAAT,CAAmBxQ,IAAnB,EAAyByQ,KAAzB,EAAgC;YACxB;sBACU,qBAAV,EAAiCA,KAAjC;SADJ,CAGA,OAAO/H,CAAP,EAAU;iBACDA,CAAL;;aAEC,IAAL,EAAW1M,EAAE0B,GAAb;;aAGK6S,OAAT,CAAiBvQ,IAAjB,EAAuByQ,KAAvB,EAA8B9T,CAA9B,EAAiC;YACzB;mBACOyT,UAAU,mBAAV,EAA+BK,KAA/B,EAAsC9T,CAAtC,CAAP;SADJ,CAGA,OAAO+L,CAAP,EAAU;iBACDA,CAAL;iBACK,IAAL,EAAW1M,EAAE0B,GAAb;mBACO,IAAP;;;CAtDZ;AA0DAqH,aAAa,WAAb;AAmBAhJ,OAAOI,SAAP,CAAiB8B,MAAjB,GAA0B,UAAUuO,EAAV,EAAc;SAC/BxQ,EAAEwQ,EAAF,CAAL;WACO,KAAKvK,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CrE,MAAMe,GAAV,EAAe;iBACN8O,EAAL;SADJ,MAGK;iBACI3L,GAAL,EAAUlE,CAAV;;;KALD,CAAP;CAFJ;AAYAoI,aAAa,QAAb;AA0BAhJ,OAAOI,SAAP,CAAiBuU,KAAjB,GAAyB,YAAY;QAC7BjO,OAAO,IAAX;QACIkO,OAAO,EAAX;QAEIC,eAAe,EAAnB;QACIC,QAAQ,IADZ;QAEIvJ,QAAQ,KAFZ;WAIOtL,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;YACvB6P,KAAJ,EAAW;oBACC,KAAR;2BACe7Q,IAAf,EAAqBgB,IAArB;;YAGA2P,KAAK3S,MAAL,KAAgB,CAApB,EAAuB;iBACd,IAAL,EAAWN,GAAX;SADJ,MAGK,IAAIkT,aAAa5S,MAAjB,EAAyB;+BACPgC,IAAnB,EAAyBgB,IAAzB;;SADC,MAIA;oBACO,IAAR;;KAdD,CAAP;aAmBS8P,cAAT,CAAwB9Q,IAAxB,EAA8BgB,IAA9B,EAAoCY,GAApC,EAAyC;eAC9B,UAAUf,GAAV,EAAelE,CAAf,EAAkB;gBACjBkE,GAAJ,EAAS;qBACAA,GAAL;6BACab,IAAb,CAAkB4B,GAAlB;aAFJ,MAIK,IAAIjF,MAAMe,GAAV,EAAe;uBACTiT,KAAKxJ,MAAL,CAAY,UAAUnF,CAAV,EAAa;2BACrBA,MAAMJ,GAAb;iBADG,CAAP;aADC,MAKA;oBACGA,QAAQa,IAAZ,EAAkB;yBACTzC,IAAL,CAAUrD,CAAV;iCACaqD,IAAb,CAAkBrD,CAAlB;iCACaoU,OAAb,CAAqBtO,IAArB;iBAHJ,MAKK;yBACI,IAAL,EAAW9F,CAAX;iCACaqD,IAAb,CAAkB4B,GAAlB;;;gBAIJ0F,KAAJ,EAAW;wBACC,KAAR;;;SAvBR;;aA8BK0J,kBAAT,CAA4BhR,IAA5B,EAAkCgB,IAAlC,EAAwC;YAChCiQ,QAAQL,YAAZ;uBACe,EAAf;cACM9G,OAAN,CAAc,UAAUlI,GAAV,EAAe;gBACrB8F,IAAJ,CAASoJ,eAAe9Q,IAAf,EAAqBgB,IAArB,EAA2BY,GAA3B,CAAT;SADJ;;aAMKsP,cAAT,CAAwBlR,IAAxB,EAA8BgB,IAA9B,EAAoC;YAE5BmQ,YAAJ;YACIhQ,OAAO,KAAX;YAEIiQ,UAAU,UAASvQ,GAAT,EAAclE,CAAd,EAAiB;2BACZ,KAAf;gBACIwE,IAAJ,EAAU;+BAGSnB,IAAf,EAAqBgB,IAArB,EAA2ByB,IAA3B,EAAiC5B,GAAjC,EAAsClE,CAAtC;aAHJ,MAKK;oBACGkE,GAAJ,EAAS;yBACAA,GAAL;iBADJ,MAGK,IAAIlE,MAAMe,GAAV,EAAe;2BACT,IAAP;iBADC,MAGA;yBACIsC,IAAL,CAAUrD,CAAV;iCACaqD,IAAb,CAAkBrD,CAAlB;;;SAhBZ;eAqBO,CAACwE,IAAR,EAAc;2BACK,IAAf;iBACKuG,IAAL,CAAU0J,OAAV;gBAGID,YAAJ,EAAkB;uBACP,IAAP;qBACKJ,OAAL,CAAatO,IAAb;;;;CApGhB;AA0GAsC,aAAa,OAAb;AA+BAhJ,OAAOI,SAAP,CAAiBkV,cAAjB,GAAkC,UAAUnT,CAAV,EAAY;QACtCuE,OAAO,IAAX;QACI6O,eAAe,CAAnB;QACIC,UAAU,KAAd;QACI,OAAOrT,CAAP,KAAa,QAAb,IAAyBA,IAAI,CAAjC,EAAoC;cAC1B,IAAIiG,KAAJ,CAAU,wDAAwDjG,CAAlE,CAAN;;QAGAA,MAAMyP,QAAV,EAAoB;eACT,KAAK+C,KAAL,EAAP;;WAEG1U,EAAE,UAASgE,IAAT,EAAegB,IAAf,EAAoB;aACpB0G,IAAL,CAAU,UAAS7G,GAAT,EAAclE,CAAd,EAAgB;gBAClBwE,OAAOxE,MAAMe,GAAjB;gBACImD,GAAJ,EAAQ;qBACCA,GAAL;;aADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;qBACX,IAAL,EAAWA,GAAX;aADC,MAGA;;qBAEImD,GAAL,EAAUlE,CAAV;kBAEEoD,YAAF,CAAeC,IAAf,CAAoB,YAAU;;wBAGtBuR,OAAJ,EAAa;kCAEC,KAAV;;;iBALR;oBASI,CAACpQ,IAAD,IAASmQ,eAAepT,CAA5B,EAA+B;;iBAA/B,MAGK;8BAES,IAAV;;;SA3BZ;KADG,EAiCJwS,KAjCI,EAAP;CAXJ;AA8CA3L,aAAa,gBAAb;AAmBAhJ,OAAOI,SAAP,CAAiB+R,MAAjB,GAA0B,UAAUsD,MAAV,EAAkB5T,IAAlB,EAAwB;WACvC,KAAKmJ,GAAL,CAAS,UAAUpK,CAAV,EAAa;eAClBA,EAAE6U,MAAF,EAAUzT,KAAV,CAAgBpB,CAAhB,EAAmBiB,IAAnB,CAAP;KADG,CAAP;CADJ;AAKAmH,aAAa,QAAb;AAmDAhJ,OAAOI,SAAP,CAAiBsV,MAAjB,GAA0B,UAAU7T,IAAV,EAAgB;WAC/B,KAAKmJ,GAAL,CAAS,UAAUpK,CAAV,EAAa;eAClBX,EAAE0V,YAAF,CAAe/U,CAAf,EAAkBoB,KAAlB,CAAwBpB,CAAxB,EAA2BiB,IAA3B,CAAP;KADG,CAAP;CADJ;AAKAmH,aAAa,QAAb;AAeAhJ,OAAOI,SAAP,CAAiBwV,QAAjB,GAA4B,UAAU5I,EAAV,EAAc;QAClC+E,OAAO,IAAI/E,EAAf;WACO,KAAK9G,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1C4Q,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAV;YACIjR,GAAJ,EAAS;iBACAA,GAAL;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;iBACX,IAAL,EAAWA,GAAX;SADC,MAGA,IAAIkU,MAAM7I,EAAN,IAAY+E,IAAhB,EAAsB;mBAChB8D,GAAP;iBACK,IAAL,EAAWjV,CAAX;;SAFC,MAKA;;;KAdF,CAAP;CAFJ;AAqBAoI,aAAa,UAAb;AAoCAhJ,OAAOI,SAAP,CAAiB4V,QAAjB,GAA4B,UAAUhJ,EAAV,EAAc;QAClCiJ,IAAI,IAAR;QACIjE,UAAU,EAAd;QACID,OAAOC,OAAX;WAEO,KAAK9L,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YAC1CH,GAAJ,EAAS;iBAEAA,GAAL;;SAFJ,MAKK,IAAIlE,MAAMe,GAAV,EAAe;gBACZsU,CAAJ,EAAO;6BACUA,CAAb;;gBAEAlE,SAASC,OAAb,EAAsB;qBACb,IAAL,EAAWD,IAAX;;iBAEC,IAAL,EAAWpQ,GAAX;SAPC,MASA;mBACMf,CAAP;gBACIqV,CAAJ,EAAO;6BACUA,CAAb;;gBAEAlF,WAAW9M,KAAKvD,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsBE,CAAtB,CAAX,EAAqCoM,EAArC,CAAJ;;;KApBD,CAAP;CALJ;AA8BAhE,aAAa,UAAb;AAkBAhJ,OAAOI,SAAP,CAAiB8V,MAAjB,GAA0B,YAAY;QAC9BlE,UAAU,EAAd;QACIkE,SAASlE,OADb;QAEIjG,SAAS,EAFb;QAGI/B,QAAQ,KAHZ;QAIImM,UAAU,IAJd;SAMKjQ,OAAL,CAAa,UAAUpB,GAAV,EAAelE,CAAf,EAAkBqD,IAAlB,EAAwBgB,IAAxB,EAA8B;YACnCkR,WAAW,IAAf,EAAqB;gBACb9J,KAAK8J,OAAT;sBACU,IAAV;eACGrR,GAAH,EAAQlE,CAAR;;YAGAkE,GAAJ,EAAS;mBACEb,IAAP,CAAYa,GAAZ;;SADJ,MAIK,IAAIlE,MAAMe,GAAV,EAAe;oBACR,IAAR;SADC,MAGA;qBACQf,CAAT;;;KAfR,EAkBGoF,MAlBH;WAoBO/F,EAAE,UAAUgE,IAAV,EAAgBgB,IAAhB,EAAsB;YACvBmR,YAAYrK,MAAhB;iBACS,EAAT;YAEI,CAACqK,UAAUnU,MAAX,IAAqBiU,WAAWlE,OAAhC,IAA2C,CAAChI,KAAhD,EAAuD;sBAKzC,UAAUlF,GAAV,EAAelE,CAAf,EAAkB;qBACnBkE,GAAL,EAAUlE,CAAV;oBACIA,MAAMe,GAAV,EAAe;;;aAFnB;SALJ,MAYK;sBACSoM,OAAV,CAAkB9J,IAAlB;gBACIiS,WAAWlE,OAAf,EAAwB;qBACf,IAAL,EAAWkE,MAAX;;gBAEAlM,KAAJ,EAAW;qBACF,IAAL,EAAWrI,GAAX;aADJ,MAGK;;;;KAxBN,CAAP;CA3BJ;AAyDAqH,aAAa,QAAb;AAiBA/I,EAAEoW,MAAF,GAAW,UAAUzI,GAAV,EAAe;WACf3N,EAAEqW,IAAF,CAAO1I,GAAP,EAAY5C,GAAZ,CAAgB,UAAUiD,CAAV,EAAa;eACzBL,IAAIK,CAAJ,CAAP;KADG,CAAP;CADJ;AAkBA,SAASqI,IAAT,CAAe1I,GAAf,EAAoB;QACZ2I,YAAY,EAAhB;SACK,IAAItI,CAAT,IAAcL,GAAd,EAAmB;YACXvN,OAAOa,IAAP,CAAY0M,GAAZ,EAAiBK,CAAjB,CAAJ,EAAyB;sBACXhK,IAAV,CAAegK,CAAf;;;WAGDsI,SAAP;;AAGJtW,EAAEqW,IAAF,GAAS,UAAU1I,GAAV,EAAe;WACb3N,EAAEqW,KAAK1I,GAAL,CAAF,CAAP;CADJ;AAmBA3N,EAAEuW,KAAF,GAAU,UAAU5I,GAAV,EAAe;WACd3N,EAAEqW,IAAF,CAAO1I,GAAP,EAAY5C,GAAZ,CAAgB,UAAUiD,CAAV,EAAa;eACzB,CAACA,CAAD,EAAIL,IAAIK,CAAJ,CAAJ,CAAP;KADG,CAAP;CADJ;AA6BAhO,EAAEwW,MAAF,GAAWxW,EAAE2B,KAAF,CAAQ,UAAU8U,UAAV,EAAsBpE,MAAtB,EAA8B;SACxC,IAAIrE,CAAT,IAAcyI,UAAd,EAA0B;YAClBrW,OAAOa,IAAP,CAAYwV,UAAZ,EAAwBzI,CAAxB,CAAJ,EAAgC;mBACrBA,CAAP,IAAYyI,WAAWzI,CAAX,CAAZ;;;WAGDqE,MAAP;CANO,CAAX;AAgCArS,EAAEiP,GAAF,GAAQjP,EAAE2B,KAAF,CAAQ,UAAUyL,IAAV,EAAgBO,GAAhB,EAAqB;WAC1BA,IAAIP,IAAJ,CAAP;CADI,CAAR;AAwBApN,EAAE0W,GAAF,GAAQ1W,EAAE2B,KAAF,CAAQ,UAAUyL,IAAV,EAAgBb,GAAhB,EAAqBoB,GAArB,EAA0B;QAClCP,IAAJ,IAAYb,GAAZ;WACOoB,GAAP;CAFI,CAAR;AAoBA3N,EAAE2W,GAAF,GAAQ,YAAY;YACRA,GAAR,CAAY5U,KAAZ,CAAkB6U,OAAlB,EAA2B/U,SAA3B;CADJ;AAiDA7B,EAAE0V,YAAF,GAAiB,UAAUrT,CAAV,cAAyBvC,WAAzB,EAAsC;QAE/CwF,SAASF,WAAWtF,WAAX,CAAb;WAEO,YAAY;YACX2G,OAAO,IAAX;YACI7E,OAAO3B,MAAMgB,IAAN,CAAWY,SAAX,CAAX;eACO7B,EAAE,UAAUgE,IAAV,EAAgB;gBACjBoI,KAAK,UAAUvH,GAAV,EAAe;oBAChBA,GAAJ,EAAS;yBACAA,GAAL;iBADJ,MAGK;wBACGgS,SAAS5W,MAAMgB,IAAN,CAAWY,SAAX,EAAsB,CAAtB,CAAb;wBACIiV,IAAIxR,OAAOvD,KAAP,CAAa,IAAb,EAAmB8U,MAAnB,CAAR;yBACK,IAAL,EAAWC,CAAX;;qBAEC,IAAL,EAAWpV,GAAX;aATJ;cAWEK,KAAF,CAAQ0E,IAAR,EAAc7E,KAAKK,MAAL,CAAY,CAACmK,EAAD,CAAZ,CAAd;SAZG,CAAP;KAHJ;CAJJ;AA6CA,SAAS2K,OAAT,CAAkB5V,EAAlB,EAAsB;QACd,EAAE,OAAOA,EAAP,KAAc,UAAd,IAA4BA,GAAGhB,SAAjC,CAAJ,EAAiD;eAAS,KAAP;;QAC/C6W,UAAUzW,QAAQF,OAAOwN,mBAAf,GAAqCwI,IAAnD;QACIY,UAAUD,QAAQ7V,GAAGhB,SAAX,CAAd;WACO8W,QAAQjV,MAAR,GAAiB,CAAjB,IAAsB,EAAEiV,QAAQjV,MAAR,KAAmB,CAAnB,IACvBiV,QAAQ,CAAR,MAAe,aADM,CAA7B;;AAIJ,SAASC,aAAT,CAAwBvJ,GAAxB,EAA6B;QACrBwJ,WAAW,EAAf;QACItE,OAAOlF,GAAX;QACIyJ,aAAa,UAAUhK,IAAV,EAAgB;iBACpBA,IAAT,IAAiB,IAAjB;KADJ;WAGO/M,OAAO0N,cAAP,CAAsB8E,IAAtB,CAAP,EAAoC;YAC5BhE,QAAQxO,OAAOwN,mBAAP,CAA2BgF,IAA3B,CAAZ;cACM/E,OAAN,CAAcsJ,UAAd;eACO/W,OAAO0N,cAAP,CAAsB8E,IAAtB,CAAP;;WAEGwD,KAAKc,QAAL,CAAP;;AAGJ,SAASE,YAAT,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAoC;QAE5BP,UAAUzW,QAAQ2W,aAAR,GAAwBb,IAAtC;QACIY,UAAUD,QAAQM,GAAR,CAAd;SAEK,IAAIzU,IAAI,CAAR,EAAW6G,MAAMuN,QAAQjV,MAA9B,EAAsCa,IAAI6G,GAA1C,EAA+C7G,GAA/C,EAAoD;YAC5CsM,MAAM8H,QAAQpU,CAAR,CAAV;YACI0J,GAAJ;YAGI;kBACM+K,IAAInI,GAAJ,CAAN;SADJ,CAGA,OAAOzC,CAAP,EAAU;;YAINH,OAAO,OAAOA,GAAP,KAAe,UAAtB,IAAoC,CAACwK,QAAQxK,GAAR,CAArC,IACI,CAACA,IAAIiL,+BADb,EAC8C;gBAEtCC,cAAczX,EAAE0V,YAAF,CAAenJ,GAAf,CAAlB;wBACYiL,+BAAZ,GAA8C,IAA9C;gBACIrI,MAAMoI,MAAV,IAAoBE,WAApB;;;WAGDH,GAAP;;AAGJtX,EAAEqX,YAAF,GAAiB,UAAUK,GAAV,EAAe;QACxB,OAAOA,GAAP,KAAe,UAAf,IAA6B,OAAOA,GAAP,KAAe,QAAhD,EAA0D;cAChD,IAAIC,SAAJ,CAAc,2CAAd,CAAN;;QAEAJ,SAAS,QAAb;QAEIK,MAAMP,aAAaK,GAAb,EAAkBH,MAAlB,CAAV;QACIR,QAAQW,GAAR,CAAJ,EAAkB;YACVvX,SAAJ,GAAgBkX,aAAaK,IAAIvX,SAAjB,EAA4BoX,MAA5B,CAAhB;;WAEGK,GAAP;CAVJ;AAyBA5X,EAAE4P,GAAF,GAAQ5P,EAAE2B,KAAF,CAAQ,UAAUkO,CAAV,EAAaC,CAAb,EAAgB;WACrBD,IAAIC,CAAX;CADI,CAAR;AAkBA9P,EAAE0O,GAAF,GAAQ,UAAU/N,CAAV,EAAa;WACV,CAACA,CAAR;CADJ;;;AC/tJO,MAAMkX,SAAS;QACd,EADc;SAEb;CAFF;AAKP,AAAO;AAcP,cAAgBC,MAAD,IAAmB;QAC1B9R,IAAI+R,GAAGC,iBAAH,CAAqBF,OAAOG,IAA5B,EAAkC;WACnC,GADmC;cAEhC;GAFF,CAAV;QAKMC,OAAO;UACLJ,OAAO9O,IADF;SAEN5H,QAAQ+W,GAFF;cAGDC,GAAGC,QAAH,EAHC;OAIR;GAJL;SAOOC,aAAaJ,IAAb,EAAmBlS,CAAnB,EAAsB8R,MAAtB,CAAP;CAbF;AAgBA,MAAMQ,eAAe,CAACJ,IAAD,EAAOlS,CAAP,EAAU8R,MAAV,MAAsB;SACjClV,CAAD,IAAe;WACb0V,+BAEAJ,IAFA,EAGAtV,CAHA,GAKLoD,CALK,EAML8R,MANK,CAAP;GAFuC;QAWnCS,eAAeT,OAAOU,KAAtB,EAA6BX,OAAOY,IAApC,EAA0CzS,CAA1C,EAA6C8R,OAAOY,WAApD,EAAiER,IAAjE,CAXmC;SAYlCK,eAAeT,OAAOU,KAAtB,EAA6BX,OAAOc,KAApC,EAA2C3S,CAA3C,EAA8C8R,OAAOY,WAArD,EAAkER,IAAlE;CAZY,CAArB;AAeA,MAAMK,iBAAiB,CAACK,WAAD,EAAcC,aAAd,EAA6B7S,CAA7B,EAAgC0S,WAAhC,EAA6CR,IAA7C,KACpBU,eAAeC,aAAf,GACGC,YAAY9S,CAAZ,EAAe0S,WAAf,EAA4BG,aAA5B,EAA2CX,IAA3C,CADH,GAEG,MAAM,EAHZ;AAKA,MAAMY,cAAc,CAAC9S,CAAD,EAAI0S,WAAJ,EAAiBF,KAAjB,EAAwBN,IAAxB,KAAiC,CACnDtV,CADmD,EAEnDmW,MAAc,EAFqC,KAGhD;MACC,OAAOnW,CAAP,KAAa,QAAjB,EAA2B;UACnBA,CAAN;QACI,EAAJ;;QAaIoW,2BACDd,IADC,EAEDtV,CAFC;OAAA;SAAA;UAKE,IAAIiT,IAAJ,GAAWoD,WAAX;IALR;QAQMzL,MAAMnN,OAAOgW,IAAP,CAAY2C,MAAZ,EAAoBzT,MAApB,CAA2B,CAAC5E,CAAD,EAAYqN,CAAZ,KAAkC;UACjEzB,MAAMyM,OAAOhL,CAAP,CAAZ;UACMkL,aAAaR,YAAY1K,CAAZ,KAAkB0K,YAAY1K,CAAZ,EAAezB,GAAf,CAArC;6BAGK5L,CADL;OAEGqN,CAAD,GAAKkL,cAAc3M;;GANX,EAQT,EARS,CAAZ;IAUEnI,KAAF,CAAS,GAAE+U,KAAKC,SAAL,CAAe5L,GAAf,CAAoB,IAA/B;CArCF;;ACxFA,MAAM6L,WAAWC,OAAO;QAChB,2BADgB;SAEfzB,OAAOc,KAFQ;QAGhB,QAHgB;eAIT;CAJE,CAAjB;AAOA,MAAMY,aAAaD,OAAO;QAClB,0BADkB;SAEjBzB,OAAOY,IAFU;QAGlB,cAHkB;eAIX;CAJI,CAAnB,CAOA;;ACaA,yBAAgBe,KAAD,IAAmB;QAC1BC,QAAQD,MAAMhI,KAAN,CAAY,IAAZ,CAAd;SAEOkI,QAASD,KAAT,EACJ1O,GADI,CACC4O,IAAD,IAAkB;WACdD,QAAU1V,IAAD,IAAoB;YAC5BtB,UAAUkX,mBACb,uCADa,EAEd,CAAC/U,GAAD,EAAMlE,CAAN,KAAY;YACNkE,GAAJ,EAAS;mBACEX,KAAT,CAAe,EAAEW,GAAF,EAAf,EAAwB,sBAAxB;eACK,IAAL,EAAW8U,IAAX;SAFF,MAGO;cACDhZ,EAAEqB,MAAF,GAAW,CAAf,EAAkBgC,KAAK,IAAL,EAAWrD,CAAX;;aAGf,IAAL,EAAW+Y,QAAShY,GAApB;OAVY,CAAhB;cAcQmY,KAAR,CAAczV,KAAd,CAAoBuV,IAApB;cACQE,KAAR,CAAcvV,GAAd;KAhBK,CAAP;GAFG,EAqBJ4O,QArBI,CAqBKuG,MAAMzX,MArBX,EAsBJ+I,GAtBI,CAsBCpK,CAAD,IAAeA,EAAEK,QAAF,CAAW,MAAX,CAtBf,EAuBJkL,OAvBI,GAwBJnB,GAxBI,CAwBApK,KAAKA,EAAEmZ,IAAF,CAAO,IAAP,CAxBL,CAAP;CAHF;;ACFA,IAAIC,MAAJ;AAEA,aAAe,MAAM;WACVC,KAAKC,YAAL,CACP,CAACC,OAAD,EAAgC3W,QAAhC,KAAkE;UAC1D6O,UAAUsH,QAASlH,QAAT,CACdkH,QAAS3O,GAAT,CAAapK,KAAKA,EAAEK,QAAF,CAAW,OAAX,CAAlB,CADc,EAEd0Y,QAASxN,OAAT,EAFc,EAGdwN,QAAS3O,GAAT,CAAcpK,CAAD,IAAiBA,EAAEmZ,IAAF,CAAO,EAAP,CAA9B,CAHc,EAIdJ,QAASzM,OAAT,CAAkBtM,CAAD,IAAe;YACxB,EAAE6Y,KAAF,KAA+BL,KAAKgB,KAAL,CAAWxZ,CAAX,CAArC;aACOyZ,kBAAkBZ,KAAlB,CAAP;KAFF,CAJc,EAQdE,QAAS3O,GAAT,CAAanL,MAAM;aACVuZ,KAAKC,SAAL,CAAexZ,EAAf,CAAP;KADF,CARc,CAAhB;YAaQkE,IAAR,CAAasO,OAAb,EAAsBtO,IAAtB,CAA2BP,QAA3B;GAfK,CAAT;QAmBM8W,OAAe,CAACjZ,QAAQkZ,GAAR,CAAYC,uBAAlC;SACOC,MAAP,CAAcH,IAAd;SAEON,MAAP;CAvBF;;"}